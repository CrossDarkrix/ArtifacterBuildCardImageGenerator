import base64
import concurrent.futures
import itertools
import json
import os
import re
import shutil
import subprocess
import tempfile
import platform
import sys
import time
import urllib.request
from collections import Counter
from decimal import Decimal, ROUND_HALF_UP
from ImageBytes import ArtifactGrades, Artifactemotes, ArtifactBaseImages, ArtifactAssets, ArtifactConstellation, ArtifactRarelity
from io import BytesIO
from PIL import Image, ImageFont, ImageDraw, ImageEnhance
from PIL import ImageFile

ImageFile.LOAD_TRUNCATED_IMAGES = True
from PySide6.QtCore import (QByteArray, QMetaObject, QRect,
                            QSize, Qt)
from PySide6.QtGui import (QFont, QImage, QStandardItem, QStandardItemModel,
                           QPixmap, QIcon)
from PySide6.QtWidgets import (QAbstractItemView, QApplication, QCheckBox, QLabel,
                               QListView, QPushButton, QMainWindow, QLineEdit, QFrame, QDialog, QDialogButtonBox, QProgressBar, QButtonGroup, QGridLayout)

UsrAgn = 'Mozilla/5.0 (Linux; U; Android 8.0; en-la; Nexus Build/JPG991) AppleWebKit/511.2 (KHTML, like Gecko) Version/5.0 Mobile/11S444 YJApp-ANDROID jp.co.yahoo.android.yjtop/4.01.1.5'
ClickCount = ['0']

class READMEDialog(QDialog):
    def __init__(self, parent=None):
        super(READMEDialog, self).__init__(parent)
        self.setWindowTitle('Artifacter Image Generatorの操作方法')
        self.setFixedSize(1050, 800)
        self.setStyleSheet('QDialog{background: #2d2d2d;color: #ededed;}')
        self.setWindowIcon(QIcon(QPixmap(QSize(90, 90)).fromImage(QImage.fromData(QByteArray.fromBase64(b'')))))
        self.Fonts = QFont()
        self.Fonts.setPixelSize(16)
        self.README_LIST = QLabel()
        self.README_LIST.setFont(self.Fonts)
        self.README_LIST.setFixedSize(QSize(1025, 730))
        self.README_LIST.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
        self.README_LIST.setText(self.REDMEText())
        self.OkButton = QDialogButtonBox(QDialogButtonBox.Ok, Qt.Horizontal, self)
        self.OkButton.accepted.connect(self.accept)
        self.OkButton.setStyleSheet('QDialogButtonBox{background: #2d2d2d;color: Red;} QPushButton{background: #2d2d2d;color: Red;}')
        self.DialogLayout = QGridLayout()
        self.DialogLayout.addWidget(self.README_LIST, 0, 0, Qt.AlignCenter)
        self.DialogLayout.addWidget(self.OkButton, 1, 1, Qt.AlignCenter)
        self.DialogLayout.setColumnMinimumWidth(0, 800)
        self.DialogLayout.setRowMinimumHeight(0, 800)
        self.DialogLayout.setAlignment(Qt.AlignCenter)
        self.setLayout(self.DialogLayout)

    def clearText(self):
        [[self.README_Model.removeRow(i) for i in range(self.README_Model.rowCount())] for _ in range(30)]

    def REDMEText(self):
        return """「Artifacter Image Generator」 へようこそ。

[各種項目について]
    ・左上のアイコン: 原神で設定したキャラクターのアイコンが表示されます。
    ・UID: 原神でパイモンマークを押した時に出てくる「UID」を入力してください
    ・UIDの右横のボタン: UIDの更新時に押してください。(※なお、連打するとサーバー負荷になるとともにフリーズするのでおやめください。)
    ・UID入力場所の下: プレイヤー名と世界ランクが表示されます。
    ・プレイヤー名と世界ランク項目の下: ここでスコアを計算したいキャラクターを選択します。
    ・計算方式: ここでキャラクターのスコアを計算する計算方式を選択します。
    ・プレビュー: ビルドカードを作成完了後に作成したビルドカードが表示されます。
    ・ファイル名: 出力される画像ファイルの名前を決めれます。(※.pngを含めてください)
    ・保存場所: 出力される画像の保存場所を決めれます。(※通常はユーザーフォルダの下に「ArtifacterImageOutput」というフォルダを作成してから出力します)
    ・作成: ビルドカードを作成します。(※連打しないでください)

[計算方式について]
    ・HP換算: HPを基準にキャラクターのスコアを計算します。
    ・攻撃力換算: 攻撃力を基準にキャラクターのスコアを計算します。通常はこちらで計算します。
    ・防御力換算: 防御力を基準にキャラクターのスコアを計算します。
    ・元素チャージ効率換算: 元素チャージ効率を基準にキャラクターのスコアを計算します。
    ・元素熟知換算: 元素熟知を基準にキャラクターのスコアを計算します。

[使い方]
    ① UIDの項目にUIDを入力してください(※通常は自動入力されます)
    ② キャラクターを選択します。
    ③ 計算方式を選択します。
    ④ ファイル名を変えたい場合は変えます。
    ⑤ 保存場所を変えたい場合は変えます。
    ⑥ 作成ボタンを押してしばらく待ちます。
    ⑦ 完成"""

    @staticmethod
    def results():
        _r = READMEDialog()
        _r.exec()
        if _r.result() == QDialog.Accepted:
            pass

class NoneInputUID(QDialog):
    def __init__(self, parent=None):
        super(NoneInputUID, self).__init__(parent)
        self.setWindowTitle('おっと!')
        self.setFixedSize(300, 120)
        self.setStyleSheet('QDialog{background: #2d2d2d;color: #ededed;}')
        self.setWindowIcon(QIcon(QPixmap(QSize(90, 90)).fromImage(QImage.fromData(QByteArray.fromBase64(b'')))))
        self.Text = QLabel()
        self.Text.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
        self.Fonts = QFont()
        self.Fonts.setPixelSize(13)
        self.setFont(self.Fonts)
        self.Text.setFont(self.Fonts)
        self.Text.setText('UIDが入力されていません!UIDを入力してください!')
        self.OkButton = QDialogButtonBox(QDialogButtonBox.Ok, Qt.Horizontal, self)
        self.OkButton.accepted.connect(self.accept)
        self.OkButton.setStyleSheet('QDialogButtonBox{background: #2d2d2d;color: Red;} QPushButton{background: #2d2d2d;color: Red;}')
        self.DialogLayout = QGridLayout()
        self.DialogLayout.addWidget(self.Text, 2, 0, Qt.AlignCenter)
        self.DialogLayout.addWidget(self.OkButton, 4, 0, Qt.AlignCenter)
        for c in range(self.DialogLayout.columnCount()):
            self.DialogLayout.setColumnMinimumWidth(c, 10)
        self.setMinimumWidth(300)
        self.setMaximumWidth(300)
        self.DialogLayout.setAlignment(Qt.AlignCenter)
        self.setLayout(self.DialogLayout)

    @staticmethod
    def RESULTs():
        _r = NoneInputUID()
        _r.exec()
        if _r.result() == QDialog.Accepted:
            pass

class NoneSelectedItem(QDialog):
    def __init__(self, parent=None):
        super(NoneSelectedItem, self).__init__(parent)
        self.setWindowTitle('おっと!')
        self.setFixedSize(450, 120)
        self.setStyleSheet('QDialog{background: #2d2d2d;color: #ededed;}')
        self.setWindowIcon(QIcon(QPixmap(QSize(90, 90)).fromImage(QImage.fromData(QByteArray.fromBase64(b'')))))
        self.Text = QLabel()
        self.Text.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
        self.Fonts = QFont()
        self.Fonts.setPixelSize(13)
        self.setFont(self.Fonts)
        self.Text.setFont(self.Fonts)
        self.Text.setText('キャラクターが選択されていません!キャラクターを選択してから作成してください!')
        self.OkButton = QDialogButtonBox(QDialogButtonBox.Ok, Qt.Horizontal, self)
        self.OkButton.accepted.connect(self.accept)
        self.OkButton.setStyleSheet('QDialogButtonBox{background: #2d2d2d;color: Red;} QPushButton{background: #2d2d2d;color: Red;}')
        self.DialogLayout = QGridLayout()
        self.DialogLayout.addWidget(self.Text, 2, 0, Qt.AlignCenter)
        self.DialogLayout.addWidget(self.OkButton, 4, 0, Qt.AlignCenter)
        for c in range(self.DialogLayout.columnCount()):
            self.DialogLayout.setColumnMinimumWidth(c, 10)
        self.setMinimumWidth(450)
        self.setMaximumWidth(450)
        self.DialogLayout.setAlignment(Qt.AlignCenter)
        self.setLayout(self.DialogLayout)

    @staticmethod
    def RESULTs():
        _r = NoneSelectedItem()
        _r.exec()
        if _r.result() == QDialog.Accepted:
            pass

class NoneInputSavePath(QDialog):
    def __init__(self, parent=None):
        super(NoneInputSavePath, self).__init__(parent)
        self.setWindowTitle('おっと!')
        self.setFixedSize(450, 120)
        self.setStyleSheet('QDialog{background: #2d2d2d;color: #ededed;}')
        self.setWindowIcon(QIcon(QPixmap(QSize(90, 90)).fromImage(QImage.fromData(QByteArray.fromBase64(b'')))))
        self.Text = QLabel()
        self.Text.setStyleSheet('QLabel{background: #2d2d2d;color: #ededed;}')
        self.Fonts = QFont()
        self.Fonts.setPixelSize(13)
        self.setFont(self.Fonts)
        self.Text.setFont(self.Fonts)
        self.Text.setText('保存場所が入力されていません!保存先を入力してから作成してください!')
        self.OkButton = QDialogButtonBox(QDialogButtonBox.Ok, Qt.Horizontal, self)
        self.OkButton.accepted.connect(self.accept)
        self.OkButton.setStyleSheet('QDialogButtonBox{background: #2d2d2d;color: Red;} QPushButton{background: #2d2d2d;color: Red;}')
        self.DialogLayout = QGridLayout()
        self.DialogLayout.addWidget(self.Text, 2, 0, Qt.AlignCenter)
        self.DialogLayout.addWidget(self.OkButton, 4, 0, Qt.AlignCenter)
        for c in range(self.DialogLayout.columnCount()):
            self.DialogLayout.setColumnMinimumWidth(c, 10)
        self.setMinimumWidth(450)
        self.setMaximumWidth(450)
        self.DialogLayout.setAlignment(Qt.AlignCenter)
        self.setLayout(self.DialogLayout)

    @staticmethod
    def RESULTs():
        _r = NoneInputSavePath()
        _r.exec()
        if _r.result() == QDialog.Accepted:
            pass


def ArtifactMainOption():
    return """{
    "会心ダメージ": {
        "21.8": [
            [
                6.2,
                7.8,
                7.8
            ],
            [
                5.4,
                5.4,
                5.4,
                5.4
            ]
        ],
        "22.5": [
            [
                7.0,
                7.8,
                7.8
            ],
            [
                5.4,
                5.4,
                5.4,
                6.2
            ]
        ],
        "23.3": [
            [
                7.8,
                7.8,
                7.8
            ],
            [
                5.4,
                5.4,
                5.4,
                7.0
            ]
        ],
        "27.2": [
            [
                5.4,
                6.2,
                7.8,
                7.8
            ],
            [
                5.4,
                5.4,
                5.4,
                5.4,
                5.4
            ]
        ],
        "28.0": [
            [
                5.4,
                7.0,
                7.8,
                7.8
            ],
            [
                5.4,
                5.4,
                5.4,
                5.4,
                6.2
            ]
        ],
        "28.8": [
            [
                5.4,
                7.8,
                7.8,
                7.8
            ],
            [
                5.4,
                5.4,
                5.4,
                5.4,
                7.0
            ]
        ],
        "29.5": [
            [
                6.2,
                7.8,
                7.8,
                7.8
            ],
            [
                5.4,
                5.4,
                5.4,
                5.4,
                7.8
            ]
        ],
        "30.3": [
            [
                7.0,
                7.8,
                7.8,
                7.8
            ],
            [
                5.4,
                5.4,
                5.4,
                6.2,
                7.8
            ]
        ],
        "31.1": [
            [
                7.8,
                7.8,
                7.8,
                7.8
            ],
            [
                5.4,
                5.4,
                5.4,
                7.0,
                7.8
            ]
        ],
        "32.6": [
            [
                5.4,
                5.4,
                6.2,
                7.8,
                7.8
            ],
            [
                5.4,
                5.4,
                5.4,
                5.4,
                5.4,
                5.4
            ]
        ],
        "33.4": [
            [
                5.4,
                5.4,
                7.0,
                7.8,
                7.8
            ],
            [
                5.4,
                5.4,
                5.4,
                5.4,
                5.4,
                6.2
            ]
        ],
        "34.2": [
            [
                5.4,
                5.4,
                7.8,
                7.8,
                7.8
            ],
            [
                5.4,
                5.4,
                5.4,
                5.4,
                5.4,
                7.0
            ]
        ],
        "35.0": [
            [
                5.4,
                6.2,
                7.8,
                7.8,
                7.8
            ],
            [
                5.4,
                5.4,
                5.4,
                5.4,
                5.4,
                7.8
            ]
        ],
        "35.7": [
            [
                5.4,
                7.0,
                7.8,
                7.8,
                7.8
            ],
            [
                5.4,
                5.4,
                5.4,
                5.4,
                7.0,
                7.0
            ]
        ],
        "36.5": [
            [
                5.4,
                7.8,
                7.8,
                7.8,
                7.8
            ],
            [
                5.4,
                5.4,
                5.4,
                5.4,
                7.0,
                7.8
            ]
        ],
        "35.8": [
            [
                6.2,
                6.2,
                7.8,
                7.8,
                7.8
            ],
            [
                5.4,
                5.4,
                5.4,
                5.4,
                6.2,
                7.8
            ]
        ],
        "37.3": [
            [
                6.2,
                7.8,
                7.8,
                7.8,
                7.8
            ],
            [
                5.4,
                5.4,
                5.4,
                5.4,
                7.8,
                7.8
            ]
        ],
        "38.1": [
            [
                7.0,
                7.8,
                7.8,
                7.8,
                7.8
            ],
            [
                5.4,
                5.4,
                5.4,
                6.2,
                7.8,
                7.8
            ]
        ],
        "38.8": [
            [
                7.8,
                7.8,
                7.8,
                7.8,
                7.8
            ],
            [
                5.4,
                5.4,
                7.0,
                7.0,
                7.0,
                7.0
            ]
        ],
        "ov": [
            "21.8",
            "22.5",
            "23.3",
            "27.2",
            "28.0",
            "28.8",
            "29.5",
            "30.3",
            "31.1",
            "32.6",
            "33.4",
            "34.2",
            "35.0",
            "35.7",
            "36.5",
            "35.8",
            "37.3",
            "38.1",
            "38.8"
        ]
    },
    "会心率": {
        "10.9": [
            [
                3.1,
                3.9,
                3.9
            ],
            [
                2.7,
                2.7,
                2.7,
                2.7
            ]
        ],
        "11.3": [
            [
                3.5,
                3.9,
                3.9
            ],
            [
                2.7,
                2.7,
                2.7,
                3.1
            ]
        ],
        "11.7": [
            [
                3.9,
                3.9,
                3.9
            ],
            [
                2.7,
                2.7,
                2.7,
                3.5
            ]
        ],
        "13.6": [
            [
                2.7,
                3.1,
                3.9,
                3.9
            ],
            [
                2.7,
                2.7,
                2.7,
                2.7,
                2.7
            ]
        ],
        "14.0": [
            [
                2.7,
                3.5,
                3.9,
                3.9
            ],
            [
                2.7,
                2.7,
                2.7,
                2.7,
                3.1
            ]
        ],
        "14.4": [
            [
                2.7,
                3.9,
                3.9,
                3.9
            ],
            [
                2.7,
                2.7,
                2.7,
                2.7,
                3.5
            ]
        ],
        "14.8": [
            [
                3.1,
                3.9,
                3.9,
                3.9
            ],
            [
                2.7,
                2.7,
                2.7,
                2.7,
                3.9
            ]
        ],
        "15.2": [
            [
                3.5,
                3.9,
                3.9,
                3.9
            ],
            [
                2.7,
                2.7,
                2.7,
                3.1,
                3.9
            ]
        ],
        "15.6": [
            [
                3.9,
                3.9,
                3.9,
                3.9
            ],
            [
                2.7,
                2.7,
                2.7,
                3.5,
                3.9
            ]
        ],
        "16.3": [
            [
                2.7,
                2.7,
                3.1,
                3.9,
                3.9
            ],
            [
                2.7,
                2.7,
                2.7,
                2.7,
                2.7,
                2.7
            ]
        ],
        "16.7": [
            [
                2.7,
                2.7,
                3.5,
                3.9,
                3.9
            ],
            [
                2.7,
                2.7,
                2.7,
                2.7,
                2.7,
                3.1
            ]
        ],
        "17.1": [
            [
                2.7,
                2.7,
                3.9,
                3.9,
                3.9
            ],
            [
                2.7,
                2.7,
                2.7,
                2.7,
                2.7,
                3.5
            ]
        ],
        "17.5": [
            [
                2.7,
                3.1,
                3.9,
                3.9,
                3.9
            ],
            [
                2.7,
                2.7,
                2.7,
                2.7,
                2.7,
                3.9
            ]
        ],
        "17.9": [
            [
                2.7,
                3.5,
                3.9,
                3.9,
                3.9
            ],
            [
                2.7,
                2.7,
                2.7,
                2.7,
                3.1,
                3.9
            ]
        ],
        "18.3": [
            [
                2.7,
                3.9,
                3.9,
                3.9,
                3.9
            ],
            [
                2.7,
                2.7,
                2.7,
                2.7,
                3.5,
                3.9
            ]
        ],
        "18.7": [
            [
                3.1,
                3.9,
                3.9,
                3.9,
                3.9
            ],
            [
                2.7,
                2.7,
                2.7,
                2.7,
                3.9,
                3.9
            ]
        ],
        "19.1": [
            [
                3.5,
                3.9,
                3.9,
                3.9,
                3.9
            ],
            [
                2.7,
                2.7,
                2.7,
                3.1,
                3.9,
                3.9
            ]
        ],
        "ov": [
            "10.9",
            "11.3",
            "11.7",
            "13.6",
            "14.0",
            "14.4",
            "14.8",
            "15.2",
            "15.6",
            "16.3",
            "16.7",
            "17.1",
            "17.5",
            "17.9",
            "18.3",
            "18.7",
            "19.1"
        ]
    },
    "元素チャージ効率": {
        "18.1": [
            [
                5.2,
                6.5,
                6.5
            ],
            [
                4.5,
                4.5,
                4.5,
                4.5
            ]
        ],
        "18.8": [
            [
                5.8,
                6.5,
                6.5
            ],
            [
                4.5,
                4.5,
                4.5,
                5.2
            ]
        ],
        "19.4": [
            [
                6.5,
                6.5,
                6.5
            ],
            [
                4.5,
                4.5,
                4.5,
                5.8
            ]
        ],
        "22.7": [
            [
                4.5,
                5.2,
                6.5,
                6.5
            ],
            [
                4.5,
                4.5,
                4.5,
                4.5,
                4.5
            ]
        ],
        "23.3": [
            [
                4.5,
                5.8,
                6.5,
                6.5
            ],
            [
                4.5,
                4.5,
                4.5,
                4.5,
                5.2
            ]
        ],
        "24.0": [
            [
                4.5,
                6.5,
                6.5,
                6.5
            ],
            [
                4.5,
                4.5,
                4.5,
                4.5,
                5.8
            ]
        ],
        "24.6": [
            [
                5.2,
                6.5,
                6.5,
                6.5
            ],
            [
                4.5,
                4.5,
                4.5,
                4.5,
                6.5
            ]
        ],
        "25.3": [
            [
                5.8,
                6.5,
                6.5,
                6.5
            ],
            [
                4.5,
                4.5,
                4.5,
                5.2,
                6.5
            ]
        ],
        "25.9": [
            [
                6.5,
                6.5,
                6.5,
                6.5
            ],
            [
                4.5,
                4.5,
                4.5,
                5.8,
                6.5
            ]
        ],
        "27.2": [
            [
                4.5,
                4.5,
                5.2,
                6.5,
                6.5
            ],
            [
                4.5,
                4.5,
                4.5,
                4.5,
                4.5,
                4.5
            ]
        ],
        "28.5": [
            [
                4.5,
                4.5,
                6.5,
                6.5,
                6.5
            ],
            [
                4.5,
                4.5,
                4.5,
                4.5,
                4.5,
                5.8
            ]
        ],
        "27.8": [
            [
                4.5,
                5.8,
                5.8,
                5.8,
                5.8
            ],
            [
                4.5,
                4.5,
                4.5,
                4.5,
                4.5,
                5.2
            ]
        ],
        "29.8": [
            [
                4.5,
                5.8,
                6.5,
                6.5,
                6.5
            ],
            [
                4.5,
                4.5,
                4.5,
                4.5,
                5.2,
                6.5
            ]
        ],
        "31.1": [
            [
                5.2,
                6.5,
                6.5,
                6.5,
                6.5
            ],
            [
                4.5,
                4.5,
                4.5,
                4.5,
                6.5,
                6.5
            ]
        ],
        "32.4": [
            [
                6.5,
                6.5,
                6.5,
                6.5,
                6.5
            ],
            [
                4.5,
                4.5,
                4.5,
                5.8,
                6.5,
                6.5
            ]
        ],
        "ov": [
            "18.1",
            "18.8",
            "19.4",
            "22.7",
            "23.3",
            "24.0",
            "24.6",
            "25.3",
            "25.9",
            "27.2",
            "28.5",
            "27.8",
            "29.8",
            "31.1",
            "32.4"
        ]
    },
    "防御パーセンテージ": {
        "20.4": [
            [
                5.8,
                7.3,
                7.3
            ],
            [
                5.1,
                5.1,
                5.1,
                5.1
            ]
        ],
        "21.1": [
            [
                6.6,
                7.3,
                7.3
            ],
            [
                5.1,
                5.1,
                5.1,
                5.8
            ]
        ],
        "21.9": [
            [
                7.3,
                7.3,
                7.3
            ],
            [
                5.1,
                5.1,
                5.1,
                6.6
            ]
        ],
        "25.5": [
            [
                5.1,
                5.8,
                7.3,
                7.3
            ],
            [
                5.1,
                5.1,
                5.1,
                5.1,
                5.1
            ]
        ],
        "26.2": [
            [
                5.1,
                6.6,
                7.3,
                7.3
            ],
            [
                5.1,
                5.1,
                5.1,
                5.1,
                5.8
            ]
        ],
        "27.0": [
            [
                5.1,
                7.3,
                7.3,
                7.3
            ],
            [
                5.1,
                5.1,
                5.1,
                5.1,
                6.6
            ]
        ],
        "27.7": [
            [
                5.8,
                7.3,
                7.3,
                7.3
            ],
            [
                5.1,
                5.1,
                5.1,
                5.1,
                7.3
            ]
        ],
        "28.4": [
            [
                6.6,
                7.3,
                7.3,
                7.3
            ],
            [
                5.1,
                5.1,
                5.1,
                5.8,
                7.3
            ]
        ],
        "29.2": [
            [
                7.3,
                7.3,
                7.3,
                7.3
            ],
            [
                5.1,
                5.1,
                5.1,
                6.6,
                7.3
            ]
        ],
        "30.6": [
            [
                5.1,
                5.1,
                5.8,
                7.3,
                7.3
            ],
            [
                5.1,
                5.1,
                5.1,
                5.1,
                5.1,
                5.1
            ]
        ],
        "31.3": [
            [
                5.1,
                5.1,
                6.6,
                7.3,
                7.3
            ],
            [
                5.1,
                5.1,
                5.1,
                5.1,
                5.1,
                5.8
            ]
        ],
        "32.1": [
            [
                5.1,
                5.1,
                7.3,
                7.3,
                7.3
            ],
            [
                5.1,
                5.1,
                5.1,
                5.1,
                5.1,
                6.6
            ]
        ],
        "32.8": [
            [
                5.1,
                5.8,
                7.3,
                7.3,
                7.3
            ],
            [
                5.1,
                5.1,
                5.1,
                5.1,
                5.1,
                7.3
            ]
        ],
        "33.5": [
            [
                5.1,
                6.6,
                7.3,
                7.3,
                7.3
            ],
            [
                5.1,
                5.1,
                5.1,
                5.1,
                5.8,
                7.3
            ]
        ],
        "34.3": [
            [
                5.1,
                7.3,
                7.3,
                7.3,
                7.3
            ],
            [
                5.1,
                5.1,
                5.1,
                5.1,
                6.6,
                7.3
            ]
        ],
        "35.0": [
            [
                5.8,
                7.3,
                7.3,
                7.3,
                7.3
            ],
            [
                5.1,
                5.1,
                5.1,
                5.1,
                7.3,
                7.3
            ]
        ],
        "35.7": [
            [
                6.6,
                7.3,
                7.3,
                7.3,
                7.3
            ],
            [
                5.1,
                5.1,
                5.1,
                5.8,
                7.3,
                7.3
            ]
        ],
        "ov": [
            "20.4",
            "21.1",
            "21.9",
            "25.5",
            "26.2",
            "27.0",
            "27.7",
            "28.4",
            "29.2",
            "30.6",
            "31.3",
            "32.1",
            "32.8",
            "33.5",
            "34.3",
            "35.0",
            "35.7"
        ]
    },
    "攻撃パーセンテージ": {
        "16.3": [
            [
                4.7,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                4.1
            ]
        ],
        "16.9": [
            [
                5.3,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                4.7
            ]
        ],
        "17.5": [
            [
                5.8,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                5.3
            ]
        ],
        "20.4": [
            [
                4.1,
                4.7,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                4.1,
                4.1
            ]
        ],
        "21.0": [
            [
                4.1,
                5.3,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                4.1,
                4.7
            ]
        ],
        "21.6": [
            [
                4.1,
                5.8,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                4.1,
                5.3
            ]
        ],
        "22.2": [
            [
                4.7,
                5.8,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                4.1,
                5.8
            ]
        ],
        "22.7": [
            [
                5.3,
                5.8,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                4.7,
                5.8
            ]
        ],
        "23.3": [
            [
                5.8,
                5.8,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                5.3,
                5.8
            ]
        ],
        "24.5": [
            [
                4.1,
                4.1,
                4.7,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                4.1,
                4.1,
                4.1
            ]
        ],
        "25.1": [
            [
                4.1,
                4.1,
                5.3,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                4.1,
                4.1,
                4.7
            ]
        ],
        "25.7": [
            [
                4.1,
                4.1,
                5.8,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                4.1,
                4.1,
                5.3
            ]
        ],
        "26.2": [
            [
                4.1,
                4.7,
                5.8,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                4.1,
                4.1,
                5.8
            ]
        ],
        "26.8": [
            [
                4.1,
                5.3,
                5.8,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                4.1,
                4.7,
                5.8
            ]
        ],
        "27.4": [
            [
                4.1,
                5.8,
                5.8,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                4.1,
                5.3,
                5.8
            ]
        ],
        "25.6": [
            [
                4.7,
                4.7,
                4.7,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                4.1,
                4.7,
                4.7
            ]
        ],
        "28.0": [
            [
                4.7,
                5.8,
                5.8,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                4.1,
                5.8,
                5.8
            ]
        ],
        "28.6": [
            [
                5.3,
                5.8,
                5.8,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                4.7,
                5.8,
                5.8
            ]
        ],
        "29.2": [
            [
                5.8,
                5.8,
                5.8,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                5.3,
                5.8,
                5.8
            ]
        ],
        "ov": [
            "16.3",
            "16.9",
            "17.5",
            "20.4",
            "21.0",
            "21.6",
            "22.2",
            "22.7",
            "23.3",
            "24.5",
            "25.1",
            "25.7",
            "26.2",
            "26.8",
            "27.4",
            "25.6",
            "28.0",
            "28.6",
            "29.2"
        ]
    },
    "HPパーセンテージ": {
        "16.3": [
            [
                4.7,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                4.1
            ]
        ],
        "16.9": [
            [
                5.3,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                4.7
            ]
        ],
        "17.5": [
            [
                5.8,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                5.3
            ]
        ],
        "20.4": [
            [
                4.1,
                4.7,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                4.1,
                4.1
            ]
        ],
        "21.0": [
            [
                4.1,
                5.3,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                4.1,
                4.7
            ]
        ],
        "21.6": [
            [
                4.1,
                5.8,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                4.1,
                5.3
            ]
        ],
        "22.2": [
            [
                4.7,
                5.8,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                4.1,
                5.8
            ]
        ],
        "22.7": [
            [
                5.3,
                5.8,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                4.7,
                5.8
            ]
        ],
        "23.3": [
            [
                5.8,
                5.8,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                5.3,
                5.8
            ]
        ],
        "24.5": [
            [
                4.1,
                4.1,
                4.7,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                4.1,
                4.1,
                4.1
            ]
        ],
        "25.1": [
            [
                4.1,
                4.1,
                5.3,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                4.1,
                4.1,
                4.7
            ]
        ],
        "25.7": [
            [
                4.1,
                4.1,
                5.8,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                4.1,
                4.1,
                5.3
            ]
        ],
        "26.2": [
            [
                4.1,
                4.7,
                5.8,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                4.1,
                4.1,
                5.8
            ]
        ],
        "26.8": [
            [
                4.1,
                5.3,
                5.8,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                4.1,
                4.7,
                5.8
            ]
        ],
        "27.4": [
            [
                4.1,
                5.8,
                5.8,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                4.1,
                5.3,
                5.8
            ]
        ],
        "25.6": [
            [
                4.7,
                4.7,
                4.7,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                4.1,
                4.7,
                4.7
            ]
        ],
        "28.0": [
            [
                4.7,
                5.8,
                5.8,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                4.1,
                5.8,
                5.8
            ]
        ],
        "28.6": [
            [
                5.3,
                5.8,
                5.8,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                4.7,
                5.8,
                5.8
            ]
        ],
        "29.2": [
            [
                5.8,
                5.8,
                5.8,
                5.8,
                5.8
            ],
            [
                4.1,
                4.1,
                4.1,
                5.3,
                5.8,
                5.8
            ]
        ],
        "ov": [
            "16.3",
            "16.9",
            "17.5",
            "20.4",
            "21.0",
            "21.6",
            "22.2",
            "22.7",
            "23.3",
            "24.5",
            "25.1",
            "25.7",
            "26.2",
            "26.8",
            "27.4",
            "25.6",
            "28.0",
            "28.6",
            "29.2"
        ]
    },
    "HP": {
        "837": [
            [
                239,
                299,
                299
            ],
            [
                209,
                209,
                209,
                209
            ]
        ],
        "866": [
            [
                269,
                299,
                299
            ],
            [
                209,
                209,
                209,
                239
            ]
        ],
        "896": [
            [
                299,
                299,
                299
            ],
            [
                209,
                209,
                209,
                269
            ]
        ],
        "1046": [
            [
                209,
                239,
                299,
                299
            ],
            [
                209,
                209,
                209,
                209,
                209
            ]
        ],
        "1076": [
            [
                209,
                269,
                299,
                299
            ],
            [
                209,
                209,
                209,
                209,
                239
            ]
        ],
        "1105": [
            [
                209,
                299,
                299,
                299
            ],
            [
                209,
                209,
                209,
                209,
                269
            ]
        ],
        "1135": [
            [
                239,
                299,
                299,
                299
            ],
            [
                209,
                209,
                209,
                209,
                299
            ]
        ],
        "1165": [
            [
                269,
                299,
                299,
                299
            ],
            [
                209,
                209,
                209,
                239,
                299
            ]
        ],
        "1195": [
            [
                299,
                299,
                299,
                299
            ],
            [
                209,
                209,
                209,
                269,
                299
            ]
        ],
        "1255": [
            [
                209,
                209,
                239,
                299,
                299
            ],
            [
                209,
                209,
                209,
                209,
                209,
                209
            ]
        ],
        "1285": [
            [
                209,
                209,
                269,
                299,
                299
            ],
            [
                209,
                209,
                209,
                209,
                209,
                239
            ]
        ],
        "1315": [
            [
                209,
                209,
                299,
                299,
                299
            ],
            [
                209,
                209,
                209,
                209,
                209,
                269
            ]
        ],
        "1344": [
            [
                209,
                239,
                299,
                299,
                299
            ],
            [
                209,
                209,
                209,
                209,
                209,
                299
            ]
        ],
        "1374": [
            [
                209,
                269,
                299,
                299,
                299
            ],
            [
                209,
                209,
                209,
                209,
                239,
                299
            ]
        ],
        "1404": [
            [
                209,
                299,
                299,
                299,
                299
            ],
            [
                209,
                209,
                209,
                209,
                269,
                299
            ]
        ],
        "1434": [
            [
                239,
                299,
                299,
                299,
                299
            ],
            [
                209,
                209,
                209,
                209,
                299,
                299
            ]
        ],
        "1464": [
            [
                269,
                299,
                299,
                299,
                299
            ],
            [
                209,
                209,
                209,
                239,
                299,
                299
            ]
        ],
        "1494": [
            [
                299,
                299,
                299,
                299,
                299
            ],
            [
                209,
                209,
                209,
                269,
                299,
                299
            ]
        ],
        "ov": [
            "837",
            "866",
            "896",
            "1046",
            "1076",
            "1105",
            "1135",
            "1165",
            "1195",
            "1255",
            "1285",
            "1315",
            "1344",
            "1374",
            "1404",
            "1434",
            "1464",
            "1494"
        ]
    },
    "攻撃力": {
        "54": [
            [
                16,
                19,
                19
            ],
            [
                14,
                14,
                14,
                14
            ]
        ],
        "56": [
            [
                18,
                19,
                19
            ],
            [
                14,
                14,
                14,
                16
            ]
        ],
        "58": [
            [
                19,
                19,
                19
            ],
            [
                14,
                14,
                14,
                18
            ]
        ],
        "68": [
            [
                14,
                16,
                19,
                19
            ],
            [
                14,
                14,
                14,
                14,
                14
            ]
        ],
        "70": [
            [
                14,
                18,
                19,
                19
            ],
            [
                14,
                14,
                14,
                14,
                16
            ]
        ],
        "72": [
            [
                14,
                19,
                19,
                19
            ],
            [
                14,
                14,
                14,
                14,
                18
            ]
        ],
        "74": [
            [
                16,
                19,
                19,
                19
            ],
            [
                14,
                14,
                14,
                14,
                19
            ]
        ],
        "76": [
            [
                18,
                19,
                19,
                19
            ],
            [
                14,
                14,
                14,
                16,
                19
            ]
        ],
        "78": [
            [
                19,
                19,
                19,
                19
            ],
            [
                14,
                14,
                14,
                18,
                19
            ]
        ],
        "82": [
            [
                14,
                14,
                16,
                19,
                19
            ],
            [
                14,
                14,
                14,
                14,
                14,
                14
            ]
        ],
        "84": [
            [
                14,
                14,
                18,
                19,
                19
            ],
            [
                14,
                14,
                14,
                14,
                14,
                16
            ]
        ],
        "86": [
            [
                14,
                14,
                19,
                19,
                19
            ],
            [
                14,
                14,
                14,
                14,
                14,
                18
            ]
        ],
        "88": [
            [
                14,
                16,
                19,
                19,
                19
            ],
            [
                14,
                14,
                14,
                14,
                14,
                19
            ]
        ],
        "89": [
            [
                14,
                18,
                19,
                19,
                19
            ],
            [
                14,
                14,
                14,
                14,
                16,
                19
            ]
        ],
        "91": [
            [
                14,
                19,
                19,
                19,
                19
            ],
            [
                14,
                14,
                14,
                14,
                18,
                19
            ]
        ],
        "93": [
            [
                16,
                19,
                19,
                19,
                19
            ],
            [
                14,
                14,
                14,
                14,
                19,
                19
            ]
        ],
        "95": [
            [
                18,
                19,
                19,
                19,
                19
            ],
            [
                14,
                14,
                14,
                16,
                19,
                19
            ]
        ],
        "97": [
            [
                19,
                19,
                19,
                19,
                19
            ],
            [
                14,
                14,
                14,
                18,
                19,
                19
            ]
        ],
        "ov": [
            "54",
            "56",
            "58",
            "68",
            "70",
            "72",
            "74",
            "76",
            "78",
            "82",
            "84",
            "86",
            "88",
            "89",
            "91",
            "93",
            "95",
            "97"
        ]
    },
    "防御力": {
        "65": [
            [
                19,
                23,
                23
            ],
            [
                16,
                16,
                16,
                16
            ]
        ],
        "67": [
            [
                21,
                23,
                23
            ],
            [
                16,
                16,
                16,
                19
            ]
        ],
        "69": [
            [
                23,
                23,
                23
            ],
            [
                16,
                16,
                16,
                21
            ]
        ],
        "81": [
            [
                16,
                19,
                23,
                23
            ],
            [
                16,
                16,
                16,
                16,
                16
            ]
        ],
        "83": [
            [
                16,
                21,
                23,
                23
            ],
            [
                16,
                16,
                16,
                16,
                19
            ]
        ],
        "86": [
            [
                16,
                23,
                23,
                23
            ],
            [
                16,
                16,
                16,
                16,
                21
            ]
        ],
        "88": [
            [
                19,
                23,
                23,
                23
            ],
            [
                16,
                16,
                16,
                16,
                23
            ]
        ],
        "90": [
            [
                21,
                23,
                23,
                23
            ],
            [
                16,
                16,
                16,
                19,
                23
            ]
        ],
        "93": [
            [
                23,
                23,
                23,
                23
            ],
            [
                16,
                16,
                16,
                21,
                23
            ]
        ],
        "97": [
            [
                16,
                16,
                19,
                23,
                23
            ],
            [
                16,
                16,
                16,
                16,
                16,
                16
            ]
        ],
        "100": [
            [
                16,
                16,
                21,
                23,
                23
            ],
            [
                16,
                16,
                16,
                16,
                16,
                19
            ]
        ],
        "102": [
            [
                16,
                16,
                23,
                23,
                23
            ],
            [
                16,
                16,
                16,
                16,
                16,
                21
            ]
        ],
        "104": [
            [
                16,
                19,
                23,
                23,
                23
            ],
            [
                16,
                16,
                16,
                16,
                16,
                23
            ]
        ],
        "106": [
            [
                16,
                21,
                23,
                23,
                23
            ],
            [
                16,
                16,
                16,
                16,
                19,
                23
            ]
        ],
        "109": [
            [
                16,
                23,
                23,
                23,
                23
            ],
            [
                16,
                16,
                16,
                16,
                21,
                23
            ]
        ],
        "111": [
            [
                19,
                23,
                23,
                23,
                23
            ],
            [
                16,
                16,
                16,
                16,
                23,
                23
            ]
        ],
        "113": [
            [
                21,
                23,
                23,
                23,
                23
            ],
            [
                16,
                16,
                16,
                19,
                23,
                23
            ]
        ],
        "116": [
            [
                23,
                23,
                23,
                23,
                23
            ],
            [
                16,
                16,
                16,
                21,
                23,
                23
            ]
        ],
        "ov": [
            "65",
            "67",
            "69",
            "81",
            "83",
            "86",
            "88",
            "90",
            "93",
            "97",
            "100",
            "102",
            "104",
            "106",
            "109",
            "111",
            "113",
            "116"
        ]
    },
    "元素熟知": {
        "65": [
            [
                19,
                23,
                23
            ],
            [
                16,
                16,
                16,
                16
            ]
        ],
        "68": [
            [
                21,
                23,
                23
            ],
            [
                16,
                16,
                16,
                19
            ]
        ],
        "70": [
            [
                23,
                23,
                23
            ],
            [
                16,
                16,
                16,
                21
            ]
        ],
        "82": [
            [
                16,
                19,
                23,
                23
            ],
            [
                16,
                16,
                16,
                16,
                16
            ]
        ],
        "84": [
            [
                16,
                21,
                23,
                23
            ],
            [
                16,
                16,
                16,
                16,
                19
            ]
        ],
        "86": [
            [
                16,
                23,
                23,
                23
            ],
            [
                16,
                16,
                16,
                16,
                21
            ]
        ],
        "89": [
            [
                19,
                23,
                23,
                23
            ],
            [
                16,
                16,
                16,
                16,
                23
            ]
        ],
        "91": [
            [
                21,
                23,
                23,
                23
            ],
            [
                16,
                16,
                16,
                19,
                23
            ]
        ],
        "93": [
            [
                23,
                23,
                23,
                23
            ],
            [
                16,
                16,
                16,
                21,
                23
            ]
        ],
        "98": [
            [
                16,
                16,
                19,
                23,
                23
            ],
            [
                16,
                16,
                16,
                16,
                16,
                16
            ]
        ],
        "100": [
            [
                16,
                16,
                21,
                23,
                23
            ],
            [
                16,
                16,
                16,
                16,
                16,
                19
            ]
        ],
        "103": [
            [
                16,
                16,
                23,
                23,
                23
            ],
            [
                16,
                16,
                16,
                16,
                16,
                21
            ]
        ],
        "105": [
            [
                16,
                19,
                23,
                23,
                23
            ],
            [
                16,
                16,
                16,
                16,
                16,
                23
            ]
        ],
        "107": [
            [
                16,
                21,
                23,
                23,
                23
            ],
            [
                16,
                16,
                16,
                16,
                19,
                23
            ]
        ],
        "110": [
            [
                16,
                23,
                23,
                23,
                23
            ],
            [
                16,
                16,
                16,
                16,
                21,
                23
            ]
        ],
        "112": [
            [
                19,
                23,
                23,
                23,
                23
            ],
            [
                16,
                16,
                16,
                16,
                23,
                23
            ]
        ],
        "114": [
            [
                21,
                23,
                23,
                23,
                23
            ],
            [
                16,
                16,
                16,
                19,
                23,
                23
            ]
        ],
        "117": [
            [
                23,
                23,
                23,
                23,
                23
            ],
            [
                16,
                16,
                16,
                21,
                23,
                23
            ]
        ],
        "ov": [
            "65",
            "68",
            "70",
            "82",
            "84",
            "86",
            "89",
            "91",
            "93",
            "98",
            "100",
            "103",
            "105",
            "107",
            "110",
            "112",
            "114",
            "117"
        ]
    }
}"""

def ArtifactSubOption():
    return """{
    "会心ダメージ": {
        "5.4": [
            5.4
        ],
        "6.2": [
            6.2
        ],
        "7.0": [
            7.0
        ],
        "7.8": [
            7.8
        ],
        "10.9": [
            5.4,
            5.4
        ],
        "11.7": [
            5.4,
            6.2
        ],
        "12.4": [
            5.4,
            7.0
        ],
        "13.2": [
            5.4,
            7.8
        ],
        "14.0": [
            6.2,
            7.8
        ],
        "14.8": [
            7.0,
            7.8
        ],
        "15.5": [
            7.8,
            7.8
        ],
        "16.3": [
            5.4,
            5.4,
            5.4
        ],
        "17.1": [
            5.4,
            5.4,
            6.2
        ],
        "17.9": [
            5.4,
            5.4,
            7.0
        ],
        "18.7": [
            5.4,
            5.4,
            7.8
        ],
        "19.4": [
            5.4,
            6.2,
            7.8
        ],
        "20.2": [
            5.4,
            7.0,
            7.8
        ],
        "21.0": [
            5.4,
            7.8,
            7.8
        ],
        "21.8": [
            5.4,
            5.4,
            5.4,
            5.4
        ],
        "22.5": [
            5.4,
            5.4,
            5.4,
            6.2
        ],
        "23.3": [
            5.4,
            5.4,
            5.4,
            7.0
        ],
        "24.1": [
            5.4,
            5.4,
            5.4,
            7.8
        ],
        "24.9": [
            5.4,
            5.4,
            6.2,
            7.8
        ],
        "25.6": [
            5.4,
            5.4,
            7.0,
            7.8
        ],
        "26.4": [
            5.4,
            5.4,
            7.8,
            7.8
        ],
        "25.7": [
            5.4,
            6.2,
            6.2,
            7.8
        ],
        "27.2": [
            5.4,
            5.4,
            5.4,
            5.4,
            5.4
        ],
        "28.0": [
            5.4,
            5.4,
            5.4,
            5.4,
            6.2
        ],
        "28.8": [
            5.4,
            5.4,
            5.4,
            5.4,
            7.0
        ],
        "28.7": [
            7.0,
            7.0,
            7.0,
            7.8
        ],
        "29.5": [
            5.4,
            5.4,
            5.4,
            5.4,
            7.8
        ],
        "30.3": [
            5.4,
            5.4,
            5.4,
            6.2,
            7.8
        ],
        "31.1": [
            5.4,
            5.4,
            5.4,
            7.0,
            7.8
        ],
        "31.9": [
            5.4,
            5.4,
            5.4,
            7.8,
            7.8
        ],
        "32.6": [
            5.4,
            5.4,
            5.4,
            5.4,
            5.4,
            5.4
        ],
        "33.4": [
            5.4,
            5.4,
            5.4,
            5.4,
            5.4,
            6.2
        ],
        "34.2": [
            5.4,
            5.4,
            5.4,
            5.4,
            5.4,
            7.0
        ],
        "35.0": [
            5.4,
            5.4,
            5.4,
            5.4,
            5.4,
            7.8
        ],
        "35.7": [
            5.4,
            5.4,
            5.4,
            5.4,
            7.0,
            7.0
        ],
        "36.5": [
            5.4,
            5.4,
            5.4,
            5.4,
            7.0,
            7.8
        ],
        "32.7": [
            6.2,
            6.2,
            6.2,
            6.2,
            7.8
        ],
        "35.8": [
            5.4,
            5.4,
            5.4,
            5.4,
            6.2,
            7.8
        ],
        "37.3": [
            5.4,
            5.4,
            5.4,
            5.4,
            7.8,
            7.8
        ],
        "38.1": [
            5.4,
            5.4,
            5.4,
            6.2,
            7.8,
            7.8
        ],
        "38.8": [
            5.4,
            5.4,
            5.4,
            7.0,
            7.8,
            7.8
        ],
        "38.9": [
            5.4,
            5.4,
            5.4,
            7.0,
            7.8,
            7.8
        ],
        "39.6": [
            5.4,
            5.4,
            5.4,
            7.8,
            7.8,
            7.8
        ],
        "40.4": [
            5.4,
            5.4,
            6.2,
            7.8,
            7.8,
            7.8
        ],
        "41.2": [
            5.4,
            5.4,
            7.0,
            7.8,
            7.8,
            7.8
        ],
        "42.0": [
            5.4,
            5.4,
            7.8,
            7.8,
            7.8,
            7.8
        ],
        "42.7": [
            5.4,
            6.2,
            7.8,
            7.8,
            7.8,
            7.8
        ],
        "41.9": [
            5.4,
            7.0,
            7.0,
            7.0,
            7.8,
            7.8
        ],
        "43.5": [
            5.4,
            7.0,
            7.8,
            7.8,
            7.8,
            7.8
        ],
        "44.3": [
            5.4,
            7.8,
            7.8,
            7.8,
            7.8,
            7.8
        ],
        "45.1": [
            6.2,
            7.8,
            7.8,
            7.8,
            7.8,
            7.8
        ],
        "45.8": [
            7.0,
            7.8,
            7.8,
            7.8,
            7.8,
            7.8
        ],
        "46.6": [
            7.8,
            7.8,
            7.8,
            7.8,
            7.8,
            7.8
        ]
    },
    "会心率": {
        "2.7": [
            2.7
        ],
        "3.1": [
            3.1
        ],
        "3.5": [
            3.5
        ],
        "3.9": [
            3.9
        ],
        "5.4": [
            2.7,
            2.7
        ],
        "5.8": [
            2.7,
            3.1
        ],
        "6.2": [
            2.7,
            3.5
        ],
        "6.6": [
            2.7,
            3.9
        ],
        "7.0": [
            3.1,
            3.9
        ],
        "7.4": [
            3.5,
            3.9
        ],
        "7.8": [
            3.9,
            3.9
        ],
        "8.2": [
            2.7,
            2.7,
            2.7
        ],
        "8.6": [
            2.7,
            2.7,
            3.1
        ],
        "8.9": [
            2.7,
            2.7,
            3.5
        ],
        "9.3": [
            2.7,
            2.7,
            3.9
        ],
        "9.7": [
            2.7,
            3.1,
            3.9
        ],
        "10.1": [
            2.7,
            3.5,
            3.9
        ],
        "10.5": [
            2.7,
            3.9,
            3.9
        ],
        "10.9": [
            2.7,
            2.7,
            2.7,
            2.7
        ],
        "11.3": [
            2.7,
            2.7,
            2.7,
            3.1
        ],
        "11.7": [
            2.7,
            2.7,
            2.7,
            3.5
        ],
        "12.1": [
            2.7,
            2.7,
            2.7,
            3.9
        ],
        "12.4": [
            2.7,
            2.7,
            3.1,
            3.9
        ],
        "12.8": [
            2.7,
            2.7,
            3.5,
            3.9
        ],
        "13.2": [
            2.7,
            2.7,
            3.9,
            3.9
        ],
        "12.0": [
            2.7,
            3.1,
            3.1,
            3.1
        ],
        "13.6": [
            2.7,
            2.7,
            2.7,
            2.7,
            2.7
        ],
        "14.0": [
            2.7,
            2.7,
            2.7,
            2.7,
            3.1
        ],
        "14.4": [
            2.7,
            2.7,
            2.7,
            2.7,
            3.5
        ],
        "14.8": [
            2.7,
            2.7,
            2.7,
            2.7,
            3.9
        ],
        "15.2": [
            2.7,
            2.7,
            2.7,
            3.1,
            3.9
        ],
        "15.6": [
            2.7,
            2.7,
            2.7,
            3.5,
            3.9
        ],
        "15.9": [
            2.7,
            2.7,
            2.7,
            3.9,
            3.9
        ],
        "16.3": [
            2.7,
            2.7,
            2.7,
            2.7,
            2.7,
            2.7
        ],
        "16.7": [
            2.7,
            2.7,
            2.7,
            2.7,
            2.7,
            3.1
        ],
        "15.5": [
            2.7,
            2.7,
            3.1,
            3.1,
            3.9
        ],
        "17.1": [
            2.7,
            2.7,
            2.7,
            2.7,
            2.7,
            3.5
        ],
        "17.5": [
            2.7,
            2.7,
            2.7,
            2.7,
            2.7,
            3.9
        ],
        "17.9": [
            2.7,
            2.7,
            2.7,
            2.7,
            3.1,
            3.9
        ],
        "18.3": [
            2.7,
            2.7,
            2.7,
            2.7,
            3.5,
            3.9
        ],
        "18.7": [
            2.7,
            2.7,
            2.7,
            2.7,
            3.9,
            3.9
        ],
        "19.1": [
            2.7,
            2.7,
            2.7,
            3.1,
            3.9,
            3.9
        ],
        "19.5": [
            3.9,
            3.9,
            3.9,
            3.9,
            3.9
        ],
        "19.4": [
            2.7,
            2.7,
            2.7,
            3.5,
            3.9,
            3.9
        ],
        "19.8": [
            2.7,
            2.7,
            2.7,
            3.9,
            3.9,
            3.9
        ],
        "20.2": [
            2.7,
            2.7,
            3.1,
            3.9,
            3.9,
            3.9
        ],
        "20.6": [
            2.7,
            2.7,
            3.5,
            3.9,
            3.9,
            3.9
        ],
        "19.0": [
            2.7,
            2.7,
            2.7,
            3.1,
            3.9,
            3.9
        ],
        "21.0": [
            2.7,
            2.7,
            3.9,
            3.9,
            3.9,
            3.9
        ],
        "21.4": [
            2.7,
            3.1,
            3.9,
            3.9,
            3.9,
            3.9
        ],
        "21.8": [
            2.7,
            3.5,
            3.9,
            3.9,
            3.9,
            3.9
        ],
        "22.2": [
            2.7,
            3.9,
            3.9,
            3.9,
            3.9,
            3.9
        ],
        "22.6": [
            3.1,
            3.9,
            3.9,
            3.9,
            3.9,
            3.9
        ],
        "23.0": [
            3.5,
            3.9,
            3.9,
            3.9,
            3.9,
            3.9
        ],
        "23.3": [
            3.9,
            3.9,
            3.9,
            3.9,
            3.9,
            3.9
        ]
    },
    "元素チャージ効率": {
        "4.5": [
            4.5
        ],
        "5.2": [
            5.2
        ],
        "5.8": [
            5.8
        ],
        "6.5": [
            6.5
        ],
        "9.1": [
            4.5,
            4.5
        ],
        "9.7": [
            4.5,
            5.2
        ],
        "10.4": [
            4.5,
            5.8
        ],
        "11.0": [
            4.5,
            6.5
        ],
        "11.7": [
            5.2,
            6.5
        ],
        "12.3": [
            5.8,
            6.5
        ],
        "13.0": [
            6.5,
            6.5
        ],
        "13.6": [
            4.5,
            4.5,
            4.5
        ],
        "14.2": [
            4.5,
            4.5,
            5.2
        ],
        "14.9": [
            4.5,
            4.5,
            5.8
        ],
        "15.5": [
            4.5,
            4.5,
            6.5
        ],
        "16.2": [
            4.5,
            5.2,
            6.5
        ],
        "16.8": [
            4.5,
            5.8,
            6.5
        ],
        "17.5": [
            4.5,
            6.5,
            6.5
        ],
        "18.1": [
            4.5,
            4.5,
            4.5,
            4.5
        ],
        "18.8": [
            4.5,
            4.5,
            4.5,
            5.2
        ],
        "19.4": [
            4.5,
            4.5,
            4.5,
            5.8
        ],
        "20.1": [
            4.5,
            4.5,
            4.5,
            6.5
        ],
        "20.7": [
            4.5,
            4.5,
            5.2,
            6.5
        ],
        "21.4": [
            4.5,
            4.5,
            5.8,
            6.5
        ],
        "22.0": [
            4.5,
            4.5,
            6.5,
            6.5
        ],
        "22.7": [
            4.5,
            4.5,
            4.5,
            4.5,
            4.5
        ],
        "23.3": [
            4.5,
            4.5,
            4.5,
            4.5,
            5.2
        ],
        "24.0": [
            4.5,
            4.5,
            4.5,
            4.5,
            5.8
        ],
        "24.6": [
            4.5,
            4.5,
            4.5,
            4.5,
            6.5
        ],
        "25.3": [
            4.5,
            4.5,
            4.5,
            5.2,
            6.5
        ],
        "25.9": [
            4.5,
            4.5,
            4.5,
            5.8,
            6.5
        ],
        "26.6": [
            4.5,
            4.5,
            4.5,
            6.5,
            6.5
        ],
        "26.5": [
            4.5,
            5.2,
            5.2,
            5.8,
            5.8
        ],
        "27.2": [
            4.5,
            4.5,
            4.5,
            4.5,
            4.5,
            4.5
        ],
        "27.9": [
            4.5,
            4.5,
            5.8,
            6.5,
            6.5
        ],
        "28.5": [
            4.5,
            4.5,
            4.5,
            4.5,
            4.5,
            5.8
        ],
        "29.2": [
            4.5,
            5.2,
            6.5,
            6.5,
            6.5
        ],
        "27.8": [
            4.5,
            4.5,
            4.5,
            4.5,
            4.5,
            5.2
        ],
        "29.8": [
            4.5,
            4.5,
            4.5,
            4.5,
            5.2,
            6.5
        ],
        "30.5": [
            4.5,
            6.5,
            6.5,
            6.5,
            6.5
        ],
        "31.1": [
            4.5,
            4.5,
            4.5,
            4.5,
            6.5,
            6.5
        ],
        "30.4": [
            4.5,
            4.5,
            4.5,
            4.5,
            5.8,
            6.5
        ],
        "31.8": [
            5.8,
            6.5,
            6.5,
            6.5,
            6.5
        ],
        "32.4": [
            4.5,
            4.5,
            4.5,
            5.8,
            6.5,
            6.5
        ],
        "29.1": [
            4.5,
            4.5,
            4.5,
            4.5,
            4.5,
            6.5
        ],
        "31.7": [
            4.5,
            4.5,
            4.5,
            5.2,
            6.5,
            6.5
        ],
        "33.0": [
            4.5,
            4.5,
            4.5,
            6.5,
            6.5,
            6.5
        ],
        "33.7": [
            4.5,
            4.5,
            5.2,
            6.5,
            6.5,
            6.5
        ],
        "34.3": [
            4.5,
            4.5,
            5.8,
            6.5,
            6.5,
            6.5
        ],
        "35.0": [
            4.5,
            4.5,
            6.5,
            6.5,
            6.5,
            6.5
        ],
        "35.6": [
            4.5,
            5.2,
            6.5,
            6.5,
            6.5,
            6.5
        ],
        "36.3": [
            4.5,
            5.8,
            6.5,
            6.5,
            6.5,
            6.5
        ],
        "36.9": [
            4.5,
            6.5,
            6.5,
            6.5,
            6.5,
            6.5
        ],
        "37.6": [
            5.2,
            6.5,
            6.5,
            6.5,
            6.5,
            6.5
        ],
        "38.2": [
            5.8,
            6.5,
            6.5,
            6.5,
            6.5,
            6.5
        ],
        "38.9": [
            6.5,
            6.5,
            6.5,
            6.5,
            6.5,
            6.5
        ]
    },
    "HPパーセンテージ": {
        "4.1": [
            4.1
        ],
        "4.7": [
            4.7
        ],
        "5.3": [
            5.3
        ],
        "5.8": [
            5.8
        ],
        "8.2": [
            4.1,
            4.1
        ],
        "8.7": [
            4.1,
            4.7
        ],
        "9.3": [
            4.1,
            5.3
        ],
        "9.9": [
            4.1,
            5.8
        ],
        "10.5": [
            4.7,
            5.8
        ],
        "11.1": [
            5.3,
            5.8
        ],
        "11.7": [
            5.8,
            5.8
        ],
        "12.2": [
            4.1,
            4.1,
            4.1
        ],
        "12.8": [
            4.1,
            4.1,
            4.7
        ],
        "13.4": [
            4.1,
            4.1,
            5.3
        ],
        "14.0": [
            4.1,
            4.1,
            5.8
        ],
        "14.6": [
            4.1,
            4.7,
            5.8
        ],
        "15.2": [
            4.1,
            5.3,
            5.8
        ],
        "15.7": [
            4.1,
            5.8,
            5.8
        ],
        "16.3": [
            4.1,
            4.1,
            4.1,
            4.1
        ],
        "15.8": [
            5.3,
            5.3,
            5.3
        ],
        "16.9": [
            4.1,
            4.1,
            4.1,
            4.7
        ],
        "17.5": [
            4.1,
            4.1,
            4.1,
            5.3
        ],
        "18.1": [
            4.1,
            4.1,
            4.1,
            5.8
        ],
        "18.7": [
            4.1,
            4.1,
            4.7,
            5.8
        ],
        "19.2": [
            4.1,
            4.1,
            5.3,
            5.8
        ],
        "19.8": [
            4.1,
            4.1,
            5.8,
            5.8
        ],
        "20.4": [
            4.1,
            4.1,
            4.1,
            4.1,
            4.1
        ],
        "21.0": [
            4.1,
            4.1,
            4.1,
            4.1,
            4.7
        ],
        "21.6": [
            4.1,
            4.1,
            4.1,
            4.1,
            5.3
        ],
        "18.6": [
            4.7,
            4.7,
            4.7,
            4.7
        ],
        "22.2": [
            4.1,
            4.1,
            4.1,
            4.1,
            5.8
        ],
        "22.7": [
            4.1,
            4.1,
            4.1,
            4.7,
            5.8
        ],
        "23.3": [
            4.1,
            4.1,
            4.1,
            5.3,
            5.8
        ],
        "23.9": [
            4.1,
            4.1,
            4.1,
            5.8,
            5.8
        ],
        "22.1": [
            4.1,
            4.1,
            4.7,
            4.7,
            4.7
        ],
        "24.5": [
            4.1,
            4.1,
            4.1,
            4.1,
            4.1,
            4.1
        ],
        "25.1": [
            4.1,
            4.1,
            4.1,
            4.1,
            4.1,
            4.7
        ],
        "25.7": [
            4.1,
            4.1,
            4.1,
            4.1,
            4.1,
            5.3
        ],
        "26.2": [
            4.1,
            4.1,
            4.1,
            4.1,
            4.1,
            5.8
        ],
        "26.8": [
            4.1,
            4.1,
            4.1,
            4.1,
            4.7,
            5.8
        ],
        "27.4": [
            4.1,
            4.1,
            4.1,
            4.1,
            5.3,
            5.8
        ],
        "25.6": [
            4.1,
            4.1,
            4.1,
            4.1,
            4.7,
            4.7
        ],
        "28.0": [
            4.1,
            4.1,
            4.1,
            4.1,
            5.8,
            5.8
        ],
        "26.3": [
            5.3,
            5.3,
            5.3,
            5.3,
            5.3
        ],
        "28.6": [
            4.1,
            4.1,
            4.1,
            4.7,
            5.8,
            5.8
        ],
        "29.2": [
            4.1,
            4.1,
            4.1,
            5.3,
            5.8,
            5.8
        ],
        "29.7": [
            4.1,
            4.1,
            4.1,
            5.8,
            5.8,
            5.8
        ],
        "29.1": [
            4.1,
            4.1,
            4.7,
            4.7,
            5.8,
            5.8
        ],
        "30.3": [
            4.1,
            4.1,
            4.7,
            5.8,
            5.8,
            5.8
        ],
        "30.9": [
            4.1,
            4.1,
            5.3,
            5.8,
            5.8,
            5.8
        ],
        "31.5": [
            4.1,
            4.1,
            5.8,
            5.8,
            5.8,
            5.8
        ],
        "32.1": [
            4.1,
            4.7,
            5.8,
            5.8,
            5.8,
            5.8
        ],
        "32.7": [
            4.1,
            5.3,
            5.8,
            5.8,
            5.8,
            5.8
        ],
        "33.2": [
            4.1,
            5.8,
            5.8,
            5.8,
            5.8,
            5.8
        ],
        "28.5": [
            4.1,
            4.7,
            4.7,
            4.7,
            4.7,
            5.8
        ],
        "32.6": [
            4.7,
            4.7,
            5.8,
            5.8,
            5.8,
            5.8
        ],
        "33.8": [
            4.7,
            5.8,
            5.8,
            5.8,
            5.8,
            5.8
        ],
        "34.4": [
            5.3,
            5.8,
            5.8,
            5.8,
            5.8,
            5.8
        ],
        "35.0": [
            5.8,
            5.8,
            5.8,
            5.8,
            5.8,
            5.8
        ]
    },
    "防御パーセンテージ": {
        "5.1": [
            5.1
        ],
        "5.8": [
            5.8
        ],
        "6.6": [
            6.6
        ],
        "7.3": [
            7.3
        ],
        "10.2": [
            5.1,
            5.1
        ],
        "10.9": [
            5.1,
            5.8
        ],
        "11.7": [
            5.1,
            6.6
        ],
        "12.4": [
            5.1,
            7.3
        ],
        "13.1": [
            5.8,
            7.3
        ],
        "13.9": [
            6.6,
            7.3
        ],
        "14.6": [
            7.3,
            7.3
        ],
        "15.3": [
            5.1,
            5.1,
            5.1
        ],
        "16.0": [
            5.1,
            5.1,
            5.8
        ],
        "16.8": [
            5.1,
            5.1,
            6.6
        ],
        "17.5": [
            5.1,
            5.1,
            7.3
        ],
        "18.2": [
            5.1,
            5.8,
            7.3
        ],
        "19.0": [
            5.1,
            6.6,
            7.3
        ],
        "19.7": [
            5.1,
            7.3,
            7.3
        ],
        "20.4": [
            5.1,
            5.1,
            5.1,
            5.1
        ],
        "21.1": [
            5.1,
            5.1,
            5.1,
            5.8
        ],
        "21.9": [
            5.1,
            5.1,
            5.1,
            6.6
        ],
        "22.6": [
            5.1,
            5.1,
            5.1,
            7.3
        ],
        "23.3": [
            5.1,
            5.1,
            5.8,
            7.3
        ],
        "24.0": [
            5.1,
            5.1,
            6.6,
            7.3
        ],
        "24.8": [
            5.1,
            5.1,
            7.3,
            7.3
        ],
        "25.5": [
            5.1,
            5.1,
            5.1,
            5.1,
            5.1
        ],
        "24.1": [
            5.1,
            5.8,
            5.8,
            7.3
        ],
        "26.2": [
            5.1,
            5.1,
            5.1,
            5.1,
            5.8
        ],
        "27.0": [
            5.1,
            5.1,
            5.1,
            5.1,
            6.6
        ],
        "27.7": [
            5.1,
            5.1,
            5.1,
            5.1,
            7.3
        ],
        "28.4": [
            5.1,
            5.1,
            5.1,
            5.8,
            7.3
        ],
        "29.2": [
            5.1,
            5.1,
            5.1,
            6.6,
            7.3
        ],
        "29.9": [
            5.1,
            5.1,
            5.1,
            7.3,
            7.3
        ],
        "30.6": [
            5.1,
            5.1,
            5.1,
            5.1,
            5.1,
            5.1
        ],
        "29.1": [
            5.1,
            5.1,
            5.8,
            6.6,
            6.6
        ],
        "31.3": [
            5.1,
            5.1,
            5.1,
            5.1,
            5.1,
            5.8
        ],
        "32.1": [
            5.1,
            5.1,
            5.1,
            5.1,
            5.1,
            6.6
        ],
        "32.8": [
            5.1,
            5.1,
            5.1,
            5.1,
            5.1,
            7.3
        ],
        "33.5": [
            5.1,
            5.1,
            5.1,
            5.1,
            5.8,
            7.3
        ],
        "34.3": [
            5.1,
            5.1,
            5.1,
            5.1,
            6.6,
            7.3
        ],
        "35.0": [
            5.1,
            5.1,
            5.1,
            5.1,
            7.3,
            7.3
        ],
        "35.7": [
            5.1,
            5.1,
            5.1,
            5.8,
            7.3,
            7.3
        ],
        "36.5": [
            7.3,
            7.3,
            7.3,
            7.3,
            7.3
        ],
        "36.4": [
            5.1,
            5.1,
            5.1,
            6.6,
            7.3,
            7.3
        ],
        "37.2": [
            5.1,
            5.1,
            5.1,
            7.3,
            7.3,
            7.3
        ],
        "37.9": [
            5.1,
            5.1,
            5.8,
            7.3,
            7.3,
            7.3
        ],
        "34.2": [
            5.1,
            5.1,
            5.1,
            5.8,
            6.6,
            6.6
        ],
        "38.6": [
            5.1,
            5.1,
            6.6,
            7.3,
            7.3,
            7.3
        ],
        "39.4": [
            5.1,
            5.1,
            7.3,
            7.3,
            7.3,
            7.3
        ],
        "40.1": [
            5.1,
            5.8,
            7.3,
            7.3,
            7.3,
            7.3
        ],
        "40.8": [
            5.1,
            6.6,
            7.3,
            7.3,
            7.3,
            7.3
        ],
        "41.6": [
            5.1,
            7.3,
            7.3,
            7.3,
            7.3,
            7.3
        ],
        "42.3": [
            5.8,
            7.3,
            7.3,
            7.3,
            7.3,
            7.3
        ],
        "43.0": [
            6.6,
            7.3,
            7.3,
            7.3,
            7.3,
            7.3
        ],
        "43.7": [
            7.3,
            7.3,
            7.3,
            7.3,
            7.3,
            7.3
        ]
    },
    "攻撃パーセンテージ": {
        "4.1": [
            4.1
        ],
        "4.7": [
            4.7
        ],
        "5.3": [
            5.3
        ],
        "5.8": [
            5.8
        ],
        "8.2": [
            4.1,
            4.1
        ],
        "8.7": [
            4.1,
            4.7
        ],
        "9.3": [
            4.1,
            5.3
        ],
        "9.9": [
            4.1,
            5.8
        ],
        "10.5": [
            4.7,
            5.8
        ],
        "11.1": [
            5.3,
            5.8
        ],
        "11.7": [
            5.8,
            5.8
        ],
        "12.2": [
            4.1,
            4.1,
            4.1
        ],
        "12.8": [
            4.1,
            4.1,
            4.7
        ],
        "13.4": [
            4.1,
            4.1,
            5.3
        ],
        "14.0": [
            4.1,
            4.1,
            5.8
        ],
        "14.6": [
            4.1,
            4.7,
            5.8
        ],
        "15.2": [
            4.1,
            5.3,
            5.8
        ],
        "15.7": [
            4.1,
            5.8,
            5.8
        ],
        "16.3": [
            4.1,
            4.1,
            4.1,
            4.1
        ],
        "15.8": [
            5.3,
            5.3,
            5.3
        ],
        "16.9": [
            4.1,
            4.1,
            4.1,
            4.7
        ],
        "17.5": [
            4.1,
            4.1,
            4.1,
            5.3
        ],
        "18.1": [
            4.1,
            4.1,
            4.1,
            5.8
        ],
        "18.7": [
            4.1,
            4.1,
            4.7,
            5.8
        ],
        "19.2": [
            4.1,
            4.1,
            5.3,
            5.8
        ],
        "19.8": [
            4.1,
            4.1,
            5.8,
            5.8
        ],
        "20.4": [
            4.1,
            4.1,
            4.1,
            4.1,
            4.1
        ],
        "21.0": [
            4.1,
            4.1,
            4.1,
            4.1,
            4.7
        ],
        "21.6": [
            4.1,
            4.1,
            4.1,
            4.1,
            5.3
        ],
        "18.6": [
            4.7,
            4.7,
            4.7,
            4.7
        ],
        "22.2": [
            4.1,
            4.1,
            4.1,
            4.1,
            5.8
        ],
        "22.7": [
            4.1,
            4.1,
            4.1,
            4.7,
            5.8
        ],
        "23.3": [
            4.1,
            4.1,
            4.1,
            5.3,
            5.8
        ],
        "23.9": [
            4.1,
            4.1,
            4.1,
            5.8,
            5.8
        ],
        "22.1": [
            4.1,
            4.1,
            4.7,
            4.7,
            4.7
        ],
        "24.5": [
            4.1,
            4.1,
            4.1,
            4.1,
            4.1,
            4.1
        ],
        "25.1": [
            4.1,
            4.1,
            4.1,
            4.1,
            4.1,
            4.7
        ],
        "25.7": [
            4.1,
            4.1,
            4.1,
            4.1,
            4.1,
            5.3
        ],
        "26.2": [
            4.1,
            4.1,
            4.1,
            4.1,
            4.1,
            5.8
        ],
        "26.8": [
            4.1,
            4.1,
            4.1,
            4.1,
            4.7,
            5.8
        ],
        "27.4": [
            4.1,
            4.1,
            4.1,
            4.1,
            5.3,
            5.8
        ],
        "25.6": [
            4.1,
            4.1,
            4.1,
            4.1,
            4.7,
            4.7
        ],
        "28.0": [
            4.1,
            4.1,
            4.1,
            4.1,
            5.8,
            5.8
        ],
        "26.3": [
            5.3,
            5.3,
            5.3,
            5.3,
            5.3
        ],
        "28.6": [
            4.1,
            4.1,
            4.1,
            4.7,
            5.8,
            5.8
        ],
        "29.2": [
            4.1,
            4.1,
            4.1,
            5.3,
            5.8,
            5.8
        ],
        "29.7": [
            4.1,
            4.1,
            4.1,
            5.8,
            5.8,
            5.8
        ],
        "29.1": [
            4.1,
            4.1,
            4.7,
            4.7,
            5.8,
            5.8
        ],
        "30.3": [
            4.1,
            4.1,
            4.7,
            5.8,
            5.8,
            5.8
        ],
        "30.9": [
            4.1,
            4.1,
            5.3,
            5.8,
            5.8,
            5.8
        ],
        "31.5": [
            4.1,
            4.1,
            5.8,
            5.8,
            5.8,
            5.8
        ],
        "32.1": [
            4.1,
            4.7,
            5.8,
            5.8,
            5.8,
            5.8
        ],
        "32.7": [
            4.1,
            5.3,
            5.8,
            5.8,
            5.8,
            5.8
        ],
        "33.2": [
            4.1,
            5.8,
            5.8,
            5.8,
            5.8,
            5.8
        ],
        "28.5": [
            4.1,
            4.7,
            4.7,
            4.7,
            4.7,
            5.8
        ],
        "32.6": [
            4.7,
            4.7,
            5.8,
            5.8,
            5.8,
            5.8
        ],
        "33.8": [
            4.7,
            5.8,
            5.8,
            5.8,
            5.8,
            5.8
        ],
        "34.4": [
            5.3,
            5.8,
            5.8,
            5.8,
            5.8,
            5.8
        ],
        "35.0": [
            5.8,
            5.8,
            5.8,
            5.8,
            5.8,
            5.8
        ]
    },
    "HP": {
        "209": [
            209
        ],
        "239": [
            239
        ],
        "269": [
            269
        ],
        "299": [
            299
        ],
        "418": [
            209,
            209
        ],
        "448": [
            209,
            239
        ],
        "478": [
            209,
            269
        ],
        "508": [
            209,
            299
        ],
        "538": [
            239,
            299
        ],
        "568": [
            269,
            299
        ],
        "598": [
            299,
            299
        ],
        "627": [
            209,
            209,
            209
        ],
        "657": [
            209,
            209,
            239
        ],
        "687": [
            209,
            209,
            269
        ],
        "717": [
            209,
            209,
            299
        ],
        "747": [
            209,
            239,
            299
        ],
        "777": [
            209,
            269,
            299
        ],
        "807": [
            209,
            299,
            299
        ],
        "837": [
            209,
            209,
            209,
            209
        ],
        "866": [
            209,
            209,
            209,
            239
        ],
        "896": [
            209,
            209,
            209,
            269
        ],
        "926": [
            209,
            209,
            209,
            299
        ],
        "956": [
            209,
            209,
            239,
            299
        ],
        "986": [
            209,
            209,
            269,
            299
        ],
        "1016": [
            209,
            209,
            299,
            299
        ],
        "1046": [
            209,
            209,
            209,
            209,
            209
        ],
        "1076": [
            209,
            209,
            209,
            209,
            239
        ],
        "1105": [
            209,
            209,
            209,
            209,
            269
        ],
        "1135": [
            209,
            209,
            209,
            209,
            299
        ],
        "1165": [
            209,
            209,
            209,
            239,
            299
        ],
        "1195": [
            209,
            209,
            209,
            269,
            299
        ],
        "1225": [
            209,
            209,
            209,
            299,
            299
        ],
        "1255": [
            209,
            209,
            209,
            209,
            209,
            209
        ],
        "1285": [
            209,
            209,
            209,
            209,
            209,
            239
        ],
        "1315": [
            209,
            209,
            209,
            209,
            209,
            269
        ],
        "1344": [
            209,
            209,
            209,
            209,
            209,
            299
        ],
        "1374": [
            209,
            209,
            209,
            209,
            239,
            299
        ],
        "1404": [
            209,
            209,
            209,
            209,
            269,
            299
        ],
        "1434": [
            209,
            209,
            209,
            209,
            299,
            299
        ],
        "1464": [
            209,
            209,
            209,
            239,
            299,
            299
        ],
        "1494": [
            209,
            209,
            209,
            269,
            299,
            299
        ],
        "1524": [
            209,
            209,
            209,
            299,
            299,
            299
        ],
        "1554": [
            209,
            209,
            239,
            299,
            299,
            299
        ],
        "1583": [
            209,
            209,
            269,
            299,
            299,
            299
        ],
        "1613": [
            209,
            209,
            299,
            299,
            299,
            299
        ],
        "1643": [
            209,
            239,
            299,
            299,
            299,
            299
        ],
        "1673": [
            209,
            269,
            299,
            299,
            299,
            299
        ],
        "1703": [
            209,
            299,
            299,
            299,
            299,
            299
        ],
        "1733": [
            239,
            299,
            299,
            299,
            299,
            299
        ],
        "1763": [
            269,
            299,
            299,
            299,
            299,
            299
        ],
        "1793": [
            299,
            299,
            299,
            299,
            299,
            299
        ]
    },
    "攻撃力": {
        "14": [
            14
        ],
        "16": [
            16
        ],
        "18": [
            18
        ],
        "19": [
            19
        ],
        "27": [
            14,
            14
        ],
        "29": [
            14,
            16
        ],
        "31": [
            14,
            18
        ],
        "33": [
            14,
            19
        ],
        "35": [
            16,
            19
        ],
        "37": [
            18,
            19
        ],
        "39": [
            19,
            19
        ],
        "41": [
            14,
            14,
            14
        ],
        "43": [
            14,
            14,
            16
        ],
        "45": [
            14,
            14,
            18
        ],
        "47": [
            14,
            14,
            19
        ],
        "49": [
            14,
            16,
            19
        ],
        "51": [
            14,
            18,
            19
        ],
        "53": [
            14,
            19,
            19
        ],
        "54": [
            14,
            14,
            14,
            14
        ],
        "56": [
            14,
            14,
            14,
            16
        ],
        "58": [
            14,
            14,
            14,
            18
        ],
        "60": [
            14,
            14,
            14,
            19
        ],
        "62": [
            14,
            14,
            16,
            19
        ],
        "64": [
            14,
            14,
            18,
            19
        ],
        "66": [
            14,
            14,
            19,
            19
        ],
        "68": [
            14,
            14,
            14,
            14,
            14
        ],
        "70": [
            14,
            14,
            14,
            14,
            16
        ],
        "72": [
            14,
            14,
            14,
            14,
            18
        ],
        "74": [
            14,
            14,
            14,
            14,
            19
        ],
        "76": [
            14,
            14,
            14,
            16,
            19
        ],
        "78": [
            14,
            14,
            14,
            18,
            19
        ],
        "80": [
            14,
            14,
            14,
            19,
            19
        ],
        "82": [
            14,
            14,
            14,
            14,
            14,
            14
        ],
        "84": [
            14,
            14,
            14,
            14,
            14,
            16
        ],
        "86": [
            14,
            14,
            14,
            14,
            14,
            18
        ],
        "88": [
            14,
            14,
            14,
            14,
            14,
            19
        ],
        "89": [
            14,
            14,
            14,
            14,
            16,
            19
        ],
        "91": [
            14,
            14,
            14,
            14,
            18,
            19
        ],
        "93": [
            14,
            14,
            14,
            14,
            19,
            19
        ],
        "95": [
            14,
            14,
            14,
            16,
            19,
            19
        ],
        "97": [
            14,
            14,
            14,
            18,
            19,
            19
        ],
        "90": [
            14,
            14,
            14,
            14,
            18,
            18
        ],
        "99": [
            14,
            14,
            14,
            19,
            19,
            19
        ],
        "101": [
            14,
            14,
            16,
            19,
            19,
            19
        ],
        "103": [
            14,
            14,
            18,
            19,
            19,
            19
        ],
        "105": [
            14,
            14,
            19,
            19,
            19,
            19
        ],
        "107": [
            14,
            16,
            19,
            19,
            19,
            19
        ],
        "109": [
            14,
            18,
            19,
            19,
            19,
            19
        ],
        "111": [
            14,
            19,
            19,
            19,
            19,
            19
        ],
        "113": [
            16,
            19,
            19,
            19,
            19,
            19
        ],
        "115": [
            18,
            19,
            19,
            19,
            19,
            19
        ],
        "117": [
            19,
            19,
            19,
            19,
            19,
            19
        ]
    },
    "防御力": {
        "16": [
            16
        ],
        "19": [
            19
        ],
        "21": [
            21
        ],
        "23": [
            23
        ],
        "32": [
            16,
            16
        ],
        "35": [
            16,
            19
        ],
        "37": [
            16,
            21
        ],
        "39": [
            16,
            23
        ],
        "42": [
            19,
            23
        ],
        "44": [
            21,
            23
        ],
        "46": [
            23,
            23
        ],
        "49": [
            16,
            16,
            16
        ],
        "51": [
            16,
            16,
            19
        ],
        "53": [
            16,
            16,
            21
        ],
        "56": [
            16,
            16,
            23
        ],
        "58": [
            16,
            19,
            23
        ],
        "60": [
            16,
            21,
            23
        ],
        "62": [
            16,
            23,
            23
        ],
        "63": [
            16,
            23,
            23
        ],
        "65": [
            16,
            16,
            16,
            16
        ],
        "67": [
            16,
            16,
            16,
            19
        ],
        "69": [
            16,
            16,
            16,
            21
        ],
        "72": [
            16,
            16,
            16,
            23
        ],
        "74": [
            16,
            16,
            19,
            23
        ],
        "76": [
            16,
            16,
            21,
            23
        ],
        "79": [
            16,
            16,
            23,
            23
        ],
        "81": [
            16,
            16,
            16,
            16,
            16
        ],
        "83": [
            16,
            16,
            16,
            16,
            19
        ],
        "86": [
            16,
            16,
            16,
            16,
            21
        ],
        "88": [
            16,
            16,
            16,
            16,
            23
        ],
        "90": [
            16,
            16,
            16,
            19,
            23
        ],
        "93": [
            16,
            16,
            16,
            21,
            23
        ],
        "95": [
            16,
            16,
            16,
            23,
            23
        ],
        "97": [
            16,
            16,
            16,
            16,
            16,
            16
        ],
        "100": [
            16,
            16,
            16,
            16,
            16,
            19
        ],
        "102": [
            16,
            16,
            16,
            16,
            16,
            21
        ],
        "104": [
            16,
            16,
            16,
            16,
            16,
            23
        ],
        "106": [
            16,
            16,
            16,
            16,
            19,
            23
        ],
        "109": [
            16,
            16,
            16,
            16,
            21,
            23
        ],
        "111": [
            16,
            16,
            16,
            16,
            23,
            23
        ],
        "113": [
            16,
            16,
            16,
            19,
            23,
            23
        ],
        "116": [
            16,
            16,
            16,
            21,
            23,
            23
        ],
        "118": [
            16,
            16,
            16,
            23,
            23,
            23
        ],
        "120": [
            16,
            16,
            19,
            23,
            23,
            23
        ],
        "123": [
            16,
            16,
            21,
            23,
            23,
            23
        ],
        "125": [
            16,
            16,
            23,
            23,
            23,
            23
        ],
        "127": [
            16,
            19,
            23,
            23,
            23,
            23
        ],
        "130": [
            16,
            21,
            23,
            23,
            23,
            23
        ],
        "132": [
            16,
            23,
            23,
            23,
            23,
            23
        ],
        "134": [
            19,
            23,
            23,
            23,
            23,
            23
        ],
        "137": [
            21,
            23,
            23,
            23,
            23,
            23
        ],
        "139": [
            23,
            23,
            23,
            23,
            23,
            23
        ]
    },
    "元素熟知": {
        "16": [
            16
        ],
        "19": [
            19
        ],
        "21": [
            21
        ],
        "23": [
            23
        ],
        "33": [
            16,
            16
        ],
        "35": [
            16,
            19
        ],
        "37": [
            16,
            21
        ],
        "40": [
            16,
            23
        ],
        "42": [
            19,
            23
        ],
        "44": [
            21,
            23
        ],
        "47": [
            23,
            23
        ],
        "49": [
            16,
            16,
            16
        ],
        "51": [
            16,
            16,
            19
        ],
        "54": [
            16,
            16,
            21
        ],
        "56": [
            16,
            16,
            23
        ],
        "58": [
            16,
            19,
            23
        ],
        "61": [
            16,
            21,
            23
        ],
        "63": [
            16,
            23,
            23
        ],
        "65": [
            16,
            16,
            16,
            16
        ],
        "68": [
            16,
            16,
            16,
            19
        ],
        "70": [
            16,
            16,
            16,
            21
        ],
        "72": [
            16,
            16,
            16,
            23
        ],
        "75": [
            16,
            16,
            19,
            23
        ],
        "77": [
            16,
            16,
            21,
            23
        ],
        "79": [
            16,
            16,
            23,
            23
        ],
        "82": [
            16,
            16,
            16,
            16,
            16
        ],
        "84": [
            16,
            16,
            16,
            16,
            19
        ],
        "86": [
            16,
            16,
            16,
            16,
            21
        ],
        "89": [
            16,
            16,
            16,
            16,
            23
        ],
        "91": [
            16,
            16,
            16,
            19,
            23
        ],
        "93": [
            16,
            16,
            16,
            21,
            23
        ],
        "96": [
            16,
            16,
            16,
            23,
            23
        ],
        "98": [
            16,
            16,
            16,
            16,
            16,
            16
        ],
        "100": [
            16,
            16,
            16,
            16,
            16,
            19
        ],
        "103": [
            16,
            16,
            16,
            16,
            16,
            21
        ],
        "105": [
            16,
            16,
            16,
            16,
            16,
            23
        ],
        "107": [
            16,
            16,
            16,
            16,
            19,
            23
        ],
        "110": [
            16,
            16,
            16,
            16,
            21,
            23
        ],
        "112": [
            16,
            16,
            16,
            16,
            23,
            23
        ],
        "114": [
            16,
            16,
            16,
            19,
            23,
            23
        ],
        "117": [
            16,
            16,
            16,
            21,
            23,
            23
        ],
        "119": [
            16,
            16,
            16,
            23,
            23,
            23
        ],
        "121": [
            16,
            16,
            19,
            23,
            23,
            23
        ],
        "124": [
            16,
            16,
            21,
            23,
            23,
            23
        ],
        "126": [
            16,
            16,
            23,
            23,
            23,
            23
        ],
        "128": [
            16,
            19,
            23,
            23,
            23,
            23
        ],
        "131": [
            16,
            21,
            23,
            23,
            23,
            23
        ],
        "133": [
            16,
            23,
            23,
            23,
            23,
            23
        ],
        "135": [
            19,
            23,
            23,
            23,
            23,
            23
        ],
        "138": [
            21,
            23,
            23,
            23,
            23,
            23
        ],
        "140": [
            23,
            23,
            23,
            23,
            23,
            23
        ]
    }
}"""

def FormatJson():
    return """{
  "uid": 0,
  "input": "",
  "Character": {
    "Name": "",
    "EN_Name": "",
    "icon": "",
    "SkillIcons" : "",
    "Const": 0,
    "Consticons": [""],
    "Level": 1,
    "Love": 1,
    "Status": {
      "HP": 1,
      "攻撃力": 1,
      "防御力": 1,
      "元素熟知": 0,
      "会心率": 5.0,
      "会心ダメージ": 50.0,
      "元素チャージ効率": 100.0
    },
    "Talent": {
      "通常": 1,
      "スキル": 1,
      "爆発": 1
    },
    "Base": {
      "HP": 1,
      "攻撃力": 1,
      "防御力": 1
    }
  },
  "Weapon": {
    "name": "",
    "Level": 1,
    "icon": "",
    "Constellations": 1,
    "rarelity": 1,
    "BaseATK": 1,
    "Sub": {
      "name": "",
      "value": 0
    }
  },
  "Score": {
    "State": "",
    "total": 0.0,
    "flower": 0.0,
    "wing": 0.0,
    "clock": 0.0,
    "cup": 0.0,
    "crown": 0.0
  },
  "Artifacts": {
    "flower": {
      "type": "",
      "icon": "",
      "Level": 1,
      "rarelity": 1,
      "main": {
        "option": "",
        "value": 0
      },
      "sub": []
    },
    "wing": {
      "type": "",
      "icon": "",
      "Level": 1,
      "rarelity": 1,
      "main": {
        "option": "",
        "value": 0
      },
      "sub": []
    },
    "clock": {
      "type": "",
      "icon": "",
      "Level": 1,
      "rarelity": 1,
      "main": {
        "option": "",
        "value": 0
      },
      "sub": []
    },
    "cup": {
      "type": "",
      "icon": "",
      "Level": 1,
      "rarelity": 1,
      "main": {
        "option": "",
        "value": 0
      },
      "sub": []
    },
    "crown": {
      "type": "",
      "icon": "",
      "Level": 1,
      "rarelity": 1,
      "main": {
        "option": "",
        "value": 0
      },
      "sub": []
    }
  },
  "元素": ""
}"""

def LocaleJa():
    return """{
    "en": {
        "20848859": "Blackcliff Slasher",
        "33330467": "Elemental Mastery",
        "37147251": "Solar Pearl",
        "43015699": "TBD",
        "54857595": "Bane of Storm and Tide",
        "83115355": "Maiden Beloved",
        "85795635": "Focus",
        "88505754": "Kaedehara Kazuha",
        "135182203": "Bane of Storm and Tide",
        "141119323": "Whispers of Wind and Flower",
        "143051931": "Xiphos' Moonlight",
        "147298547": "Wanderer's Troupe",
        "156294403": "Heart of Depth",
        "160493219": "Dark Iron Sword",
        "168956722": "Qiqi",
        "197755235": "Vortex Vanquisher",
        "212557731": "Prayers for Wisdom",
        "231836963": "Primordial Jade Cutter",
        "231911858": "Mika",
        "240385755": "Wavesplitter",
        "246984427": "Bane of Fire and Thunder",
        "262428003": "Prayers to Springtime",
        "270124867": "Protector's Virtue",
        "275622963": "Light of Foliar Incision",
        "287454963": "Prayers to the Firmament",
        "288666635": "Spotless Heart",
        "302691299": "Amber Bead",
        "303155515": "Unreturning",
        "310247243": "Kagura's Verity",
        "313300315": "Sapwood Blade",
        "334242634": "Shenhe",
        "339931171": "Press the Advantage",
        "342097547": "Cinnabar Spindle",
        "346510395": "Luxurious Sea-Lord",
        "359484419": "Tulaytullah's Remembrance",
        "368014203": "Sky-ripping Dragon Spine",
        "388272194": "Dori",
        "391273955": "Black Wing",
        "411685275": "Compound Bow",
        "426363739": "Wandering Evenstar",
        "452043283": "Lost Ballade",
        "452357939": "Moonpiercer",
        "453444347": "A Thousand Nights' Dawnsong",
        "454086795": "Key of Khaj-Nisut",
        "479076483": "Cool Steel",
        "481755219": "Blackcliff Pole",
        "486287579": "Residual Heat",
        "500612819": "The Flagstaff",
        "506630267": "Windfall",
        "514784907": "Bane of Flame and Water",
        "521221323": "Protector's Virtue",
        "540938627": "Predator",
        "565329475": "Kunwu's Wyrmbane",
        "566772267": "Gokadaiou Otogibanashi",
        "577103787": "Energy Shower",
        "578575283": "Crescent Pike",
        "586598971": "Full Circle",
        "597991835": "Byakuya Kougetsu",
        "607067963": "Isshin Art Clarity",
        "613846163": "Descension",
        "618786571": "Halberd",
        "623494555": "Decimate",
        "623534363": "Favonius Codex",
        "630452219": "Sakura Saiguu",
        "646032090": "Shikanoin Heizou",
        "646100491": "Lithic Axiom: Unity",
        "650049651": "Windblume Ode",
        "655825874": "Yun Jin",
        "656120259": "Sharpshooter's Oath",
        "680510411": "Whiteblind",
        "688991243": "Calamity Queller",
        "693354267": "Memory of Dust",
        "697277554": "Yanfei",
        "712501082": "Nahida",
        "716252627": "Lithic Spear",
        "729851187": "Glacier and Snowfield",
        "735056795": "Favonius Greatsword",
        "807607555": "Skyward Atlas",
        "824949859": "Dodoventure!",
        "828711395": "Amos' Bow",
        "836208539": "Gilding",
        "850802171": "White Iron Greatsword",
        "855894507": "Berserker",
        "862591315": "Pale Flame",
        "877751435": "Royal Greatsword",
        "902184579": "Forest Regalia",
        "902264035": "Aquila Favonia",
        "902282051": "Cull the Weak",
        "909145139": "Protector's Virtue",
        "930640955": "The Bell",
        "933076627": "Blizzard Strayer",
        "942758755": "Focus",
        "944332883": "Summit Shaper",
        "949506483": "Oceanic Victory",
        "968378595": "Falcon's Defiance",
        "968893378": "Bennett",
        "977648923": "Primordial Jade Greatsword",
        "991968139": "Timeless Dream: Eternal Stove",
        "1006042610": "Kamisato Ayaka",
        "1012170803": "Kagotsurube Isshin",
        "1021898539": "Slingshot",
        "1021947690": "Xiao",
        "1028735635": "Revolutionary Chorale",
        "1049891906": "Cyno",
        "1053433018": "Sucrose",
        "1072884907": "Mappa Mare",
        "1075647299": "Song of Broken Pines",
        "1082448331": "People of the Faltering Light",
        "1089950259": "Skyward Pride",
        "1097898243": "Heavy",
        "1103732675": "Lucky Dog",
        "1113306282": "Mona",
        "1114777131": "Chord",
        "1119368259": "Journey",
        "1130996346": "Xiangling",
        "1133599347": "Strong-Willed",
        "1148024603": "\\"The Catch\\"",
        "1154009435": "Prototype Starglitter",
        "1163263227": "The Widsith",
        "1163616891": "Frost Burial",
        "1182966603": "Old Merc's Pal",
        "1186209435": "Gambler",
        "1200948859": "Mailed Flower",
        "1201790667": "A Thousand Floating Dreams",
        "1212345779": "Gladiator's Finale",
        "1217552947": "Honed Flow",
        "1240067179": "Favonius Warbow",
        "1307222899": "Wandering Striker",
        "1319974859": "Vigorous",
        "1321135667": "Lion's Roar",
        "1337666507": "Tenacity of the Millelith",
        "1344953075": "Windfall",
        "1345343763": "Primordial Jade Cutter",
        "1348687251": "Hunter's Path",
        "1383427723": "Whitemoon Bristle",
        "1383639611": "Tiny Miracle",
        "1388004931": "Skyrider Sword",
        "1390797107": "White Tassel",
        "1395607523": "At the End of the Beast-Paths",
        "1404688115": "The Parting Refrain",
        "1406746947": "Otherworldly Story",
        "1414366819": "Golden Majesty",
        "1437658243": "Serpent Spine",
        "1438974835": "Retracing Bolide",
        "1455107995": "Lost Prayer to the Sacred Winds",
        "1468367538": "Diona",
        "1470442731": "Missive Windspear",
        "1479961579": "Ferrous Shadow",
        "1483922610": "Kujou Sara",
        "1485303435": "Infusion Stinger",
        "1492752155": "Composed",
        "1499235563": "Press the Advantage",
        "1499745907": "Prized Isshin Blade",
        "1499817443": "Verdant Wind",
        "1516554699": "Quartz",
        "1522029867": "Bane of Fire and Thunder",
        "1524173875": "Crimson Witch of Flames",
        "1533656818": "Traveler",
        "1538092267": "Prized Isshin Blade",
        "1541919827": "Bloodstained Chivalry",
        "1545992315": "Justice",
        "1558036915": "Vermillion Hereafter",
        "1562601179": "Viridescent Venerer",
        "1588620330": "Kamisato Ayato",
        "1600275315": "Haran Geppaku Futsu",
        "1608953539": "Harbinger of Dawn",
        "1610242915": "Heritage",
        "1628928163": "Windblume Wish",
        "1632377563": "Lavawalker",
        "1651985379": "Daylight's Augury",
        "1660598451": "Iwakura Succession",
        "1675079283": "Deepwood Memories",
        "1675686363": "Sacrificial Greatsword",
        "1702903411": "Jinni's Whisper",
        "1706534267": "Blunt Conclusion",
        "1722706579": "Bane of Water and Ice",
        "1732418482": "Yaoyao",
        "1745286795": "Samurai Conduct",
        "1745712907": "Watatsumi Wavewalker",
        "1751039235": "Noblesse Oblige",
        "1756609915": "Ocean-Hued Clam",
        "1771603299": "Golden Majesty",
        "1773425155": "Sword of Descension",
        "1789612403": "Echo",
        "1820235315": "Arrowless Song",
        "1836628747": "Rebellious Guardian",
        "1860795787": "Mouun's Moon",
        "1864015138": "Keqing",
        "1873342283": "Thundersoother",
        "1890163363": "Everlasting Moonglow",
        "1901973075": "Polar Star",
        "1921418842": "Noelle",
        "1927643091": "Desert Watch",
        "1932742643": "Extinguishing Precept",
        "1934830979": "Undying Admiration",
        "1940821986": "Kuki Shinobu",
        "1940919994": "Hu Tao",
        "1966438658": "Amber",
        "1982136171": "Focus",
        "1990641987": "Sacrificial Sword",
        "1990820123": "Amenoma Kageuchi",
        "1991707099": "Prototype Rancour",
        "1994081075": "Primordial Jade Vista",
        "1997709467": "Primordial Jade Winged-Spear",
        "2006422931": "Lithic Blade",
        "2017033267": "Composed",
        "2025598051": "Windfall",
        "2029582603": "Kaidan: Rainfall Earthbinder",
        "2040573235": "Archaic Petra",
        "2060049099": "Prayers for Illumination",
        "2108574027": "Smashed Stone",
        "2109571443": "Focus",
        "2125206395": "Silver Sword",
        "2149411851": "Golden Majesty",
        "2153521307": "Desert Pavilion",
        "2172529947": "Press the Advantage",
        "2176134843": "Focus",
        "2190368347": "Gash",
        "2191797987": "Adventurer",
        "2195665683": "Sacrificial Fragments",
        "2242027395": "Ebony Bow",
        "2244980899": "Sunken Song of the Sands",
        "2257505883": "Forest Sanctuary",
        "2267978875": "Fruit of Fulfillment",
        "2276480763": "Emblem of Severed Fate",
        "2279290283": "Magic Guide",
        "2297485451": "Rapid Firing",
        "2312640651": "Composed",
        "2317820211": "Infusion Needle",
        "2322648115": "Crush",
        "2324146259": "Hakushin Ring",
        "2340970067": "Seasoned Hunter's Bow",
        "2351445619": "Bygone Azure Teardrop",
        "2359799475": "Akuoumaru",
        "2360533154": "Dehya",
        "2364208851": "Resolution of Sojourner",
        "2365025043": "Itinerant Hero",
        "2375993851": "Royal Longsword",
        "2383998915": "Watatsumi Wavewalker",
        "2384519283": "Slingshot",
        "2387711994": "Faruzan",
        "2388785242": "Sayu",
        "2400012995": "Sacrificial Bow",
        "2410593283": "Dull Blade",
        "2417717595": "Alley Hunter",
        "2425414923": "Fading Twilight",
        "2433755451": "Rebel's Banner-Hymn",
        "2440850563": "Echoing Ballad",
        "2448629019": "Toukabou Shigure",
        "2466140362": "Venti",
        "2469300579": "Press the Advantage",
        "2470306939": "Rule by Thunder",
        "2474354867": "Favonius Sword",
        "2476346187": "Bane of Flame and Water",
        "2491797315": "Kitain Cross Spear",
        "2504399314": "Yoimiya",
        "2506955778": "Tighnari",
        "2512309395": "Thundering Fury",
        "2521338131": "Prototype Amber",
        "2534304035": "Mistsplitter's Edge",
        "2538235187": "Desert Pavilion Chronicle",
        "2539208459": "Oathsworn Eye",
        "2546254811": "Husk of Opulent Dreams",
        "2556914683": "The Stringless",
        "2587614459": "Frostbearer",
        "2597527627": "The Other Side",
        "2614170427": "Skyrider Greatsword",
        "2646367730": "Beidou",
        "2664629131": "Dragon's Bane",
        "2666951267": "Waster Greatsword",
        "2673337443": "Infusion Arrow",
        "2679781122": "Ganyu",
        "2684365579": "Debut",
        "2691070627": "Forest Sanctuary",
        "2705029563": "Pocket Grimoire",
        "2713453234": "Yae Miko",
        "2743659331": "Rapids",
        "2749508387": "Golden Majesty",
        "2749853923": "Festering Desire",
        "2753539619": "Snow-Tombed Starsilver",
        "2764598579": "The Exile",
        "2792766467": "The Unforged",
        "2796697027": "Beginner's Protector",
        "2824690859": "Mirror Breaker",
        "2832648187": "Royal Bow",
        "2834063555": "Beacon of the Reed Sea",
        "2834803571": "Golden Majesty",
        "2848374378": "Yelan",
        "2853296811": "Sky-Piercing Fang",
        "2871793795": "Sharp",
        "2876340530": "Chongyun",
        "2889777514": "Layla",
        "2890909531": "Martial Artist",
        "2893964243": "Archer's Message",
        "2915865819": "Radiance of the Deeps",
        "2918525947": "Thundering Pulse",
        "2935286715": "Royal Spear",
        "2947140987": "The Alley Flash",
        "2948362178": "Collei",
        "2949448555": "Freedom-Sworn",
        "2963220587": "Emerald Orb",
        "3001782875": "Composed",
        "3018479371": "Shanty",
        "3024507506": "Raiden Shogun",
        "3063191787": "End of the Line",
        "3063488107": "Strong Strike",
        "3068316954": "Arataki Itto",
        "3070169307": "Iron Point",
        "3073454867": "Makhaira Aquamarine",
        "3079462611": "Watatsumi Wavewalker",
        "3090373787": "Wine and Song",
        "3092975658": "Candace",
        "3094139291": "Flower of Paradise Lost",
        "3097441915": "Debate Club",
        "3112448011": "Determination",
        "3112679155": "Elegy for the End",
        "3156385731": "Eye of Perception",
        "3159145923": "Wandering Striker",
        "3169209451": "Rust",
        "3176599083": "King's Squire",
        "3192689683": "Frost Burial",
        "3209694115": "Wildling Nightstar",
        "3221566250": "Jean",
        "3230559562": "Wanderer",
        "3235324891": "Staff of Homa",
        "3252085691": "Windfall",
        "3258658763": "Magic Affinity",
        "3265161211": "Infusion Blade",
        "3273999011": "Blackcliff Agate",
        "3277782506": "Fischl",
        "3302787771": "Frost Burial",
        "3305772819": "Guerilla Tactics",
        "3314157803": "Bane of the Soft",
        "3337185491": "Full Draw",
        "3337249451": "Overloaded",
        "3339083250": "Klee",
        "3344622722": "Lisa",
        "3364338659": "Boundless Blessing",
        "3371922315": "Kagura Dance of the Sacred Sakura",
        "3378007475": "Blackcliff Longsword",
        "3400133546": "Gorou",
        "3406113971": "Windfall",
        "3421967235": "Fillet Blade",
        "3439749859": "The Viridescent Hunt",
        "3443142923": "Dragonspine Spear",
        "3447737235": "Blackcliff Warbow",
        "3453611803": "Net Snapper",
        "3456986819": "Dodoco Tales",
        "3464027035": "Prized Isshin Blade",
        "3465493459": "Precise",
        "3500935003": "Thrilling Tales of Dragon Slayers",
        "3513240283": "The Wind Unattained",
        "3532343811": "Deicide",
        "3535784755": "Brave Heart",
        "3541083923": "Gladiator",
        "3555115602": "Thoma",
        "3584825427": "Apprentice's Notes",
        "3587062891": "Lithic Axiom: Unity",
        "3587621259": "The Flute",
        "3600623979": "Hunter's Bow",
        "3608180322": "Diluc",
        "3618167299": "Scholar",
        "3625393819": "Prototype Crescent",
        "3626268211": "Echoes of an Offering",
        "3673792067": "Traveler's Handy Sword",
        "3684723963": "Rainslasher",
        "3685735523": "Wandering Striker",
        "3689108098": "Aloy",
        "3717341819": "Stillwood Moonshadow",
        "3717667418": "Eula",
        "3717849275": "Engulfing Lightning",
        "3719372715": "Twin Nephrite",
        "3722933411": "Prototype Archaic",
        "3755004051": "Favonius Lance",
        "3775299170": "Barbara",
        "3780343147": "One Side",
        "3782508715": "Traveling Doctor",
        "3796702635": "Ever-Changing",
        "3796905611": "The Black Sword",
        "3816664530": "Traveler",
        "3827789435": "Royal Grimoire",
        "3832443723": "Unbending",
        "3836188467": "Reckless Cinnabar",
        "3847143266": "Tartaglia",
        "3850149970": "Nilou",
        "3862787418": "Zhongli",
        "3890292467": "Instructor",
        "3898539027": "Wandering Clouds",
        "3909785739": "Heat Haze at Horizon's End",
        "3914045794": "Sangonomiya Kokomi",
        "3914951691": "Redhorn Stonethresher",
        "3933622347": "Skyward Harp",
        "3949653579": "Mitternachts Waltz",
        "3956074723": "Labyrinth Lord's Instruction",
        "3966753539": "The Cleansing Form",
        "3975746731": "Raven Bow",
        "3995710363": "Wolf's Gravestone",
        "3996017211": "Cull the Weak",
        "3999792907": "Prayers for Destiny",
        "4000770243": "Oppidan Ambush",
        "4002157418": "Alhaitham",
        "4007372867": "Primordial Jade Regalia",
        "4022012131": "Press the Advantage",
        "4049410651": "Deathmatch",
        "4055003299": "Skyward Blade",
        "4060235987": "Solar Shine",
        "4080317355": "Courage",
        "4082302819": "Defender's Will",
        "4090429643": "Bloodtainted Greatsword",
        "4103022435": "Iron Sting",
        "4103766499": "Black Tassel",
        "4108620722": "Albedo",
        "4113638323": "Eagle Spear of Justice",
        "4119663210": "Kaeya",
        "4122509083": "Wavebreaker's Fin",
        "4124851547": "Mistsplitter Reforged",
        "4127888970": "Ningguang",
        "4139294531": "Messenger",
        "4144069251": "Shimenawa's Reminiscence",
        "4145306051": "Gilded Dreams",
        "4158505619": "Skyward Spine",
        "4160147242": "Razor",
        "4186179883": "Hamayumi",
        "4193089947": "Katsuragikiri Nagamasa",
        "4197635682": "Xingqiu",
        "4226083179": "Samurai Conduct",
        "4230231107": "Aqua Simulacra",
        "4238339131": "Staff of the Scarlet Sands",
        "4245213187": "Infusion Scroll",
        "4258047555": "Evernight Duet",
        "4260733330": "Rosaria",
        "4267718859": "Recurve Bow",
        "4273845410": "Xinyan",
        "4275754179": "Wolfish Tracker",
        "FIGHT_PROP_BASE_HP": "Base HP",
        "FIGHT_PROP_HP": "HP",
        "FIGHT_PROP_HP_PERCENT": "HP",
        "FIGHT_PROP_BASE_ATTACK": "Base ATK",
        "FIGHT_PROP_ATTACK": "ATK",
        "FIGHT_PROP_ATTACK_PERCENT": "ATK",
        "FIGHT_PROP_BASE_DEFENSE": "Base DEF",
        "FIGHT_PROP_DEFENSE": "DEF",
        "FIGHT_PROP_DEFENSE_PERCENT": "DEF",
        "FIGHT_PROP_BASE_SPEED": "Movement SPD",
        "FIGHT_PROP_SPEED_PERCENT": "Movement SPD",
        "FIGHT_PROP_CRITICAL": "CRIT Rate",
        "FIGHT_PROP_ANTI_CRITICAL": "CRIT RES",
        "FIGHT_PROP_CRITICAL_HURT": "CRIT DMG",
        "FIGHT_PROP_CHARGE_EFFICIENCY": "Energy Recharge",
        "FIGHT_PROP_ADD_HURT": "DMG Bonus",
        "FIGHT_PROP_SUB_HURT": "DMG Reduction",
        "FIGHT_PROP_HEAL_ADD": "Healing Bonus",
        "FIGHT_PROP_HEALED_ADD": "Incoming Healing Bonus",
        "FIGHT_PROP_ELEMENT_MASTERY": "Elemental Mastery",
        "FIGHT_PROP_PHYSICAL_SUB_HURT": "Physical RES",
        "FIGHT_PROP_PHYSICAL_ADD_HURT": "Physical DMG Bonus",
        "FIGHT_PROP_FIRE_ADD_HURT": "Pyro DMG Bonus",
        "FIGHT_PROP_ELEC_ADD_HURT": "Electro DMG Bonus",
        "FIGHT_PROP_WATER_ADD_HURT": "Hydro DMG Bonus",
        "FIGHT_PROP_GRASS_ADD_HURT": "Dendro DMG Bonus",
        "FIGHT_PROP_WIND_ADD_HURT": "Anemo DMG Bonus",
        "FIGHT_PROP_ROCK_ADD_HURT": "Geo DMG Bonus",
        "FIGHT_PROP_ICE_ADD_HURT": "Cryo DMG Bonus",
        "FIGHT_PROP_FIRE_SUB_HURT": "Pyro RES",
        "FIGHT_PROP_ELEC_SUB_HURT": "Electro RES",
        "FIGHT_PROP_WATER_SUB_HURT": "Hydro RES",
        "FIGHT_PROP_GRASS_SUB_HURT": "Dendro RES",
        "FIGHT_PROP_WIND_SUB_HURT": "Anemo RES",
        "FIGHT_PROP_ROCK_SUB_HURT": "Geo RES",
        "FIGHT_PROP_ICE_SUB_HURT": "Cryo RES",
        "FIGHT_PROP_EFFECT_HIT": "Hit",
        "FIGHT_PROP_EFFECT_RESIST": "Resisted",
        "FIGHT_PROP_FREEZE_SHORTEN": "Frozen Duration Reduction",
        "FIGHT_PROP_DIZZY_SHORTEN": "Stunned Duration Reduction",
        "FIGHT_PROP_SKILL_CD_MINUS_RATIO": "CD Reduction",
        "FIGHT_PROP_SHIELD_COST_MINUS_RATIO": "Shield Strength",
        "FIGHT_PROP_CUR_HP": "HP",
        "FIGHT_PROP_MAX_HP": "Max HP",
        "FIGHT_PROP_CUR_ATTACK": "ATK",
        "FIGHT_PROP_CUR_DEFENSE": "DEF",
        "FIGHT_PROP_CUR_SPEED": "Movement SPD",
        "abyss": "Spiral Abyss",
        "achievements": "Total Achievements",
        "level": "Lv."
    },
    "ja": {
    "20848859": "黒岩の斬刀",
    "33330467": "元素熟達",
    "37147251": "匣中日月",
    "43015699": "未定",
    "54857595": "水と雷の破滅",
    "83115355": "愛される少女",
    "85795635": "集中",
    "88505754": "楓原万葉",
    "135182203": "水と雷の破滅",
    "141119323": "風と花の合言葉",
    "143051931": "サイフォスの月明かり",
    "147298547": "大地を流浪する楽団",
    "156294403": "沈淪の心",
    "160493219": "暗鉄剣",
    "168956722": "七七",
    "197755235": "破天の槍",
    "212557731": "雷祭りの人",
    "231836963": "磐岩の緑",
    "231911858": "ミカ",
    "240385755": "波乗り",
    "246984427": "炎と雷の破滅",
    "262428003": "氷祭りの人",
    "270124867": "護国の無垢なる心",
    "275622963": "萃光の裁葉",
    "287454963": "風祭りの人",
    "288666635": "無垢な心",
    "302691299": "琥珀の玥",
    "303155515": "帰らない",
    "310247243": "神楽の真意",
    "313300315": "原木刀",
    "334242634": "申鶴",
    "339931171": "勝ちに乗じる",
    "342097547": "シナバースピンドル",
    "346510395": "銜玉の海皇",
    "359484419": "トゥライトゥーラの記憶",
    "368014203": "晴れ空を裂く龍の骨",
    "388272194": "ドリー",
    "391273955": "黒翼を切り裂く鋭牙",
    "411685275": "リングボウ",
    "426363739": "彷徨える星",
    "452043283": "散逸した叙事詩",
    "452357939": "ムーンピアサー",
    "453444347": "千夜の暁歌",
    "454086795": "聖顕の鍵",
    "479076483": "冷刃",
    "481755219": "黒岩の突槍",
    "486287579": "余熱",
    "500612819": "「旗竿」",
    "506630267": "追い風が吹く",
    "514784907": "炎と水の破滅",
    "521221323": "護国の無垢なる心",
    "540938627": "プレデター",
    "565329475": "昆吾の堕龍",
    "566772267": "御伽大王の御伽話",
    "577103787": "エネルギーシャワー",
    "578575283": "流月の針",
    "586598971": "正円の相",
    "597991835": "白夜皓月",
    "607067963": "澄·一心伝",
    "613846163": "降世",
    "618786571": "鉾槍",
    "623494555": "頑丈壊し",
    "623534363": "西風秘典",
    "630452219": "櫻の斎宮",
    "646032090": "鹿野院平蔵",
    "646100491": "千岩訣·同心",
    "650049651": "風花の頌歌",
    "655825874": "雲菫",
    "656120259": "シャープシューターの誓い",
    "680510411": "白影の剣",
    "688991243": "息災",
    "693354267": "浮世の錠",
    "697277554": "煙緋",
    "712501082": "ナヒーダ",
    "716252627": "千岩長槍",
    "729851187": "氷の川と雪の砂",
    "735056795": "西風大剣",
    "807607555": "天空の巻",
    "824949859": "ドドベンチャー！",
    "828711395": "アモスの弓",
    "836208539": "炊金",
    "850802171": "白鉄の大剣",
    "855894507": "狂戦士",
    "862591315": "蒼白の炎",
    "877751435": "旧貴族大剣",
    "902184579": "森林のレガリア",
    "902264035": "風鷹剣",
    "902282051": "刈り取る",
    "909145139": "護国の無垢なる心",
    "930640955": "鐘の剣",
    "933076627": "氷風を彷徨う勇士",
    "942758755": "集中",
    "944332883": "斬山の刃",
    "949506483": "海の勝利",
    "968378595": "西風の鷹の抗い",
    "968893378": "ベネット",
    "977648923": "美玉魚",
    "991968139": "非時の夢·常世竈食",
    "1006042610": "神里綾華",
    "1012170803": "籠釣瓶一心",
    "1021898539": "弾弓",
    "1021947690": "魈",
    "1028735635": "執行と抗争の歌",
    "1049891906": "セノ",
    "1053433018": "スクロース",
    "1072884907": "万国諸海の図譜",
    "1075647299": "松韻の響く頃",
    "1082448331": "淡く光りし海淵の民",
    "1089950259": "天空の傲",
    "1097898243": "過重",
    "1103732675": "幸運",
    "1113306282": "モナ",
    "1114777131": "和音",
    "1119368259": "旅路",
    "1130996346": "香菱",
    "1133599347": "一心不乱",
    "1148024603": "「漁獲」",
    "1154009435": "星鎌·試作",
    "1163263227": "流浪楽章",
    "1163616891": "霜の埋葬",
    "1182966603": "傭兵の重剣",
    "1186209435": "博徒",
    "1200948859": "鉄彩の花",
    "1201790667": "千夜に浮かぶ夢",
    "1212345779": "剣闘士のフィナーレ",
    "1217552947": "白刃流転",
    "1240067179": "西風猟弓",
    "1307222899": "徊·切捨刀",
    "1319974859": "奮い立てる",
    "1321135667": "匣中龍吟",
    "1337666507": "千岩牢固",
    "1344953075": "追い風が吹く",
    "1345343763": "磐岩結緑",
    "1348687251": "狩人の道",
    "1383427723": "白月に輝く枝",
    "1383639611": "奇跡",
    "1388004931": "飛天御剣",
    "1390797107": "白纓槍",
    "1395607523": "獣道の終着点",
    "1404688115": "追憶と別れの歌",
    "1406746947": "異世界旅行記",
    "1414366819": "金璋君臨",
    "1437658243": "螭龍の剣",
    "1438974835": "逆飛びの流星",
    "1455107995": "四風原典",
    "1468367538": "ディオナ",
    "1470442731": "風信の矛",
    "1479961579": "鉄影段平",
    "1483922610": "九条裟羅",
    "1485303435": "注入の棘",
    "1492752155": "落ち着き",
    "1499235563": "勝ちに乗じる",
    "1499745907": "「一心伝」名刀",
    "1499817443": "蒼翠の風",
    "1516554699": "石英大剣",
    "1522029867": "炎と雷の破滅",
    "1524173875": "燃え盛る炎の魔女",
    "1533656818": "旅人",
    "1538092267": "「一心伝」名刀",
    "1541919827": "血染めの騎士道",
    "1545992315": "「正義」",
    "1558036915": "辰砂往生録",
    "1562601179": "翠緑の影",
    "1588620330": "神里綾人",
    "1600275315": "波乱月白経津",
    "1608953539": "黎明の神剣",
    "1610242915": "伝承",
    "1628928163": "風花の願い",
    "1632377563": "烈火を渡る賢者",
    "1651985379": "白夜の前兆者",
    "1660598451": "岩蔵の胤",
    "1675079283": "深林の記憶",
    "1675686363": "祭礼の大剣",
    "1702903411": "ジンニーの囁き",
    "1706534267": "率直に話を言え",
    "1722706579": "水と氷の破滅",
    "1732418482": "ヨォーヨ",
    "1745286795": "名士の振舞",
    "1745712907": "波を統べる海祇の民",
    "1751039235": "旧貴族のしつけ",
    "1756609915": "海染硨磲",
    "1771603299": "金璋君臨",
    "1773425155": "降臨の剣",
    "1789612403": "響き",
    "1820235315": "矢なしの詩",
    "1836628747": "反逆の守護者",
    "1860795787": "曚雲の月",
    "1864015138": "刻晴",
    "1873342283": "雷を鎮める尊者",
    "1890163363": "不滅の月華",
    "1901973075": "冬極の白星",
    "1921418842": "ノエル",
    "1927643091": "砂海の守護",
    "1932742643": "滅却の戒法",
    "1934830979": "底なしの渇望",
    "1940821986": "久岐忍",
    "1940919994": "胡桃",
    "1966438658": "アンバー",
    "1982136171": "集中",
    "1990641987": "祭礼の剣",
    "1990820123": "天目影打",
    "1991707099": "斬岩·試作",
    "1994081075": "高価なオーブ",
    "1997709467": "和璞鳶",
    "2006422931": "千岩古剣",
    "2017033267": "落ち着き",
    "2025598051": "追い風が吹く",
    "2029582603": "怪譚·時雨心地一本足",
    "2040573235": "悠久の磐岩",
    "2060049099": "火祭りの人",
    "2108574027": "岩砕き",
    "2109571443": "集中",
    "2125206395": "銀の剣",
    "2149411851": "金璋君臨",
    "2153521307": "砂上の楼閣",
    "2172529947": "勝ちに乗じる",
    "2176134843": "集中",
    "2190368347": "切り捨て",
    "2191797987": "冒険者",
    "2195665683": "祭礼の断片",
    "2242027395": "黒檀の弓",
    "2244980899": "砂海に沈みし叙事詩",
    "2257505883": "フォレストサンクチュアリ",
    "2267978875": "満悦の実",
    "2276480763": "絶縁の旗印",
    "2279290283": "魔導緒論",
    "2297485451": "速射の弓",
    "2312640651": "落ち着き",
    "2317820211": "注入の針",
    "2322648115": "粉砕",
    "2324146259": "白辰の輪",
    "2340970067": "歴戦の狩猟弓",
    "2351445619": "埋もれしサファイアの涙",
    "2359799475": "惡王丸",
    "2360533154": "ディシア",
    "2364208851": "旅人の心",
    "2365025043": "路地遊侠",
    "2375993851": "旧貴族長剣",
    "2383998915": "波を統べる海祇の民",
    "2384519283": "弾弓",
    "2387711994": "ファルザン",
    "2388785242": "早柚",
    "2400012995": "祭礼の弓",
    "2410593283": "無鋒の剣",
    "2417717595": "ダークアレイの狩人",
    "2425414923": "落霞",
    "2433755451": "反抗と旗掲げの歌",
    "2440850563": "天に響く詩",
    "2448629019": "東花坊時雨",
    "2466140362": "ウェンティ",
    "2469300579": "勝ちに乗じる",
    "2470306939": "飛雷の御執",
    "2474354867": "西風剣",
    "2476346187": "炎と水の破滅",
    "2491797315": "喜多院十文字槍",
    "2504399314": "宵宮",
    "2506955778": "ティナリ",
    "2512309395": "雷のような怒り",
    "2521338131": "金珀·試作",
    "2534304035": "霧切の御腰物",
    "2538235187": "砂上の楼閣の史話",
    "2539208459": "誓いの明瞳",
    "2546254811": "華館夢醒形骸記",
    "2556914683": "絶弦",
    "2587614459": "冬忍びの実",
    "2597527627": "異史",
    "2614170427": "飛天大御剣",
    "2646367730": "北斗",
    "2664629131": "匣中滅龍",
    "2666951267": "訓練用大剣",
    "2673337443": "注入の矢",
    "2679781122": "甘雨",
    "2684365579": "序曲",
    "2691070627": "フォレストサンクチュアリ",
    "2705029563": "ポケット魔導書",
    "2713453234": "八重神子",
    "2743659331": "激流",
    "2749508387": "金璋君臨",
    "2749853923": "腐植の剣",
    "2753539619": "雪葬の星銀",
    "2764598579": "亡命者",
    "2792766467": "無工の剣",
    "2796697027": "新米の長槍",
    "2824690859": "壊れた鏡",
    "2832648187": "旧貴族長弓",
    "2834063555": "葦海の標",
    "2834803571": "金璋君臨",
    "2848374378": "夜蘭",
    "2853296811": "高天を貫く牙",
    "2871793795": "鋭利",
    "2876340530": "重雲",
    "2889777514": "レイラ",
    "2890909531": "武人",
    "2893964243": "矢文",
    "2915865819": "淵中霞彩",
    "2918525947": "飛雷の鳴弦",
    "2935286715": "旧貴族猟槍",
    "2947140987": "ダークアレイの閃光",
    "2948362178": "コレイ",
    "2949448555": "蒼古なる自由への誓い",
    "2963220587": "翡玉法珠",
    "3001782875": "落ち着き",
    "3018479371": "舟歌",
    "3024507506": "雷電将軍",
    "3063191787": "竭沢",
    "3063488107": "強打",
    "3068316954": "荒瀧一斗",
    "3070169307": "鉄尖槍",
    "3073454867": "マカイラの水色",
    "3079462611": "波を統べる海祇の民",
    "3090373787": "ダークアレイの酒と詩",
    "3092975658": "キャンディス",
    "3094139291": "楽園の絶花",
    "3097441915": "理屈責め",
    "3112448011": "決心",
    "3112679155": "終焉を嘆く詩",
    "3156385731": "昭心",
    "3159145923": "徊·切捨刀",
    "3169209451": "弓蔵",
    "3176599083": "王の近侍",
    "3192689683": "霜の埋葬",
    "3209694115": "林野の星",
    "3221566250": "ジン",
    "3230559562": "放浪者",
    "3235324891": "護摩の杖",
    "3252085691": "追い風が吹く",
    "3258658763": "魔力親和",
    "3265161211": "注入の刃",
    "3273999011": "黒岩の緋玉",
    "3277782506": "フィッシュル",
    "3302787771": "霜の埋葬",
    "3305772819": "襲撃戦術",
    "3314157803": "スライム殺し",
    "3337185491": "浅瀨の弭",
    "3337249451": "オーバーロード",
    "3339083250": "クレー",
    "3344622722": "リサ",
    "3364338659": "果てしない恵み",
    "3371922315": "神櫻神遊神楽舞",
    "3378007475": "黒岩の長剣",
    "3400133546": "ゴロー",
    "3406113971": "追い風が吹く",
    "3421967235": "チ虎魚の刀",
    "3439749859": "蒼翠の狩猟弓",
    "3443142923": "ドラゴンスピア",
    "3447737235": "黒岩の戦弓",
    "3453611803": "ネットブレーカー",
    "3456986819": "ドドコの物語",
    "3464027035": "「一心伝」名刀",
    "3465493459": "精密射撃",
    "3500935003": "龍殺しの英傑譚",
    "3513240283": "訪れぬ風",
    "3532343811": "レジサイド",
    "3535784755": "勇士の心",
    "3541083923": "剣闘士",
    "3555115602": "トーマ",
    "3584825427": "生徒ノート",
    "3587062891": "千岩訣·同心",
    "3587621259": "笛の剣",
    "3600623979": "狩猟弓",
    "3608180322": "ディルック",
    "3618167299": "学者",
    "3625393819": "澹月·試作",
    "3626268211": "来歆の余響",
    "3673792067": "旅道の剣",
    "3684723963": "雨裁",
    "3685735523": "徊·切捨刀",
    "3689108098": "アーロイ",
    "3717341819": "幽林の月影",
    "3717667418": "エウルア",
    "3717849275": "草薙の稲光",
    "3719372715": "特級の宝玉",
    "3722933411": "古華·試作",
    "3755004051": "西風長槍",
    "3775299170": "バーバラ",
    "3780343147": "虚構",
    "3782508715": "医者",
    "3796702635": "千変万化",
    "3796905611": "黒剣",
    "3816664530": "旅人",
    "3827789435": "旧貴族秘法録",
    "3832443723": "不屈",
    "3836188467": "縛り無き朱色の蝶",
    "3847143266": "タルタリヤ",
    "3850149970": "ニィロウ",
    "3862787418": "鍾離",
    "3890292467": "教官",
    "3898539027": "四方浮遊する霊雲",
    "3909785739": "蜃気楼の果ての熱夢",
    "3914045794": "珊瑚宮心海",
    "3914951691": "赤角石塵滅砕",
    "3933622347": "天空の翼",
    "3949653579": "幽夜のワルツ",
    "3956074723": "迷宮の王の教え",
    "3966753539": "濯ぎし諸般の形",
    "3975746731": "鴉羽の弓",
    "3995710363": "狼の末路",
    "3996017211": "刈り取る",
    "3999792907": "水祭りの人",
    "4000770243": "路地奇襲",
    "4002157418": "アルハイゼン",
    "4007372867": "土定の玉",
    "4022012131": "勝ちに乗じる",
    "4049410651": "死闘の槍",
    "4055003299": "天空の刃",
    "4060235987": "日月の輝き",
    "4080317355": "勇気",
    "4082302819": "守護の心",
    "4090429643": "龍血を浴びた剣",
    "4103022435": "鉄蜂の刺し",
    "4103766499": "黒纓槍",
    "4108620722": "アルベド",
    "4113638323": "正義を貫く鳶の槍",
    "4119663210": "ガイア",
    "4122509083": "斬波のひれ長",
    "4124851547": "霧切の廻光",
    "4127888970": "凝光",
    "4139294531": "文使い",
    "4144069251": "追憶のしめ縄",
    "4145306051": "金メッキの夢",
    "4158505619": "天空の脊",
    "4160147242": "レザー",
    "4186179883": "破魔の弓",
    "4193089947": "桂木斬長正",
    "4197635682": "行秋",
    "4226083179": "名士の振舞",
    "4230231107": "若水",
    "4238339131": "赤砂の杖",
    "4245213187": "注入の巻",
    "4258047555": "極夜のデュエット",
    "4260733330": "ロサリア",
    "4267718859": "リカーブボウ",
    "4273845410": "辛炎",
    "4275754179": "狼のような狩人",
    "FIGHT_PROP_BASE_HP": "基礎HP",
    "FIGHT_PROP_HP": "HP",
    "FIGHT_PROP_HP_PERCENT": "HPパーセンテージ",
    "FIGHT_PROP_BASE_ATTACK": "基礎攻撃力",
    "FIGHT_PROP_ATTACK": "攻撃力",
    "FIGHT_PROP_ATTACK_PERCENT": "攻撃パーセンテージ",
    "FIGHT_PROP_BASE_DEFENSE": "基礎防御力",
    "FIGHT_PROP_DEFENSE": "防御力",
    "FIGHT_PROP_DEFENSE_PERCENT": "防御パーセンテージ",
    "FIGHT_PROP_BASE_SPEED": "移動速度",
    "FIGHT_PROP_SPEED_PERCENT": "移動速度",
    "FIGHT_PROP_CRITICAL": "会心率",
    "FIGHT_PROP_ANTI_CRITICAL": "会心耐性",
    "FIGHT_PROP_CRITICAL_HURT": "会心ダメージ",
    "FIGHT_PROP_CHARGE_EFFICIENCY": "元素チャージ効率",
    "FIGHT_PROP_ADD_HURT": "ダメージ増加",
    "FIGHT_PROP_SUB_HURT": "被ダメージ軽減",
    "FIGHT_PROP_HEAL_ADD": "与える治療効果",
    "FIGHT_PROP_HEALED_ADD": "受ける治療効果",
    "FIGHT_PROP_ELEMENT_MASTERY": "元素熟知",
    "FIGHT_PROP_PHYSICAL_SUB_HURT": "物理耐性",
    "FIGHT_PROP_PHYSICAL_ADD_HURT": "物理ダメージ",
    "FIGHT_PROP_FIRE_ADD_HURT": "炎元素ダメージ",
    "FIGHT_PROP_ELEC_ADD_HURT": "雷元素ダメージ",
    "FIGHT_PROP_WATER_ADD_HURT": "水元素ダメージ",
    "FIGHT_PROP_GRASS_ADD_HURT": "草元素ダメージ",
    "FIGHT_PROP_WIND_ADD_HURT": "風元素ダメージ",
    "FIGHT_PROP_ROCK_ADD_HURT": "岩元素ダメージ",
    "FIGHT_PROP_ICE_ADD_HURT": "氷元素ダメージ",
    "FIGHT_PROP_FIRE_SUB_HURT": "炎元素耐性",
    "FIGHT_PROP_ELEC_SUB_HURT": "雷元素耐性",
    "FIGHT_PROP_WATER_SUB_HURT": "水元素耐性",
    "FIGHT_PROP_GRASS_SUB_HURT": "草元素耐性",
    "FIGHT_PROP_WIND_SUB_HURT": "風元素耐性",
    "FIGHT_PROP_ROCK_SUB_HURT": "岩元素耐性",
    "FIGHT_PROP_ICE_SUB_HURT": "氷元素耐性",
    "FIGHT_PROP_EFFECT_HIT": "効果命中",
    "FIGHT_PROP_EFFECT_RESIST": "効果抵抗",
    "FIGHT_PROP_FREEZE_SHORTEN": "凍結時間短縮",
    "FIGHT_PROP_DIZZY_SHORTEN": "スタン時間短縮",
    "FIGHT_PROP_SKILL_CD_MINUS_RATIO": "クールタイム短縮",
    "FIGHT_PROP_SHIELD_COST_MINUS_RATIO": "シールド強化",
    "FIGHT_PROP_CUR_HP": "HP",
    "FIGHT_PROP_MAX_HP": "HP上限",
    "FIGHT_PROP_CUR_ATTACK": "攻撃力",
    "FIGHT_PROP_CUR_DEFENSE": "防御力",
    "FIGHT_PROP_CUR_SPEED": "移動速度",
    "abyss": "深境螺旋",
    "achievements": "アチーブメント",
    "level": "Level"
    }
}"""

def CharacterJson():
    return """{
        "10000002": {
            "Element": "Ice",
            "Consts": [
                "UI_Talent_S_Ayaka_01",
                "UI_Talent_S_Ayaka_02",
                "UI_Talent_U_Ayaka_02",
                "UI_Talent_S_Ayaka_03",
                "UI_Talent_U_Ayaka_01",
                "UI_Talent_S_Ayaka_04"
            ],
            "SkillOrder": [
                10024,
                10018,
                10019
            ],
            "Skills": {
                "10018": "Skill_S_Ayaka_01",
                "10019": "Skill_E_Ayaka",
                "10024": "Skill_A_01"
            },
            "ProudMap": {
                "10018": 232,
                "10019": 239,
                "10024": 231
            },
            "NameTextMapHash": 1006042610,
            "SideIconName": "UI_AvatarIcon_Side_Ayaka",
            "QualityType": "QUALITY_ORANGE",
            "Costumes": {
                "200201": {
                    "sideIconName": "UI_AvatarIcon_Side_AyakaCostumeFruhling",
                    "icon": "UI_AvatarIcon_AyakaCostumeFruhling",
                    "art": "UI_Costume_AyakaCostumeFruhling",
                    "avatarId": 10000002
                }
            }
        },
        "10000003": {
            "Element": "Wind",
            "Consts": [
                "UI_Talent_S_Qin_01",
                "UI_Talent_S_Qin_02",
                "UI_Talent_U_Qin_02",
                "UI_Talent_S_Qin_03",
                "UI_Talent_U_Qin_01",
                "UI_Talent_S_Qin_04"
            ],
            "SkillOrder": [
                10031,
                10033,
                10034
            ],
            "Skills": {
                "10031": "Skill_A_01",
                "10033": "Skill_S_Qin_02",
                "10034": "Skill_E_Qin_01"
            },
            "ProudMap": {
                "10031": 331,
                "10033": 332,
                "10034": 339
            },
            "NameTextMapHash": 3221566250,
            "SideIconName": "UI_AvatarIcon_Side_Qin",
            "QualityType": "QUALITY_ORANGE",
            "Costumes": {
                "200301": {
                    "sideIconName": "UI_AvatarIcon_Side_QinCostumeSea",
                    "icon": "UI_AvatarIcon_QinCostumeSea",
                    "art": "UI_Costume_QinCostumeSea",
                    "avatarId": 10000003
                },
                "200302": {
                    "sideIconName": "UI_AvatarIcon_Side_QinCostumeWic",
                    "icon": "UI_AvatarIcon_QinCostumeWic",
                    "art": "UI_Costume_QinCostumeWic",
                    "avatarId": 10000003
                }
            }
        },
        "10000005": {
            "Element": "Wind",
            "Consts": [
                "UI_Talent_S_PlayerWind_01",
                "UI_Talent_S_PlayerWind_02",
                "UI_Talent_U_PlayerWind_02",
                "UI_Talent_S_PlayerWind_03",
                "UI_Talent_U_PlayerWind_01",
                "UI_Talent_S_PlayerWind_04"
            ],
            "SkillOrder": [
                100543,
                10067,
                10068
            ],
            "Skills": {
                "10067": "Skill_S_PlayerWind_01",
                "10068": "Skill_E_PlayerWind_01",
                "100543": "Skill_A_01"
            },
            "NameTextMapHash": 1533656818,
            "ProudMap": {
                "10067": 732,
                "10068": 739,
                "100543": 730
            },
            "SideIconName": "UI_AvatarIcon_Side_PlayerBoy",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000006": {
            "Element": "Electric",
            "Consts": [
                "UI_Talent_S_Lisa_01",
                "UI_Talent_S_Lisa_02",
                "UI_Talent_U_Lisa_02",
                "UI_Talent_S_Lisa_03",
                "UI_Talent_U_Lisa_01",
                "UI_Talent_S_Lisa_04"
            ],
            "SkillOrder": [
                10060,
                10061,
                10062
            ],
            "Skills": {
                "10060": "Skill_A_Catalyst_MD",
                "10061": "Skill_S_Lisa_01",
                "10062": "Skill_E_Lisa_01"
            },
            "ProudMap": {
                "10060": 431,
                "10061": 432,
                "10062": 439
            },
            "NameTextMapHash": 3344622722,
            "SideIconName": "UI_AvatarIcon_Side_Lisa",
            "QualityType": "QUALITY_PURPLE",
            "Costumes": {
                "200601": {
                    "sideIconName": "UI_AvatarIcon_Side_LisaCostumeStudentin",
                    "icon": "UI_AvatarIcon_LisaCostumeStudentin",
                    "art": "UI_Costume_LisaCostumeStudentin",
                    "avatarId": 10000006
                }
            }
        },
        "10000007": {
            "Element": "Wind",
            "Consts": [
                "UI_Talent_S_PlayerWind_01",
                "UI_Talent_S_PlayerWind_02",
                "UI_Talent_U_PlayerWind_02",
                "UI_Talent_S_PlayerWind_03",
                "UI_Talent_U_PlayerWind_01",
                "UI_Talent_S_PlayerWind_04"
            ],
            "SkillOrder": [
                100553,
                10067,
                10068
            ],
            "Skills": {
                "10067": "Skill_S_PlayerWind_01",
                "10068": "Skill_E_PlayerWind_01",
                "100553": "Skill_A_01"
            },
            "NameTextMapHash": 3816664530,
            "ProudMap": {
                "10067": 732,
                "10068": 739,
                "100553": 731
            },
            "SideIconName": "UI_AvatarIcon_Side_PlayerGirl",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000014": {
            "Element": "Water",
            "Consts": [
                "UI_Talent_S_Barbara_01",
                "UI_Talent_S_Barbara_02",
                "UI_Talent_U_Barbara_02",
                "UI_Talent_S_Barbara_03",
                "UI_Talent_U_Barbara_01",
                "UI_Talent_S_Barbara_04"
            ],
            "SkillOrder": [
                10070,
                10071,
                10072
            ],
            "Skills": {
                "10070": "Skill_A_Catalyst_MD",
                "10071": "Skill_S_Barbara_01",
                "10072": "Skill_E_Barbara_01"
            },
            "ProudMap": {
                "10070": 1431,
                "10071": 1432,
                "10072": 1439
            },
            "NameTextMapHash": 3775299170,
            "SideIconName": "UI_AvatarIcon_Side_Barbara",
            "QualityType": "QUALITY_PURPLE",
            "Costumes": {
                "201401": {
                    "sideIconName": "UI_AvatarIcon_Side_BarbaraCostumeSummertime",
                    "icon": "UI_AvatarIcon_BarbaraCostumeSummertime",
                    "art": "UI_Costume_BarbaraCostumeSummertime",
                    "avatarId": 10000014
                }
            }
        },
        "10000015": {
            "Element": "Ice",
            "Consts": [
                "UI_Talent_S_Kaeya_01",
                "UI_Talent_S_Kaeya_02",
                "UI_Talent_U_Kaeya_01",
                "UI_Talent_S_Kaeya_03",
                "UI_Talent_U_Kaeya_02",
                "UI_Talent_S_Kaeya_04"
            ],
            "SkillOrder": [
                10073,
                10074,
                10075
            ],
            "Skills": {
                "10073": "Skill_A_01",
                "10074": "Skill_S_Kaeya_01",
                "10075": "Skill_E_Kaeya_01"
            },
            "ProudMap": {
                "10073": 1531,
                "10074": 1532,
                "10075": 1539
            },
            "NameTextMapHash": 4119663210,
            "SideIconName": "UI_AvatarIcon_Side_Kaeya",
            "QualityType": "QUALITY_PURPLE"
        },
        "10000016": {
            "Element": "Fire",
            "Consts": [
                "UI_Talent_S_Diluc_01",
                "UI_Talent_S_Diluc_02",
                "UI_Talent_U_Diluc_01",
                "UI_Talent_S_Diluc_03",
                "UI_Talent_U_Diluc_02",
                "UI_Talent_S_Diluc_04"
            ],
            "SkillOrder": [
                10160,
                10161,
                10165
            ],
            "Skills": {
                "10160": "Skill_A_04",
                "10161": "Skill_S_Diluc_01_01",
                "10165": "Skill_E_Diluc_01"
            },
            "ProudMap": {
                "10160": 1631,
                "10161": 1632,
                "10165": 1639
            },
            "NameTextMapHash": 3608180322,
            "SideIconName": "UI_AvatarIcon_Side_Diluc",
            "QualityType": "QUALITY_ORANGE",
            "Costumes": {
                "201601": {
                    "sideIconName": "UI_AvatarIcon_Side_DilucCostumeFlamme",
                    "icon": "UI_AvatarIcon_DilucCostumeFlamme",
                    "art": "UI_Costume_DilucCostumeFlamme",
                    "avatarId": 10000016
                }
            }
        },
        "10000020": {
            "Element": "Electric",
            "Consts": [
                "UI_Talent_S_Razor_01",
                "UI_Talent_S_Razor_02",
                "UI_Talent_U_Razor_02",
                "UI_Talent_S_Razor_03",
                "UI_Talent_U_Razor_01",
                "UI_Talent_S_Razor_04"
            ],
            "SkillOrder": [
                10201,
                10202,
                10203
            ],
            "Skills": {
                "10201": "Skill_A_04",
                "10202": "Skill_S_Razor_01",
                "10203": "Skill_E_Razor_01"
            },
            "ProudMap": {
                "10201": 2031,
                "10202": 2032,
                "10203": 2039
            },
            "NameTextMapHash": 4160147242,
            "SideIconName": "UI_AvatarIcon_Side_Razor",
            "QualityType": "QUALITY_PURPLE"
        },
        "10000021": {
            "Element": "Fire",
            "Consts": [
                "UI_Talent_S_Ambor_01",
                "UI_Talent_S_Ambor_02",
                "UI_Talent_U_Ambor_02",
                "UI_Talent_S_Ambor_03",
                "UI_Talent_U_Ambor_01",
                "UI_Talent_S_Ambor_04"
            ],
            "SkillOrder": [
                10041,
                10032,
                10017
            ],
            "Skills": {
                "10017": "Skill_E_Ambor",
                "10032": "Skill_S_Ambor_01",
                "10041": "Skill_A_02"
            },
            "ProudMap": {
                "10017": 2139,
                "10032": 2132,
                "10041": 2131
            },
            "NameTextMapHash": 1966438658,
            "SideIconName": "UI_AvatarIcon_Side_Ambor",
            "QualityType": "QUALITY_PURPLE",
            "Costumes": {
                "202101": {
                    "sideIconName": "UI_AvatarIcon_Side_AmborCostumeWic",
                    "icon": "UI_AvatarIcon_AmborCostumeWic",
                    "art": "UI_Costume_AmborCostumeWic",
                    "avatarId": 10000021
                }
            }
        },
        "10000022": {
            "Element": "Wind",
            "Consts": [
                "UI_Talent_S_Venti_01",
                "UI_Talent_S_Venti_02",
                "UI_Talent_U_Venti_02",
                "UI_Talent_S_Venti_03",
                "UI_Talent_U_Venti_01",
                "UI_Talent_S_Venti_04"
            ],
            "SkillOrder": [
                10221,
                10224,
                10225
            ],
            "Skills": {
                "10221": "Skill_A_02",
                "10224": "Skill_S_Venti_01",
                "10225": "Skill_E_Venti_01"
            },
            "ProudMap": {
                "10221": 2231,
                "10224": 2232,
                "10225": 2239
            },
            "NameTextMapHash": 2466140362,
            "SideIconName": "UI_AvatarIcon_Side_Venti",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000023": {
            "Element": "Fire",
            "Consts": [
                "UI_Talent_S_Xiangling_01",
                "UI_Talent_S_Xiangling_02",
                "UI_Talent_U_Xiangling_02",
                "UI_Talent_S_Xiangling_03",
                "UI_Talent_U_Xiangling_01",
                "UI_Talent_S_Xiangling_04"
            ],
            "SkillOrder": [
                10231,
                10232,
                10235
            ],
            "Skills": {
                "10231": "Skill_A_03",
                "10232": "Skill_S_Xiangling_01",
                "10235": "Skill_E_Xiangling_01"
            },
            "ProudMap": {
                "10231": 2331,
                "10232": 2332,
                "10235": 2339
            },
            "NameTextMapHash": 1130996346,
            "SideIconName": "UI_AvatarIcon_Side_Xiangling",
            "QualityType": "QUALITY_PURPLE"
        },
        "10000024": {
            "Element": "Electric",
            "Consts": [
                "UI_Talent_S_Beidou_02",
                "UI_Talent_S_Beidou_01",
                "UI_Talent_U_Beidou_01",
                "UI_Talent_S_Beidou_03",
                "UI_Talent_U_Beidou_02",
                "UI_Talent_S_Beidou_04"
            ],
            "SkillOrder": [
                10241,
                10242,
                10245
            ],
            "Skills": {
                "10241": "Skill_A_04",
                "10242": "Skill_S_Beidou_01",
                "10245": "Skill_E_Beidou_01"
            },
            "ProudMap": {
                "10241": 2431,
                "10242": 2432,
                "10245": 2439
            },
            "NameTextMapHash": 2646367730,
            "SideIconName": "UI_AvatarIcon_Side_Beidou",
            "QualityType": "QUALITY_PURPLE"
        },
        "10000025": {
            "Element": "Water",
            "Consts": [
                "UI_Talent_S_Xingqiu_01",
                "UI_Talent_S_Xingqiu_02",
                "UI_Talent_U_Xingqiu_01",
                "UI_Talent_S_Xingqiu_03",
                "UI_Talent_U_Xingqiu_02",
                "UI_Talent_S_Xingqiu_04"
            ],
            "SkillOrder": [
                10381,
                10382,
                10385
            ],
            "Skills": {
                "10381": "Skill_A_01",
                "10382": "Skill_S_Xingqiu_01",
                "10385": "Skill_E_Xingqiu_01"
            },
            "ProudMap": {
                "10381": 2531,
                "10382": 2532,
                "10385": 2539
            },
            "NameTextMapHash": 4197635682,
            "SideIconName": "UI_AvatarIcon_Side_Xingqiu",
            "QualityType": "QUALITY_PURPLE"
        },
        "10000026": {
            "Element": "Wind",
            "Consts": [
                "UI_Talent_S_Xiao_01",
                "UI_Talent_S_Xiao_02",
                "UI_Talent_U_Xiao_01",
                "UI_Talent_S_Xiao_03",
                "UI_Talent_U_Xiao_02",
                "UI_Talent_S_Xiao_04"
            ],
            "SkillOrder": [
                10261,
                10262,
                10265
            ],
            "Skills": {
                "10261": "Skill_A_03",
                "10262": "Skill_S_Xiao_01",
                "10265": "Skill_E_Xiao_01"
            },
            "ProudMap": {
                "10261": 2631,
                "10262": 2632,
                "10265": 2639
            },
            "NameTextMapHash": 1021947690,
            "SideIconName": "UI_AvatarIcon_Side_Xiao",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000027": {
            "Element": "Rock",
            "Consts": [
                "UI_Talent_S_Ningguang_01",
                "UI_Talent_S_Ningguang_05",
                "UI_Talent_U_Ningguang_02",
                "UI_Talent_S_Ningguang_03",
                "UI_Talent_U_Ningguang_01",
                "UI_Talent_S_Ningguang_04"
            ],
            "SkillOrder": [
                10271,
                10272,
                10274
            ],
            "Skills": {
                "10271": "Skill_A_Catalyst_MD",
                "10272": "Skill_S_Ningguang_01",
                "10274": "Skill_E_Ningguang_01"
            },
            "ProudMap": {
                "10271": 2731,
                "10272": 2732,
                "10274": 2739
            },
            "NameTextMapHash": 4127888970,
            "SideIconName": "UI_AvatarIcon_Side_Ningguang",
            "QualityType": "QUALITY_PURPLE",
            "Costumes": {
                "202701": {
                    "sideIconName": "UI_AvatarIcon_Side_NingguangCostumeFloral",
                    "icon": "UI_AvatarIcon_NingguangCostumeFloral",
                    "art": "UI_Costume_NingguangCostumeFloral",
                    "avatarId": 10000027
                }
            }
        },
        "10000029": {
            "Element": "Fire",
            "Consts": [
                "UI_Talent_S_Klee_01",
                "UI_Talent_S_Klee_02",
                "UI_Talent_U_Klee_01",
                "UI_Talent_S_Klee_03",
                "UI_Talent_U_Klee_02",
                "UI_Talent_S_Klee_04"
            ],
            "SkillOrder": [
                10291,
                10292,
                10295
            ],
            "Skills": {
                "10291": "Skill_A_Catalyst_MD",
                "10292": "Skill_S_Klee_01",
                "10295": "Skill_E_Klee_01"
            },
            "ProudMap": {
                "10291": 2931,
                "10292": 2932,
                "10295": 2939
            },
            "NameTextMapHash": 3339083250,
            "SideIconName": "UI_AvatarIcon_Side_Klee",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000030": {
            "Element": "Rock",
            "Consts": [
                "UI_Talent_S_Zhongli_01",
                "UI_Talent_S_Zhongli_02",
                "UI_Talent_U_Zhongli_01",
                "UI_Talent_S_Zhongli_03",
                "UI_Talent_U_Zhongli_02",
                "UI_Talent_S_Zhongli_04"
            ],
            "SkillOrder": [
                10301,
                10302,
                10303
            ],
            "Skills": {
                "10301": "Skill_A_03",
                "10302": "Skill_S_Zhongli_01",
                "10303": "Skill_E_Zhongli_01"
            },
            "ProudMap": {
                "10301": 3031,
                "10302": 3032,
                "10303": 3039
            },
            "NameTextMapHash": 3862787418,
            "SideIconName": "UI_AvatarIcon_Side_Zhongli",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000031": {
            "Element": "Electric",
            "Consts": [
                "UI_Talent_S_Fischl_01",
                "UI_Talent_S_Fischl_02",
                "UI_Talent_U_Fischl_01",
                "UI_Talent_S_Fischl_03",
                "UI_Talent_U_Fischl_02",
                "UI_Talent_S_Fischl_04"
            ],
            "SkillOrder": [
                10311,
                10312,
                10313
            ],
            "Skills": {
                "10311": "Skill_A_02",
                "10312": "Skill_S_Fischl_01",
                "10313": "Skill_E_Fischl_01"
            },
            "ProudMap": {
                "10311": 3131,
                "10312": 3132,
                "10313": 3139
            },
            "NameTextMapHash": 3277782506,
            "SideIconName": "UI_AvatarIcon_Side_Fischl",
            "QualityType": "QUALITY_PURPLE",
            "Costumes": {
                "203101": {
                    "sideIconName": "UI_AvatarIcon_Side_FischlCostumeHighness",
                    "icon": "UI_AvatarIcon_FischlCostumeHighness",
                    "art": "UI_Costume_FischlCostumeHighness",
                    "avatarId": 10000031
                }
            }
        },
        "10000032": {
            "Element": "Fire",
            "Consts": [
                "UI_Talent_S_Bennett_01",
                "UI_Talent_S_Bennett_02",
                "UI_Talent_U_Bennett_01",
                "UI_Talent_S_Bennett_03",
                "UI_Talent_U_Bennett_02",
                "UI_Talent_S_Bennett_04"
            ],
            "SkillOrder": [
                10321,
                10322,
                10323
            ],
            "Skills": {
                "10321": "Skill_A_01",
                "10322": "Skill_S_Bennett_01",
                "10323": "Skill_E_Bennett_01"
            },
            "ProudMap": {
                "10321": 3231,
                "10322": 3232,
                "10323": 3239
            },
            "NameTextMapHash": 968893378,
            "SideIconName": "UI_AvatarIcon_Side_Bennett",
            "QualityType": "QUALITY_PURPLE"
        },
        "10000033": {
            "Element": "Water",
            "Consts": [
                "UI_Talent_S_Tartaglia_01",
                "UI_Talent_S_Tartaglia_02",
                "UI_Talent_U_Tartaglia_01",
                "UI_Talent_S_Tartaglia_05",
                "UI_Talent_U_Tartaglia_02",
                "UI_Talent_S_Tartaglia_04"
            ],
            "SkillOrder": [
                10331,
                10332,
                10333
            ],
            "Skills": {
                "10331": "Skill_A_02",
                "10332": "Skill_S_Tartaglia_01",
                "10333": "Skill_E_Tartaglia_01"
            },
            "ProudMap": {
                "10331": 3331,
                "10332": 3332,
                "10333": 3339
            },
            "NameTextMapHash": 3847143266,
            "SideIconName": "UI_AvatarIcon_Side_Tartaglia",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000034": {
            "Element": "Rock",
            "Consts": [
                "UI_Talent_S_Noel_01",
                "UI_Talent_S_Noel_02",
                "UI_Talent_U_Noel_01",
                "UI_Talent_S_Noel_03",
                "UI_Talent_U_Noel_02",
                "UI_Talent_S_Noel_04"
            ],
            "SkillOrder": [
                10341,
                10342,
                10343
            ],
            "Skills": {
                "10341": "Skill_A_04",
                "10342": "Skill_S_Noel_01",
                "10343": "Skill_E_Noel_01"
            },
            "ProudMap": {
                "10341": 3431,
                "10342": 3432,
                "10343": 3439
            },
            "NameTextMapHash": 1921418842,
            "SideIconName": "UI_AvatarIcon_Side_Noel",
            "QualityType": "QUALITY_PURPLE"
        },
        "10000035": {
            "Element": "Ice",
            "Consts": [
                "UI_Talent_S_Qiqi_01",
                "UI_Talent_S_Qiqi_02",
                "UI_Talent_U_Qiqi_01",
                "UI_Talent_S_Qiqi_03",
                "UI_Talent_U_Qiqi_02",
                "UI_Talent_S_Qiqi_04"
            ],
            "SkillOrder": [
                10351,
                10352,
                10353
            ],
            "Skills": {
                "10351": "Skill_A_01",
                "10352": "Skill_S_Qiqi_01",
                "10353": "Skill_E_Qiqi_01"
            },
            "ProudMap": {
                "10351": 3531,
                "10352": 3532,
                "10353": 3539
            },
            "NameTextMapHash": 168956722,
            "SideIconName": "UI_AvatarIcon_Side_Qiqi",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000036": {
            "Element": "Ice",
            "Consts": [
                "UI_Talent_S_Chongyun_01",
                "UI_Talent_S_Chongyun_02",
                "UI_Talent_U_Chongyun_01",
                "UI_Talent_S_Chongyun_03",
                "UI_Talent_U_Chongyun_02",
                "UI_Talent_S_Chongyun_04"
            ],
            "SkillOrder": [
                10401,
                10402,
                10403
            ],
            "Skills": {
                "10401": "Skill_A_04",
                "10402": "Skill_S_Chongyun_01",
                "10403": "Skill_E_Chongyun_01"
            },
            "ProudMap": {
                "10401": 3631,
                "10402": 3632,
                "10403": 3639
            },
            "NameTextMapHash": 2876340530,
            "SideIconName": "UI_AvatarIcon_Side_Chongyun",
            "QualityType": "QUALITY_PURPLE"
        },
        "10000037": {
            "Element": "Ice",
            "Consts": [
                "UI_Talent_S_Ganyu_01",
                "UI_Talent_S_Ganyu_02",
                "UI_Talent_U_Ganyu_01",
                "UI_Talent_S_Ganyu_03",
                "UI_Talent_U_Ganyu_02",
                "UI_Talent_S_Ganyu_04"
            ],
            "SkillOrder": [
                10371,
                10372,
                10373
            ],
            "Skills": {
                "10371": "Skill_A_02",
                "10372": "Skill_S_Ganyu_01",
                "10373": "Skill_E_Ganyu_01"
            },
            "ProudMap": {
                "10371": 3731,
                "10372": 3732,
                "10373": 3739
            },
            "NameTextMapHash": 2679781122,
            "SideIconName": "UI_AvatarIcon_Side_Ganyu",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000038": {
            "Element": "Rock",
            "Consts": [
                "UI_Talent_S_Albedo_01",
                "UI_Talent_S_Albedo_02",
                "UI_Talent_U_Albedo_01",
                "UI_Talent_S_Albedo_03",
                "UI_Talent_U_Albedo_02",
                "UI_Talent_S_Albedo_04"
            ],
            "SkillOrder": [
                10386,
                10387,
                10388
            ],
            "Skills": {
                "10386": "Skill_A_01",
                "10387": "Skill_S_Albedo_01",
                "10388": "Skill_E_Albedo_01"
            },
            "ProudMap": {
                "10386": 3831,
                "10387": 3832,
                "10388": 3839
            },
            "NameTextMapHash": 4108620722,
            "SideIconName": "UI_AvatarIcon_Side_Albedo",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000039": {
            "Element": "Ice",
            "Consts": [
                "UI_Talent_S_Diona_01",
                "UI_Talent_S_Diona_02",
                "UI_Talent_U_Diona_01",
                "UI_Talent_S_Diona_03",
                "UI_Talent_U_Diona_02",
                "UI_Talent_S_Diona_04"
            ],
            "SkillOrder": [
                10391,
                10392,
                10395
            ],
            "Skills": {
                "10391": "Skill_A_02",
                "10392": "Skill_S_Diona_01",
                "10395": "Skill_E_Diona_01"
            },
            "ProudMap": {
                "10391": 3931,
                "10392": 3932,
                "10395": 3939
            },
            "NameTextMapHash": 1468367538,
            "SideIconName": "UI_AvatarIcon_Side_Diona",
            "QualityType": "QUALITY_PURPLE"
        },
        "10000041": {
            "Element": "Water",
            "Consts": [
                "UI_Talent_S_Mona_01",
                "UI_Talent_S_Mona_02",
                "UI_Talent_U_Mona_01",
                "UI_Talent_S_Mona_03",
                "UI_Talent_U_Mona_02",
                "UI_Talent_S_Mona_04"
            ],
            "SkillOrder": [
                10411,
                10412,
                10415
            ],
            "Skills": {
                "10411": "Skill_A_Catalyst_MD",
                "10412": "Skill_S_Mona_01",
                "10415": "Skill_E_Mona_01"
            },
            "ProudMap": {
                "10411": 4131,
                "10412": 4132,
                "10415": 4139
            },
            "NameTextMapHash": 1113306282,
            "SideIconName": "UI_AvatarIcon_Side_Mona",
            "QualityType": "QUALITY_ORANGE",
            "Costumes": {
                "204101": {
                    "sideIconName": "UI_AvatarIcon_Side_MonaCostumeWic",
                    "icon": "UI_AvatarIcon_MonaCostumeWic",
                    "art": "UI_Costume_MonaCostumeWic",
                    "avatarId": 10000041
                }
            }
        },
        "10000042": {
            "Element": "Electric",
            "Consts": [
                "UI_Talent_S_Keqing_01",
                "UI_Talent_S_Keqing_02",
                "UI_Talent_U_Keqing_01",
                "UI_Talent_S_Keqing_03",
                "UI_Talent_U_Keqing_02",
                "UI_Talent_S_Keqing_04"
            ],
            "SkillOrder": [
                10421,
                10422,
                10425
            ],
            "Skills": {
                "10421": "Skill_A_01",
                "10422": "Skill_S_Keqing_01",
                "10425": "Skill_E_Keqing_01"
            },
            "ProudMap": {
                "10421": 4231,
                "10422": 4232,
                "10425": 4239
            },
            "NameTextMapHash": 1864015138,
            "SideIconName": "UI_AvatarIcon_Side_Keqing",
            "QualityType": "QUALITY_ORANGE",
            "Costumes": {
                "204201": {
                    "sideIconName": "UI_AvatarIcon_Side_KeqingCostumeFeather",
                    "icon": "UI_AvatarIcon_KeqingCostumeFeather",
                    "art": "UI_Costume_KeqingCostumeFeather",
                    "avatarId": 10000042
                }
            }
        },
        "10000043": {
            "Element": "Wind",
            "Consts": [
                "UI_Talent_S_Sucrose_01",
                "UI_Talent_S_Sucrose_02",
                "UI_Talent_U_Sucrose_01",
                "UI_Talent_S_Sucrose_03",
                "UI_Talent_U_Sucrose_02",
                "UI_Talent_S_Sucrose_04"
            ],
            "SkillOrder": [
                10431,
                10432,
                10435
            ],
            "Skills": {
                "10431": "Skill_A_Catalyst_MD",
                "10432": "Skill_S_Sucrose_01",
                "10435": "Skill_E_Sucrose_01"
            },
            "ProudMap": {
                "10431": 4331,
                "10432": 4332,
                "10435": 4339
            },
            "NameTextMapHash": 1053433018,
            "SideIconName": "UI_AvatarIcon_Side_Sucrose",
            "QualityType": "QUALITY_PURPLE"
        },
        "10000044": {
            "Element": "Fire",
            "Consts": [
                "UI_Talent_S_Xinyan_01",
                "UI_Talent_S_Xinyan_02",
                "UI_Talent_U_Xinyan_01",
                "UI_Talent_S_Xinyan_03",
                "UI_Talent_U_Xinyan_02",
                "UI_Talent_S_Xinyan_04"
            ],
            "SkillOrder": [
                10441,
                10442,
                10443
            ],
            "Skills": {
                "10441": "Skill_A_04",
                "10442": "Skill_S_Xinyan_01",
                "10443": "Skill_E_Xinyan_01"
            },
            "ProudMap": {
                "10441": 4431,
                "10442": 4432,
                "10443": 4439
            },
            "NameTextMapHash": 4273845410,
            "SideIconName": "UI_AvatarIcon_Side_Xinyan",
            "QualityType": "QUALITY_PURPLE"
        },
        "10000045": {
            "Element": "Ice",
            "Consts": [
                "UI_Talent_S_Rosaria_01",
                "UI_Talent_S_Rosaria_02",
                "UI_Talent_U_Rosaria_01",
                "UI_Talent_S_Rosaria_03",
                "UI_Talent_U_Rosaria_02",
                "UI_Talent_S_Rosaria_04"
            ],
            "SkillOrder": [
                10451,
                10452,
                10453
            ],
            "Skills": {
                "10451": "Skill_A_03",
                "10452": "Skill_S_Rosaria_01",
                "10453": "Skill_E_Rosaria_01"
            },
            "ProudMap": {
                "10451": 4531,
                "10452": 4532,
                "10453": 4539
            },
            "NameTextMapHash": 4260733330,
            "SideIconName": "UI_AvatarIcon_Side_Rosaria",
            "QualityType": "QUALITY_PURPLE",
            "Costumes": {
                "204501": {
                    "sideIconName": "UI_AvatarIcon_Side_RosariaCostumeWic",
                    "icon": "UI_AvatarIcon_RosariaCostumeWic",
                    "art": "UI_Costume_RosariaCostumeWic",
                    "avatarId": 10000045
                }
            }
        },
        "10000046": {
            "Element": "Fire",
            "Consts": [
                "UI_Talent_S_Hutao_03",
                "UI_Talent_S_Hutao_01",
                "UI_Talent_U_Hutao_01",
                "UI_Talent_S_Hutao_02",
                "UI_Talent_U_Hutao_02",
                "UI_Talent_S_Hutao_04"
            ],
            "SkillOrder": [
                10461,
                10462,
                10463
            ],
            "Skills": {
                "10461": "Skill_A_03",
                "10462": "Skill_S_Hutao_01",
                "10463": "Skill_E_Hutao_01"
            },
            "ProudMap": {
                "10461": 4631,
                "10462": 4632,
                "10463": 4639
            },
            "NameTextMapHash": 1940919994,
            "SideIconName": "UI_AvatarIcon_Side_Hutao",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000047": {
            "Element": "Wind",
            "Consts": [
                "UI_Talent_S_Kazuha_01",
                "UI_Talent_S_Kazuha_02",
                "UI_Talent_U_Kazuha_01",
                "UI_Talent_S_Kazuha_03",
                "UI_Talent_U_Kazuha_02",
                "UI_Talent_S_Kazuha_04"
            ],
            "SkillOrder": [
                10471,
                10472,
                10475
            ],
            "Skills": {
                "10471": "Skill_A_01",
                "10472": "Skill_S_Kazuha_01",
                "10475": "Skill_E_Kazuha_01"
            },
            "ProudMap": {
                "10471": 4731,
                "10472": 4732,
                "10475": 4739
            },
            "NameTextMapHash": 88505754,
            "SideIconName": "UI_AvatarIcon_Side_Kazuha",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000048": {
            "Element": "Fire",
            "Consts": [
                "UI_Talent_S_Feiyan_01",
                "UI_Talent_S_Feiyan_02",
                "UI_Talent_U_Feiyan_01",
                "UI_Talent_S_Feiyan_03",
                "UI_Talent_U_Feiyan_02",
                "UI_Talent_S_Feiyan_04"
            ],
            "SkillOrder": [
                10481,
                10482,
                10485
            ],
            "Skills": {
                "10481": "Skill_A_Catalyst_MD",
                "10482": "Skill_S_Feiyan_01",
                "10485": "Skill_E_Feiyan_01"
            },
            "ProudMap": {
                "10481": 4831,
                "10482": 4832,
                "10485": 4839
            },
            "NameTextMapHash": 697277554,
            "SideIconName": "UI_AvatarIcon_Side_Feiyan",
            "QualityType": "QUALITY_PURPLE"
        },
        "10000049": {
            "Element": "Fire",
            "Consts": [
                "UI_Talent_S_Yoimiya_01",
                "UI_Talent_S_Yoimiya_02",
                "UI_Talent_U_Yoimiya_01",
                "UI_Talent_S_Yoimiya_03",
                "UI_Talent_U_Yoimiya_02",
                "UI_Talent_S_Yoimiya_04"
            ],
            "SkillOrder": [
                10491,
                10492,
                10495
            ],
            "Skills": {
                "10491": "Skill_A_02",
                "10492": "Skill_S_Yoimiya_01",
                "10495": "Skill_E_Yoimiya_01"
            },
            "ProudMap": {
                "10491": 4931,
                "10492": 4932,
                "10495": 4939
            },
            "NameTextMapHash": 2504399314,
            "SideIconName": "UI_AvatarIcon_Side_Yoimiya",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000050": {
            "Element": "Fire",
            "Consts": [
                "UI_Talent_S_Tohma_01",
                "UI_Talent_S_Tohma_02",
                "UI_Talent_U_Tohma_01",
                "UI_Talent_S_Tohma_03",
                "UI_Talent_U_Tohma_02",
                "UI_Talent_S_Tohma_04"
            ],
            "SkillOrder": [
                10501,
                10502,
                10505
            ],
            "Skills": {
                "10501": "Skill_A_03",
                "10502": "Skill_S_Tohma_01",
                "10505": "Skill_E_Tohma_01"
            },
            "ProudMap": {
                "10501": 5031,
                "10502": 5032,
                "10505": 5039
            },
            "NameTextMapHash": 3555115602,
            "SideIconName": "UI_AvatarIcon_Side_Tohma",
            "QualityType": "QUALITY_PURPLE"
        },
        "10000051": {
            "Element": "Ice",
            "Consts": [
                "UI_Talent_S_Eula_02",
                "UI_Talent_S_Eula_01",
                "UI_Talent_U_Eula_01",
                "UI_Talent_S_Eula_03",
                "UI_Talent_U_Eula_02",
                "UI_Talent_S_Eula_04"
            ],
            "SkillOrder": [
                10511,
                10512,
                10515
            ],
            "Skills": {
                "10511": "Skill_A_04",
                "10512": "Skill_S_Eula_01",
                "10515": "Skill_E_Eula_01"
            },
            "ProudMap": {
                "10511": 5131,
                "10512": 5132,
                "10515": 5139
            },
            "NameTextMapHash": 3717667418,
            "SideIconName": "UI_AvatarIcon_Side_Eula",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000052": {
            "Element": "Electric",
            "Consts": [
                "UI_Talent_S_Shougun_01",
                "UI_Talent_S_Shougun_03",
                "UI_Talent_U_Shougun_02",
                "UI_Talent_S_Shougun_02",
                "UI_Talent_U_Shougun_01",
                "UI_Talent_S_Shougun_04"
            ],
            "SkillOrder": [
                10521,
                10522,
                10525
            ],
            "Skills": {
                "10521": "Skill_A_03",
                "10522": "Skill_S_Shougun_01",
                "10525": "Skill_E_Shougun_01"
            },
            "ProudMap": {
                "10521": 5231,
                "10522": 5232,
                "10525": 5239
            },
            "NameTextMapHash": 3024507506,
            "SideIconName": "UI_AvatarIcon_Side_Shougun",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000053": {
            "Element": "Wind",
            "Consts": [
                "UI_Talent_S_Sayu_01",
                "UI_Talent_S_Sayu_02",
                "UI_Talent_U_Sayu_02",
                "UI_Talent_S_Sayu_03",
                "UI_Talent_U_Sayu_01",
                "UI_Talent_S_Sayu_04"
            ],
            "SkillOrder": [
                10531,
                10532,
                10535
            ],
            "Skills": {
                "10531": "Skill_A_04",
                "10532": "Skill_S_Sayu_01",
                "10535": "Skill_E_Sayu_01"
            },
            "ProudMap": {
                "10531": 5331,
                "10532": 5332,
                "10535": 5339
            },
            "NameTextMapHash": 2388785242,
            "SideIconName": "UI_AvatarIcon_Side_Sayu",
            "QualityType": "QUALITY_PURPLE"
        },
        "10000054": {
            "Element": "Water",
            "Consts": [
                "UI_Talent_S_Kokomi_01",
                "UI_Talent_S_Kokomi_02",
                "UI_Talent_U_Kokomi_02",
                "UI_Talent_S_Kokomi_03",
                "UI_Talent_U_Kokomi_01",
                "UI_Talent_S_Kokomi_04"
            ],
            "SkillOrder": [
                10541,
                10542,
                10545
            ],
            "Skills": {
                "10541": "Skill_A_Catalyst_MD",
                "10542": "Skill_S_Kokomi_01",
                "10545": "Skill_E_Kokomi_01"
            },
            "ProudMap": {
                "10541": 5431,
                "10542": 5432,
                "10545": 5439
            },
            "NameTextMapHash": 3914045794,
            "SideIconName": "UI_AvatarIcon_Side_Kokomi",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000055": {
            "Element": "Rock",
            "Consts": [
                "UI_Talent_S_Gorou_01",
                "UI_Talent_S_Gorou_02",
                "UI_Talent_U_Gorou_01",
                "UI_Talent_S_Gorou_03",
                "UI_Talent_U_Gorou_02",
                "UI_Talent_S_Gorou_04"
            ],
            "SkillOrder": [
                10551,
                10552,
                10555
            ],
            "Skills": {
                "10551": "Skill_A_02",
                "10552": "Skill_S_Gorou_01",
                "10555": "Skill_E_Gorou_01"
            },
            "ProudMap": {
                "10551": 5531,
                "10552": 5532,
                "10555": 5539
            },
            "NameTextMapHash": 3400133546,
            "SideIconName": "UI_AvatarIcon_Side_Gorou",
            "QualityType": "QUALITY_PURPLE"
        },
        "10000056": {
            "Element": "Electric",
            "Consts": [
                "UI_Talent_S_Sara_05",
                "UI_Talent_S_Sara_02",
                "UI_Talent_U_Sara_02",
                "UI_Talent_S_Sara_03",
                "UI_Talent_U_Sara_01",
                "UI_Talent_S_Sara_04"
            ],
            "SkillOrder": [
                10561,
                10562,
                10565
            ],
            "Skills": {
                "10561": "Skill_A_02",
                "10562": "Skill_S_Sara_01",
                "10565": "Skill_E_Sara_01"
            },
            "ProudMap": {
                "10561": 5631,
                "10562": 5632,
                "10565": 5639
            },
            "NameTextMapHash": 1483922610,
            "SideIconName": "UI_AvatarIcon_Side_Sara",
            "QualityType": "QUALITY_PURPLE"
        },
        "10000057": {
            "Element": "Rock",
            "Consts": [
                "UI_Talent_S_Itto_01",
                "UI_Talent_S_Itto_02",
                "UI_Talent_U_Itto_01",
                "UI_Talent_S_Itto_03",
                "UI_Talent_U_Itto_02",
                "UI_Talent_S_Itto_04"
            ],
            "SkillOrder": [
                10571,
                10572,
                10575
            ],
            "Skills": {
                "10571": "Skill_A_04",
                "10572": "Skill_S_Itto_01",
                "10575": "Skill_E_Itto_01"
            },
            "ProudMap": {
                "10571": 5731,
                "10572": 5732,
                "10575": 5739
            },
            "NameTextMapHash": 3068316954,
            "SideIconName": "UI_AvatarIcon_Side_Itto",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000058": {
            "Element": "Electric",
            "Consts": [
                "UI_Talent_S_Yae_01",
                "UI_Talent_S_Yae_02",
                "UI_Talent_U_Yae_01",
                "UI_Talent_S_Yae_03",
                "UI_Talent_U_Yae_02",
                "UI_Talent_S_Yae_04"
            ],
            "SkillOrder": [
                10581,
                10582,
                10585
            ],
            "Skills": {
                "10581": "Skill_A_Catalyst_MD",
                "10582": "Skill_S_Yae_01",
                "10585": "Skill_E_Yae_01"
            },
            "ProudMap": {
                "10581": 5831,
                "10582": 5832,
                "10585": 5839
            },
            "NameTextMapHash": 2713453234,
            "SideIconName": "UI_AvatarIcon_Side_Yae",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000059": {
            "Element": "Wind",
            "Consts": [
                "UI_Talent_S_Heizo_01",
                "UI_Talent_S_Heizo_02",
                "UI_Talent_U_Heizo_01",
                "UI_Talent_S_Heizo_03",
                "UI_Talent_U_Heizo_02",
                "UI_Talent_S_Heizo_04"
            ],
            "SkillOrder": [
                10591,
                10592,
                10595
            ],
            "Skills": {
                "10591": "Skill_A_Catalyst_MD",
                "10592": "Skill_S_Heizo_01",
                "10595": "Skill_E_Heizo_01"
            },
            "ProudMap": {
                "10591": 5931,
                "10592": 5932,
                "10595": 5939
            },
            "NameTextMapHash": 646032090,
            "SideIconName": "UI_AvatarIcon_Side_Heizo",
            "QualityType": "QUALITY_PURPLE"
        },
        "10000060": {
            "Element": "Water",
            "Consts": [
                "UI_Talent_S_Yelan_01",
                "UI_Talent_S_Yelan_02",
                "UI_Talent_U_Yelan_01",
                "UI_Talent_S_Yelan_03",
                "UI_Talent_U_Yelan_02",
                "UI_Talent_S_Yelan_04"
            ],
            "SkillOrder": [
                10606,
                10607,
                10610
            ],
            "Skills": {
                "10606": "Skill_A_02",
                "10607": "Skill_S_Yelan_01",
                "10610": "Skill_E_Yelan_01"
            },
            "ProudMap": {
                "10606": 6031,
                "10607": 6032,
                "10610": 6039
            },
            "NameTextMapHash": 2848374378,
            "SideIconName": "UI_AvatarIcon_Side_Yelan",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000062": {
            "Element": "Ice",
            "Consts": [
                "UI_Talent_S_Aloy_Lock",
                "UI_Talent_S_Aloy_Lock",
                "UI_Talent_S_Aloy_Lock",
                "UI_Talent_S_Aloy_Lock",
                "UI_Talent_S_Aloy_Lock",
                "UI_Talent_S_Aloy_Lock"
            ],
            "SkillOrder": [
                10621,
                10622,
                10625
            ],
            "Skills": {
                "10621": "Skill_A_02",
                "10622": "Skill_S_Aloy_01",
                "10625": "Skill_E_Aloy_01"
            },
            "ProudMap": {
                "10621": 6231,
                "10622": 6232,
                "10625": 6239
            },
            "NameTextMapHash": 3689108098,
            "SideIconName": "UI_AvatarIcon_Side_Aloy",
            "QualityType": "QUALITY_ORANGE_SP"
        },
        "10000063": {
            "Element": "Ice",
            "Consts": [
                "UI_Talent_S_Shenhe_02",
                "UI_Talent_S_Shenhe_01",
                "UI_Talent_U_Shenhe_01",
                "UI_Talent_S_Shenhe_03",
                "UI_Talent_U_Shenhe_02",
                "UI_Talent_S_Shenhe_04"
            ],
            "SkillOrder": [
                10631,
                10632,
                10635
            ],
            "Skills": {
                "10631": "Skill_A_03",
                "10632": "Skill_S_Shenhe_01",
                "10635": "Skill_E_Shenhe_01"
            },
            "ProudMap": {
                "10631": 6331,
                "10632": 6332,
                "10635": 6339
            },
            "NameTextMapHash": 334242634,
            "SideIconName": "UI_AvatarIcon_Side_Shenhe",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000064": {
            "Element": "Rock",
            "Consts": [
                "UI_Talent_S_Yunjin_01",
                "UI_Talent_S_Yunjin_02",
                "UI_Talent_U_Yunjin_01",
                "UI_Talent_S_Yunjin_03",
                "UI_Talent_U_Yunjin_02",
                "UI_Talent_S_Yunjin_04"
            ],
            "SkillOrder": [
                10641,
                10642,
                10643
            ],
            "Skills": {
                "10641": "Skill_A_03",
                "10642": "Skill_S_Yunjin_01",
                "10643": "Skill_E_Yunjin_01"
            },
            "ProudMap": {
                "10641": 6431,
                "10642": 6432,
                "10643": 6439
            },
            "NameTextMapHash": 655825874,
            "SideIconName": "UI_AvatarIcon_Side_Yunjin",
            "QualityType": "QUALITY_PURPLE"
        },
        "10000065": {
            "Element": "Electric",
            "Consts": [
                "UI_Talent_S_Shinobu_01",
                "UI_Talent_S_Shinobu_02",
                "UI_Talent_U_Shinobu_01",
                "UI_Talent_S_Shinobu_03",
                "UI_Talent_U_Shinobu_02",
                "UI_Talent_S_Shinobu_04"
            ],
            "SkillOrder": [
                10651,
                10652,
                10655
            ],
            "Skills": {
                "10651": "Skill_A_01",
                "10652": "Skill_S_Shinobu_01",
                "10655": "Skill_E_Shinobu_01"
            },
            "ProudMap": {
                "10651": 6531,
                "10652": 6532,
                "10655": 6539
            },
            "NameTextMapHash": 1940821986,
            "SideIconName": "UI_AvatarIcon_Side_Shinobu",
            "QualityType": "QUALITY_PURPLE"
        },
        "10000066": {
            "Element": "Water",
            "Consts": [
                "UI_Talent_S_Ayato_01",
                "UI_Talent_S_Ayato_02",
                "UI_Talent_U_Ayato_02",
                "UI_Talent_S_Ayato_03",
                "UI_Talent_U_Ayato_01",
                "UI_Talent_S_Ayato_04"
            ],
            "SkillOrder": [
                10661,
                10662,
                10665
            ],
            "Skills": {
                "10661": "Skill_A_01",
                "10662": "Skill_S_Ayato_01",
                "10665": "Skill_E_Ayato_01"
            },
            "ProudMap": {
                "10661": 6631,
                "10662": 6632,
                "10665": 6639
            },
            "NameTextMapHash": 1588620330,
            "SideIconName": "UI_AvatarIcon_Side_Ayato",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000067": {
            "Element": "Grass",
            "Consts": [
                "UI_Talent_S_Collei_01",
                "UI_Talent_S_Collei_02",
                "UI_Talent_U_Collei_02",
                "UI_Talent_S_Collei_03",
                "UI_Talent_U_Collei_01",
                "UI_Talent_S_Collei_04"
            ],
            "SkillOrder": [
                10671,
                10672,
                10675
            ],
            "Skills": {
                "10671": "Skill_A_02",
                "10672": "Skill_S_Collei_01",
                "10675": "Skill_E_Collei_01"
            },
            "ProudMap": {
                "10671": 6731,
                "10672": 6732,
                "10675": 6739
            },
            "NameTextMapHash": 2948362178,
            "SideIconName": "UI_AvatarIcon_Side_Collei",
            "QualityType": "QUALITY_PURPLE"
        },
        "10000068": {
            "Element": "Electric",
            "Consts": [
                "UI_Talent_S_Dori_01",
                "UI_Talent_S_Dori_02",
                "UI_Talent_U_Dori_02",
                "UI_Talent_S_Dori_03",
                "UI_Talent_U_Dori_01",
                "UI_Talent_S_Dori_04"
            ],
            "SkillOrder": [
                10681,
                10682,
                10685
            ],
            "Skills": {
                "10681": "Skill_A_04",
                "10682": "Skill_S_Dori_01",
                "10685": "Skill_E_Dori_01"
            },
            "ProudMap": {
                "10681": 6831,
                "10682": 6832,
                "10685": 6839
            },
            "NameTextMapHash": 388272194,
            "SideIconName": "UI_AvatarIcon_Side_Dori",
            "QualityType": "QUALITY_PURPLE"
        },
        "10000069": {
            "Element": "Grass",
            "Consts": [
                "UI_Talent_S_Tighnari_01",
                "UI_Talent_S_Tighnari_02",
                "UI_Talent_U_Tighnari_01",
                "UI_Talent_S_Tighnari_03",
                "UI_Talent_U_Tighnari_02",
                "UI_Talent_S_Tighnari_04"
            ],
            "SkillOrder": [
                10691,
                10692,
                10695
            ],
            "Skills": {
                "10691": "Skill_A_02",
                "10692": "Skill_S_Tighnari_01",
                "10695": "Skill_E_Tighnari_01"
            },
            "ProudMap": {
                "10691": 6931,
                "10692": 6932,
                "10695": 6939
            },
            "NameTextMapHash": 2506955778,
            "SideIconName": "UI_AvatarIcon_Side_Tighnari",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000070": {
            "Element": "Water",
            "Consts": [
                "UI_Talent_S_Nilou_01",
                "UI_Talent_S_Nilou_02",
                "UI_Talent_U_Nilou_01",
                "UI_Talent_S_Nilou_03",
                "UI_Talent_U_Nilou_02",
                "UI_Talent_S_Nilou_04"
            ],
            "SkillOrder": [
                10701,
                10702,
                10705
            ],
            "Skills": {
                "10701": "Skill_A_01",
                "10702": "Skill_S_Nilou_01",
                "10705": "Skill_E_Nilou_01"
            },
            "ProudMap": {
                "10701": 7031,
                "10702": 7032,
                "10705": 7039
            },
            "NameTextMapHash": 3850149970,
            "SideIconName": "UI_AvatarIcon_Side_Nilou",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000071": {
            "Element": "Electric",
            "Consts": [
                "UI_Talent_S_Cyno_01",
                "UI_Talent_S_Cyno_02",
                "UI_Talent_U_Cyno_01",
                "UI_Talent_S_Cyno_03",
                "UI_Talent_U_Cyno_02",
                "UI_Talent_S_Cyno_04"
            ],
            "SkillOrder": [
                10711,
                10712,
                10715
            ],
            "Skills": {
                "10711": "Skill_A_03",
                "10712": "Skill_S_Cyno_01",
                "10715": "Skill_E_Cyno_01"
            },
            "ProudMap": {
                "10711": 7131,
                "10712": 7132,
                "10715": 7139
            },
            "NameTextMapHash": 1049891906,
            "SideIconName": "UI_AvatarIcon_Side_Cyno",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000072": {
            "Element": "Water",
            "Consts": [
                "UI_Talent_S_Candace_01",
                "UI_Talent_S_Candace_02",
                "UI_Talent_U_Candace_01",
                "UI_Talent_S_Candace_03",
                "UI_Talent_U_Candace_02",
                "UI_Talent_S_Candace_04"
            ],
            "SkillOrder": [
                10721,
                10722,
                10725
            ],
            "Skills": {
                "10721": "Skill_A_03",
                "10722": "Skill_S_Candace_01",
                "10725": "Skill_E_Candace_01"
            },
            "ProudMap": {
                "10721": 7231,
                "10722": 7232,
                "10725": 7239
            },
            "NameTextMapHash": 3092975658,
            "SideIconName": "UI_AvatarIcon_Side_Candace",
            "QualityType": "QUALITY_PURPLE"
        },
        "10000073": {
            "Element": "Grass",
            "Consts": [
                "UI_Talent_S_Nahida_01",
                "UI_Talent_S_Nahida_02",
                "UI_Talent_U_Nahida_01",
                "UI_Talent_S_Nahida_03",
                "UI_Talent_U_Nahida_02",
                "UI_Talent_S_Nahida_04"
            ],
            "SkillOrder": [
                10731,
                10732,
                10735
            ],
            "Skills": {
                "10731": "Skill_A_Catalyst_MD",
                "10732": "Skill_S_Nahida_01",
                "10735": "Skill_E_Nahida_01"
            },
            "ProudMap": {
                "10731": 7331,
                "10732": 7332,
                "10735": 7339
            },
            "NameTextMapHash": 712501082,
            "SideIconName": "UI_AvatarIcon_Side_Nahida",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000074": {
            "Element": "Ice",
            "Consts": [
                "UI_Talent_S_Layla_01",
                "UI_Talent_S_Layla_02",
                "UI_Talent_U_Layla_01",
                "UI_Talent_S_Layla_03",
                "UI_Talent_U_Layla_02",
                "UI_Talent_S_Layla_04"
            ],
            "SkillOrder": [
                10741,
                10742,
                10745
            ],
            "Skills": {
                "10741": "Skill_A_01",
                "10742": "Skill_S_Layla_01",
                "10745": "Skill_E_Layla_01"
            },
            "ProudMap": {
                "10741": 7431,
                "10742": 7432,
                "10745": 7439
            },
            "NameTextMapHash": 2889777514,
            "SideIconName": "UI_AvatarIcon_Side_Layla",
            "QualityType": "QUALITY_PURPLE"
        },
        "10000075": {
            "Element": "Wind",
            "Consts": [
                "UI_Talent_S_Wanderer_01",
                "UI_Talent_S_Wanderer_02",
                "UI_Talent_U_Wanderer_02",
                "UI_Talent_S_Wanderer_03",
                "UI_Talent_U_Wanderer_01",
                "UI_Talent_S_Wanderer_04"
            ],
            "SkillOrder": [
                10751,
                10752,
                10755
            ],
            "Skills": {
                "10751": "Skill_A_Catalyst_MD",
                "10752": "Skill_S_Wanderer_01",
                "10755": "Skill_E_Wanderer_01"
            },
            "ProudMap": {
                "10751": 7531,
                "10752": 7532,
                "10755": 7539
            },
            "NameTextMapHash": 3230559562,
            "SideIconName": "UI_AvatarIcon_Side_Wanderer",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000076": {
            "Element": "Wind",
            "Consts": [
                "UI_Talent_S_Faruzan_01",
                "UI_Talent_S_Faruzan_02",
                "UI_Talent_U_Faruzan_01",
                "UI_Talent_S_Faruzan_03",
                "UI_Talent_U_Faruzan_02",
                "UI_Talent_S_Faruzan_04"
            ],
            "SkillOrder": [
                10761,
                10762,
                10765
            ],
            "Skills": {
                "10761": "Skill_A_02",
                "10762": "Skill_S_Faruzan_01",
                "10765": "Skill_E_Faruzan_01"
            },
            "ProudMap": {
                "10761": 7631,
                "10762": 7632,
                "10765": 7639
            },
            "NameTextMapHash": 2387711994,
            "SideIconName": "UI_AvatarIcon_Side_Faruzan",
            "QualityType": "QUALITY_PURPLE"
        },
        "10000077": {
            "Element": "Grass",
            "Consts": [
                "UI_Talent_S_Yaoyao_01",
                "UI_Talent_S_Yaoyao_02",
                "UI_Talent_U_Yaoyao_01",
                "UI_Talent_S_Yaoyao_03",
                "UI_Talent_U_Yaoyao_02",
                "UI_Talent_S_Yaoyao_04"
            ],
            "SkillOrder": [
                10771,
                10772,
                10775
            ],
            "Skills": {
                "10771": "Skill_A_03",
                "10772": "Skill_S_Yaoyao_01",
                "10775": "Skill_E_Yaoyao_01"
            },
            "ProudMap": {
                "10771": 7731,
                "10772": 7732,
                "10775": 7739
            },
            "NameTextMapHash": 1732418482,
            "SideIconName": "UI_AvatarIcon_Side_Yaoyao",
            "QualityType": "QUALITY_PURPLE"
        },
        "10000078": {
            "Element": "Grass",
            "Consts": [
                "UI_Talent_S_Alhatham_02",
                "UI_Talent_S_Alhatham_01",
                "UI_Talent_U_Alhatham_01",
                "UI_Talent_S_Alhatham_03",
                "UI_Talent_U_Alhatham_02",
                "UI_Talent_S_Alhatham_04"
            ],
            "SkillOrder": [
                10781,
                10782,
                10785
            ],
            "Skills": {
                "10781": "Skill_A_01",
                "10782": "Skill_S_Alhatham_01",
                "10785": "Skill_E_Alhatham_01"
            },
            "ProudMap": {
                "10781": 7831,
                "10782": 7832,
                "10785": 7839
            },
            "NameTextMapHash": 4002157418,
            "SideIconName": "UI_AvatarIcon_Side_Alhatham",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000079": {
            "Element": "Fire",
            "Consts": [
                "UI_Talent_S_Dehya_01",
                "UI_Talent_S_Dehya_02",
                "UI_Talent_U_Dehya_01",
                "UI_Talent_S_Dehya_03",
                "UI_Talent_U_Dehya_02",
                "UI_Talent_S_Dehya_04"
            ],
            "SkillOrder": [
                10791,
                10792,
                10795
            ],
            "Skills": {
                "10791": "Skill_A_04",
                "10792": "Skill_S_Dehya_01",
                "10795": "Skill_E_Dehya_01"
            },
            "ProudMap": {
                "10791": 7931,
                "10792": 7932,
                "10795": 7939
            },
            "NameTextMapHash": 2360533154,
            "SideIconName": "UI_AvatarIcon_Side_Dehya",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000080": {
            "Element": "Ice",
            "Consts": [
                "UI_Talent_S_Mika_01",
                "UI_Talent_S_Mika_02",
                "UI_Talent_U_Mika_01",
                "UI_Talent_S_Mika_03",
                "UI_Talent_U_Mika_02",
                "UI_Talent_S_Mika_04"
            ],
            "SkillOrder": [
                10801,
                10802,
                10805
            ],
            "Skills": {
                "10801": "Skill_A_03",
                "10802": "Skill_S_Mika_01",
                "10805": "Skill_E_Mika_01"
            },
            "ProudMap": {
                "10801": 8031,
                "10802": 8032,
                "10805": 8039
            },
            "NameTextMapHash": 231911858,
            "SideIconName": "UI_AvatarIcon_Side_Mika",
            "QualityType": "QUALITY_PURPLE"
        },
        "10000005-501": {
            "Element": "None",
            "Consts": [
                "None",
                "None",
                "None",
                "None",
                "None",
                "None"
            ],
            "SkillOrder": [
                100540,
                10067,
                10068
            ],
            "Skills": {
                "10067": "None",
                "10068": "None",
                "100540": "Skill_A_01"
            },
            "NameTextMapHash": 3816664530,
            "ProudMap": {
                "10067": 732,
                "10068": 739,
                "100540": 731
            },
            "SideIconName": "UI_AvatarIcon_Side_PlayerBoy",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000005-502": {},
        "10000005-503": {},
        "10000005-504": {
            "Element": "Wind",
            "Consts": [
                "UI_Talent_S_PlayerWind_01",
                "UI_Talent_S_PlayerWind_02",
                "UI_Talent_U_PlayerWind_02",
                "UI_Talent_S_PlayerWind_03",
                "UI_Talent_U_PlayerWind_01",
                "UI_Talent_S_PlayerWind_04"
            ],
            "SkillOrder": [
                100543,
                10067,
                10068
            ],
            "Skills": {
                "10067": "Skill_S_PlayerWind_01",
                "10068": "Skill_E_PlayerWind_01",
                "100543": "Skill_A_01"
            },
            "NameTextMapHash": 1533656818,
            "ProudMap": {
                "10067": 732,
                "10068": 739,
                "100543": 730
            },
            "SideIconName": "UI_AvatarIcon_Side_PlayerBoy",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000005-505": {},
        "10000005-506": {
            "Element": "Rock",
            "Consts": [
                "UI_Talent_S_PlayerRock_01",
                "UI_Talent_S_PlayerRock_02",
                "UI_Talent_U_PlayerRock_02",
                "UI_Talent_S_PlayerRock_03",
                "UI_Talent_U_PlayerRock_01",
                "UI_Talent_S_PlayerRock_04"
            ],
            "SkillOrder": [
                100545,
                10077,
                10078
            ],
            "Skills": {
                "10077": "Skill_S_PlayerRock_01",
                "10078": "Skill_E_PlayerRock_01",
                "100545": "Skill_A_01"
            },
            "NameTextMapHash": 1533656818,
            "ProudMap": {
                "10077": 932,
                "10078": 939,
                "100545": 730
            },
            "SideIconName": "UI_AvatarIcon_Side_PlayerBoy",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000005-507": {
            "Element": "Electric",
            "Consts": [
                "UI_Talent_S_PlayerElectric_01",
                "UI_Talent_S_PlayerElectric_02",
                "UI_Talent_U_PlayerElectric_01",
                "UI_Talent_S_PlayerElectric_03",
                "UI_Talent_U_PlayerElectric_02",
                "UI_Talent_S_PlayerElectric_04"
            ],
            "SkillOrder": [
                100546,
                10602,
                10605
            ],
            "Skills": {
                "10602": "Skill_S_PlayerElectric_01",
                "10605": "Skill_E_PlayerElectric_01",
                "100546": "Skill_A_01"
            },
            "NameTextMapHash": 1533656818,
            "ProudMap": {
                "10602": 1032,
                "10605": 1039,
                "100546": 1030
            },
            "SideIconName": "UI_AvatarIcon_Side_PlayerBoy",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000005-508": {
            "Element": "Grass",
            "Consts": [
                "UI_Talent_S_PlayerGrass_01",
                "UI_Talent_S_PlayerGrass_02",
                "UI_Talent_S_PlayerGrass_03",
                "UI_Talent_S_PlayerGrass_04",
                "UI_Talent_S_PlayerGrass_05",
                "UI_Talent_S_PlayerGrass_06"
            ],
            "SkillOrder": [
                100547,
                10117,
                10118
            ],
            "Skills": {
                "10117": "Skill_E_PlayerGrass_01",
                "10118": "Skill_S_PlayerGrass_01",
                "100547": "Skill_A_01"
            },
            "NameTextMapHash": 1533656818,
            "ProudMap": {
                "10117": 1132,
                "10118": 1139,
                "100547": 1130
            },
            "SideIconName": "UI_AvatarIcon_Side_PlayerBoy",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000007-701": {
            "Element": "None",
            "Consts": [
                "None",
                "None",
                "None",
                "None",
                "None",
                "None"
            ],
            "SkillOrder": [
                100550,
                10067,
                10068
            ],
            "Skills": {
                "10067": "None",
                "10068": "None",
                "100550": "Skill_A_01"
            },
            "NameTextMapHash": 3816664530,
            "ProudMap": {
                "10067": 732,
                "10068": 739,
                "100550": 731
            },
            "SideIconName": "UI_AvatarIcon_Side_PlayerGirl",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000007-702": {},
        "10000007-703": {},
        "10000007-704": {
            "Element": "Wind",
            "Consts": [
                "UI_Talent_S_PlayerWind_01",
                "UI_Talent_S_PlayerWind_02",
                "UI_Talent_U_PlayerWind_02",
                "UI_Talent_S_PlayerWind_03",
                "UI_Talent_U_PlayerWind_01",
                "UI_Talent_S_PlayerWind_04"
            ],
            "SkillOrder": [
                100553,
                10067,
                10068
            ],
            "Skills": {
                "10067": "Skill_S_PlayerWind_01",
                "10068": "Skill_E_PlayerWind_01",
                "100553": "Skill_A_01"
            },
            "NameTextMapHash": 3816664530,
            "ProudMap": {
                "10067": 732,
                "10068": 739,
                "100553": 731
            },
            "SideIconName": "UI_AvatarIcon_Side_PlayerGirl",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000007-705": {},
        "10000007-706": {
            "Element": "Rock",
            "Consts": [
                "UI_Talent_S_PlayerRock_01",
                "UI_Talent_S_PlayerRock_02",
                "UI_Talent_U_PlayerRock_02",
                "UI_Talent_S_PlayerRock_03",
                "UI_Talent_U_PlayerRock_01",
                "UI_Talent_S_PlayerRock_04"
            ],
            "SkillOrder": [
                100555,
                10077,
                10078
            ],
            "Skills": {
                "10077": "Skill_S_PlayerRock_01",
                "10078": "Skill_E_PlayerRock_01",
                "100555": "Skill_A_01"
            },
            "NameTextMapHash": 3816664530,
            "ProudMap": {
                "10077": 932,
                "10078": 939,
                "100555": 731
            },
            "SideIconName": "UI_AvatarIcon_Side_PlayerGirl",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000007-707": {
            "Element": "Electric",
            "Consts": [
                "UI_Talent_S_PlayerElectric_01",
                "UI_Talent_S_PlayerElectric_02",
                "UI_Talent_U_PlayerElectric_01",
                "UI_Talent_S_PlayerElectric_03",
                "UI_Talent_U_PlayerElectric_02",
                "UI_Talent_S_PlayerElectric_04"
            ],
            "SkillOrder": [
                100556,
                10602,
                10605
            ],
            "Skills": {
                "10602": "Skill_S_PlayerElectric_01",
                "10605": "Skill_E_PlayerElectric_01",
                "100556": "Skill_A_01"
            },
            "NameTextMapHash": 3816664530,
            "ProudMap": {
                "10602": 1032,
                "10605": 1039,
                "100556": 1031
            },
            "SideIconName": "UI_AvatarIcon_Side_PlayerGirl",
            "QualityType": "QUALITY_ORANGE"
        },
        "10000007-708": {
            "Element": "Grass",
            "Consts": [
                "UI_Talent_S_PlayerGrass_01",
                "UI_Talent_S_PlayerGrass_02",
                "UI_Talent_S_PlayerGrass_03",
                "UI_Talent_S_PlayerGrass_04",
                "UI_Talent_S_PlayerGrass_05",
                "UI_Talent_S_PlayerGrass_06"
            ],
            "SkillOrder": [
                100557,
                10117,
                10118
            ],
            "Skills": {
                "10117": "Skill_E_PlayerGrass_01",
                "10118": "Skill_S_PlayerGrass_01",
                "100557": "Skill_A_01"
            },
            "NameTextMapHash": 3816664530,
            "ProudMap": {
                "10117": 1132,
                "10118": 1139,
                "100557": 1131
            },
            "SideIconName": "UI_AvatarIcon_Side_PlayerGirl",
            "QualityType": "QUALITY_ORANGE"
        }
    }"""

class Ui_ArtifacterImageGenerator(object):
    def setupUi(self, ArtifacterImageGenerator):
        if not ArtifacterImageGenerator.objectName():
            ArtifacterImageGenerator.setObjectName("ArtifacterImageGenerator")
        ArtifacterImageGenerator.resize(937, 780)
        font = QFont()
        font.setFamilies(["Arial"])
        ArtifacterImageGenerator.setFont(font)
        ArtifacterImageGenerator.setStyleSheet("QWidget{color: Red;background: #2e2e2d;}")
        self.TitleImage = QLabel(ArtifacterImageGenerator)
        self.TitleImage.setObjectName("TitleImage")
        self.TitleImage.setGeometry(QRect(20, 20, 90, 90))
        self.TitleImage.setStyleSheet("QLabel{background: #1a1a1a;}")
        self.TitleImage.setAlignment(Qt.AlignCenter)
        self.TitleImage.setPixmap(QPixmap(QSize(80, 80)).fromImage(QImage.fromData(QByteArray.fromBase64(b''))))
        self.Artifacterlist = QListView(ArtifacterImageGenerator)
        self.Artifacterlist.setIconSize(QSize(32, 32))
        self.Artifacterlist.setObjectName("Artifacterlist")
        self.Artifacterlist.setGeometry(QRect(20, 240, 441, 211))
        font1 = QFont()
        font1.setFamilies(["Arial"])
        font1.setPointSize(16)
        font4 = QFont()
        font4.setFamilies(["Arial"])
        font4.setPointSize(20)
        self.Artifacterlist.setFont(font4)
        self.Artifacterlist.setStyleSheet(u"QListView{background: #1a1a1a; color: White;} QListView::item:selected{background: #4f4f4f;color: Red;}")
        self.Artifacterlist.setAutoScroll(False)
        self.Artifacterlist.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.Artifacterlist.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.Artifacterlist.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.ArtifacterModel = QStandardItemModel(ArtifacterImageGenerator)
        self.CheckGroups = QButtonGroup(ArtifacterImageGenerator)
        self.Check_HP = QCheckBox(ArtifacterImageGenerator)
        self.Check_HP.setObjectName("Check_HP")
        self.Check_HP.setGeometry(QRect(40, 550, 131, 41))
        font2 = QFont()
        font2.setFamilies(["Arial"])
        font2.setPointSize(13)
        self.Check_HP.setFont(font2)
        self.Check_HP.setStyleSheet("QCheckBox{background: #1a1a1a;}")
        self.Check_Attack = QCheckBox(ArtifacterImageGenerator)
        self.Check_Attack.setObjectName("Check_Attack")
        self.Check_Attack.setGeometry(QRect(40, 600, 131, 41))
        self.Check_Attack.setFont(font2)
        self.Check_Attack.setStyleSheet("QCheckBox{background: #1a1a1a;}")
        self.Check_Def = QCheckBox(ArtifacterImageGenerator)
        self.Check_Def.setObjectName("Check_Def")
        self.Check_Def.setGeometry(QRect(40, 650, 131, 41))
        self.Check_Def.setFont(font2)
        self.Check_Def.setStyleSheet("QCheckBox{background: #1a1a1a;}")
        self.Check_Ch = QCheckBox(ArtifacterImageGenerator)
        self.Check_Ch.setObjectName("Check_Ch")
        self.Check_Ch.setGeometry(QRect(180, 550, 191, 41))
        self.Check_Ch.setFont(font2)
        self.Check_Ch.setStyleSheet("QCheckBox{background: #1a1a1a;}")
        self.Check_EM = QCheckBox(ArtifacterImageGenerator)
        self.Check_EM.setObjectName("Check_EM")
        self.Check_EM.setGeometry(QRect(180, 600, 191, 41))
        self.Check_EM.setFont(font2)
        self.Check_EM.setStyleSheet("QCheckBox{background: #1a1a1a;}")
        self.Create = QPushButton(ArtifacterImageGenerator)
        self.Create.setObjectName("Create")
        self.Create.setGeometry(QRect(550, 630, 211, 81))
        font3 = QFont()
        font3.setFamilies(["Arial"])
        font3.setPointSize(30)
        self.Create.setFont(font3)
        self.Create.setStyleSheet("QPushButton:checked{background: #080808;}\n"
"QPushButton{color: Red; background: #1a1a1a;}")
        self.Create.clicked.connect(self.CreateCard)
        self.Title = QLabel(ArtifacterImageGenerator)
        self.Title.setObjectName("Title")
        self.Title.setGeometry(QRect(170, 40, 641, 51))
        self.Title.setFont(font3)
        self.Title.setStyleSheet("QLabel{background: #1a1a1a;color: Red;}")
        self.Title.setAlignment(Qt.AlignCenter)
        self.UIDs = QLineEdit(ArtifacterImageGenerator)
        self.UIDs.setObjectName("UIDs")
        self.UIDs.setGeometry(QRect(130, 120, 331, 51))
        self.UIDs.setFont(font4)
        self.UIDs.setStyleSheet("QLineEdit{background: #1a1a1a;color: Red;}")
        self.UIDs.setAlignment(Qt.AlignCenter)
        self.UIDs.setPlaceholderText('UID入力場所')
        self.UIDs.textChanged.connect(self.CheckUID)
        self.UserName = QLabel(ArtifacterImageGenerator)
        self.UserName.setObjectName("UserName")
        self.UserName.setGeometry(QRect(20, 190, 261, 41))
        self.UserName.setFont(font2)
        self.UserName.setStyleSheet("QLabel{background: #1a1a1a;}")
        self.UserName.setAlignment(Qt.AlignCenter)
        self.UserLevel = QLabel(ArtifacterImageGenerator)
        self.UserLevel.setObjectName(u"UserLevel")
        self.UserLevel.setGeometry(QRect(290, 190, 171, 41))
        self.UserLevel.setAlignment(Qt.AlignCenter)
        font5 = QFont()
        font5.setFamilies([u"Arial"])
        font5.setPointSize(15)
        self.UserLevel.setFont(font5)
        self.UserLevel.setStyleSheet("QLabel{background: #1a1a1a;}")
        self.CalcLabel = QLabel(ArtifacterImageGenerator)
        self.CalcLabel.setObjectName(u"CalcLabel")
        self.CalcLabel.setGeometry(QRect(30, 470, 201, 51))
        self.CalcLabel.setFont(font4)
        self.CalcLabel.setStyleSheet("QLabel{background: #1a1a1a;}")
        self.CalcLabel.setAlignment(Qt.AlignCenter)
        self.CalcLabel.setText('計算方式')
        self.frame1 = QFrame(ArtifacterImageGenerator)
        self.frame1.setObjectName(u"frame1")
        self.frame1.setGeometry(QRect(10, 470, 20, 241))
        self.frame1.setFrameShape(QFrame.VLine)
        self.frame1.setFrameShadow(QFrame.Sunken)
        self.frame2 = QFrame(ArtifacterImageGenerator)
        self.frame2.setObjectName("frame2")
        self.frame2.setGeometry(QRect(240, 470, 141, 21))
        self.frame2.setFrameShape(QFrame.HLine)
        self.frame2.setFrameShadow(QFrame.Sunken)
        self.frame3 = QFrame(ArtifacterImageGenerator)
        self.frame3.setObjectName("frame3")
        self.frame3.setGeometry(QRect(390, 470, 20, 241))
        self.frame3.setFrameShape(QFrame.VLine)
        self.frame3.setFrameShadow(QFrame.Sunken)
        self.frame4 = QFrame(ArtifacterImageGenerator)
        self.frame4.setObjectName("frame4")
        self.frame4.setGeometry(QRect(10, 710, 391, 20))
        self.frame4.setFrameShape(QFrame.HLine)
        self.frame4.setFrameShadow(QFrame.Sunken)
        self.UIDLabel = QLabel(ArtifacterImageGenerator)
        self.UIDLabel.setObjectName("UIDLabel")
        self.UIDLabel.setGeometry(QRect(20, 120, 101, 51))
        self.UIDLabel.setFont(font4)
        self.UIDLabel.setStyleSheet("QLabel{background: #1a1a1a;}")
        self.UIDLabel.setAlignment(Qt.AlignCenter)
        self.UIDLabel.setText('UID:')
        self.Preview = QLabel(ArtifacterImageGenerator)
        self.Preview.setObjectName("Preview")
        self.Preview.setGeometry(QRect(480, 140, 441, 291))
        self.Preview.setAlignment(Qt.AlignCenter)
        self.Preview.setText('プレビュー')
        self.Preview.setStyleSheet(u"QLabel{background: #1a1a1a;}")
        self.ArtifacterprogressBar = QProgressBar(ArtifacterImageGenerator)
        self.ArtifacterprogressBar.setObjectName("ArtifacterprogressBar")
        self.ArtifacterprogressBar.setGeometry(QRect(10, 730, 921, 41))
        self.ArtifacterprogressBar.setValue(0)
        self.ArtifacterprogressBar.setTextVisible(False)
        self.SavePathLabel = QLabel(ArtifacterImageGenerator)
        self.SavePathLabel.setObjectName(u"SavePathLabel")
        self.SavePathLabel.setGeometry(QRect(440, 550, 121, 51))
        self.SavePathLabel.setFont(font5)
        self.SavePathLabel.setStyleSheet(u"QLabel{background: #1a1a1a;}")
        self.SavePathLabel.setAlignment(Qt.AlignCenter)
        self.SavePathLabel.setText('保存場所:')
        self.SavePath = QLineEdit(ArtifacterImageGenerator)
        self.SavePath.setObjectName(u"SavePath")
        self.SavePath.setGeometry(QRect(570, 550, 281, 51))
        self.SavePath.setFont(font5)
        self.SavePath.setStyleSheet(u"QLineEdit{background: #1a1a1a;color: Red;}")
        self.SavePath.setAlignment(Qt.AlignCenter)
        self.SavePath.setPlaceholderText('保存場所')
        self.SaveFileLabel = QLabel(ArtifacterImageGenerator)
        self.SaveFileLabel.setObjectName(u"SaveFileLabel")
        self.SaveFileLabel.setGeometry(QRect(440, 470, 121, 51))
        self.SaveFileLabel.setFont(font5)
        self.SaveFileLabel.setStyleSheet(u"QLabel{background: #1a1a1a;}")
        self.SaveFileLabel.setAlignment(Qt.AlignCenter)
        self.SaveFileLabel.setText('ファイル名:')
        self.SaveFile = QLineEdit(ArtifacterImageGenerator)
        self.SaveFile.setObjectName(u"SaveFile")
        self.SaveFile.setGeometry(QRect(570, 470, 281, 51))
        self.SaveFile.setFont(font5)
        self.SaveFile.setStyleSheet(u"QLineEdit{background: #1a1a1a;color: Red;}")
        self.SaveFile.setAlignment(Qt.AlignCenter)
        self.SaveFile.setPlaceholderText('ファイル名')
        self.UIDRefresh = QPushButton(ArtifacterImageGenerator)
        self.UIDRefresh.setObjectName(u"UIDRefresh")
        self.UIDRefresh.setGeometry(QRect(480, 120, 51, 51))
        self.UIDRefresh.setStyleSheet("QPushButton:checked{background: #080808;} QPushButton{color: Red; background: #1a1a1a;}")
        refICon = QPixmap()
        refICon.loadFromData(QByteArray.fromBase64(b''))
        self.UIDRefresh.setIcon(QIcon(refICon.scaled(128, 128, Qt.KeepAspectRatio, Qt.FastTransformation)))
        self.UIDRefresh.setIconSize(QSize(51, 51))
        self.UIDRefresh.clicked.connect(self.CheckUID)
        self.HELP = QPushButton(ArtifacterImageGenerator)
        self.HELP.setObjectName(u"HELP")
        self.HELP.setGeometry(QRect(790, 120, 131, 51))
        self.HELP.setFont(font4)
        self.HELP.setStyleSheet("QPushButton:checked{background: #080808;} QPushButton{color: Red; background: #1a1a1a;}")
        self.HELP.setText('操作方法')
        self.HELP.clicked.connect(READMEDialog().results)
        self.CheckGroups.addButton(self.Check_HP)
        self.CheckGroups.addButton(self.Check_Attack)
        self.CheckGroups.addButton(self.Check_Def)
        self.CheckGroups.addButton(self.Check_Ch)
        self.CheckGroups.addButton(self.Check_EM)
        self.CheckGroups.setExclusive(True)
        self.SaveFile.setText('output.png')
        try:
            self.UIDs.setText(concurrent.futures.ThreadPoolExecutor(os.cpu_count()*99999999999999999999).submit(self.AutoPickUID).result())
        except:
            pass
        if platform.system() == 'Windows':
            self.SavePath.setText(os.path.join(os.getenv('USERPROFILE'), 'ArtifacterImageOutput'))
        else:
            self.SavePath.setText(os.path.join(os.getenv('HOME'), 'ArtifacterImageOutput'))

        self.retranslateUi(ArtifacterImageGenerator)

        QMetaObject.connectSlotsByName(ArtifacterImageGenerator)

    def retranslateUi(self, ArtifacterImageGenerator):
        self.WINDOW = ArtifacterImageGenerator
        ArtifacterImageGenerator.setWindowTitle("ArtifacterImageGenerator (待機中...)")
        ArtifacterImageGenerator.setWindowIcon(QPixmap(QSize(80, 80)).fromImage(QImage.fromData(QByteArray.fromBase64(b'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'))))
        self.Title.setText('Artifacter Image Generator v1.1.2')
        self.Check_HP.setText(" HP換算")
        self.Check_Attack.setText(" 攻撃力換算")
        self.Check_Def.setText(" 防御力換算")
        self.Check_Ch.setText(" 元素チャージ効率換算")
        self.Check_EM.setText(" 元素熟知換算")
        self.Create.setText("作成")

    def AutoPickUID(self):
        gamedir = re.findall("(.+GenshinImpact_Data|YuanShen_Data)", open(os.path.join(os.getenv('USERPROFILE'), 'AppData', 'LocalLow', 'miHoYo', 'Genshin Impact', 'output_log.txt'), 'r').read())[0].split('Warmup file ')[-1].replace('/', os.sep) # Logファイルから場所を特定
        tmpdir = tempfile.mkdtemp() # 一時フォルダを作成
        subprocess.run("powershell -c Copy-Item '{}' -Destination '{}'".format(os.path.join(gamedir, 'webCaches', 'Cache', 'Cache_Data', 'data_2'), os.path.join(tmpdir, 'cache.txt')), shell=True) # powershellで強引にキャッシュファイルを引っこ抜く
        uid = re.search('[0-9]{9}', list(set(re.findall('("uid":"[0-9]{9}")', str(open(os.path.join(tmpdir, 'cache.txt'), 'rb').read()))))[0])[0] # 一時フォルダで引っこ抜いたキャッシュデータからUIDを特定
        shutil.rmtree(tmpdir) # 一時フォルダの削除
        return uid

    def GetPlayerInfo(self, uid):
        PlayerJson = json.loads(urllib.request.urlopen(urllib.request.Request('https://enka.network/api/uid/{}?info'.format(uid), headers={'User-Agent': UsrAgn})).read())
        StoreCharacter = json.loads(CharacterJson())  # キャラクター情報のJSONを読み込み
        StoreLocale = json.loads(LocaleJa())
        PlayerInfo = PlayerJson['playerInfo']
        if 'showAvatarInfoList' in PlayerInfo:
            for Avatar in PlayerInfo.get('showAvatarInfoList'):
                Avatar['name'] = StoreLocale['ja'][str(StoreCharacter[str(Avatar['avatarId'])]['NameTextMapHash'])]
        return PlayerInfo

    def GetAvatarFullInfo(self, uid, avatar_id):
        json_response = json.loads(urllib.request.urlopen(urllib.request.Request('https://enka.network/api/uid/{}'.format(uid), headers={'User-Agent': UsrAgn})).read())
        avatar_data = []
        if 'avatarInfoList' in json_response:
            avatar_data = list(filter(lambda item : item['avatarId'] == avatar_id, json_response['avatarInfoList']))[0]

        return avatar_data

    def decimal_to_float(self, obj):
        if isinstance(obj, Decimal):
            return float(obj)

    def _print(self, p):
        self.WINDOW.setWindowTitle("ArtifacterImageGenerator ({})".format(p))

    def CreateCard(self, c):
        if not ClickCount[0] == '1':
            self.ArtifacterprogressBar.setValue(0)
            if self.UIDs.text() == '':
                NoneInputUID().RESULTs()
                ClickCount[0] = '0'
            elif self.SavePath.text() == '':
                NoneInputSavePath().RESULTs()
                ClickCount[0] = '0'
            else:
                try:
                    self.avatariD = self.avatar_list[int(self.Artifacterlist.selectedIndexes()[0].row())]['avatarId']
                    self.data = self.GetAvatarFullInfo(self.UIDs.text(), self.avatariD)
                    if self.Check_HP.checkState() == Qt.Checked:
                        self.score_state = 'HP'
                    if self.Check_Attack.checkState() == Qt.Checked:
                        self.score_state = '攻撃'
                    if self.Check_Def.checkState() == Qt.Checked:
                        self.score_state = '防御'
                    if self.Check_Ch.checkState() == Qt.Checked:
                        self.score_state = 'チャージ'
                    if self.Check_EM.checkState() == Qt.Checked:
                        self.score_state = '元素熟知'
                    self._print('起動中...')
                    self.BuildCardCreater(json.loads(self.CharacterInfoExtractor(self.UIDs.text(), self.data, self.score_state)))
                    self.setPreview()
                except IndexError:
                    NoneSelectedItem().RESULTs()
                    ClickCount[0] = '0'

    def BuildCardCreater(self, data):
        element = data.get('元素')
        CharacterData :dict = data.get('Character')
        CharacterName : str = CharacterData.get('Name')
        CharacterENName : str = CharacterData.get('EN_Name')
        CharacterIconFileName : str = CharacterData.get('icon')
        CharacterSkillIcons : list = CharacterData.get('SkillIcons') # 0: 通常攻撃 1: スキル 2: 元素爆発
        CharacterTalentIcons : list = CharacterData.get('Consticons')
        CharacterConstellations :int = CharacterData.get('Const')
        CharacterLevel : int = CharacterData.get('Level')
        FriendShip : int = CharacterData.get('Love')
        CharacterStatus : dict = CharacterData.get('Status')
        CharacterBase : dict = CharacterData.get('Base')
        CharacterTalent:dict = CharacterData.get('Talent')
        Weapon : dict = data.get('Weapon')
        WeaponIconFileName : str = Weapon.get('icon')
        WeaponName : str =Weapon.get('name')
        WeaponLevel : int =Weapon.get('Level')
        WeaponRank : int =Weapon.get('Constellations')
        WeaponRarelity : int =Weapon.get('rarelity')
        WeaponBaseATK: int = Weapon.get('BaseATK')
        WeaponSubOP : int = Weapon.get('Sub')
        WeaponSubOPKey : str = WeaponSubOP.get('name')
        WeaponSubOPValue : str = WeaponSubOP.get('value')
        ScoreData : dict = data.get('Score')
        ScoreCVBasis:str = ScoreData.get('State')
        ScoreTotal :float = ScoreData.get('total')
        ArtifactsData : dict = data.get('Artifacts')
        ArtifactsFlowerIconFileName : str = ArtifactsData['flower']['icon']
        ArtifactsWingIconFileName: str = ArtifactsData['wing']['icon']
        ArtifactsClockIconFileName: str = ArtifactsData['clock']['icon']
        ArtifactsCupIconFileName: str = ArtifactsData['cup']['icon']
        ArtifactsCrownIconFileName: str = ArtifactsData['crown']['icon']
        self._print('データから要素を抽出中...')
        if self.ArtifacterprogressBar.value() == 0:
            self.ArtifacterprogressBar.setValue(3.125)
        self.ArtifacterprogressBar.setValue(min(((self.ArtifacterprogressBar.value() + 3.125) / 100) * 100.0, 100.0))
        self.CreateAndEditImage(element, CharacterData, CharacterName, CharacterENName, CharacterIconFileName, CharacterSkillIcons, CharacterTalentIcons, CharacterConstellations, CharacterLevel, FriendShip, CharacterStatus, CharacterBase, CharacterTalent, Weapon, WeaponIconFileName, WeaponName, WeaponLevel, WeaponRank, WeaponRarelity, WeaponBaseATK, WeaponSubOP, WeaponSubOPKey, WeaponSubOPValue, ScoreData, ScoreCVBasis, ScoreTotal, ArtifactsData, ArtifactsFlowerIconFileName, ArtifactsWingIconFileName, ArtifactsClockIconFileName, ArtifactsCupIconFileName, ArtifactsCrownIconFileName)

    def CreateAndEditImage(self, element, CharacterData, CharacterName, CharacterENName, CharacterIconFileName, CharacterSkillIcons, CharacterTalentIcons, CharacterConstellations, CharacterLevel, FriendShip, CharacterStatus, CharacterBase, CharacterTalent, Weapon, WeaponIconFileName, WeaponName, WeaponLevel, WeaponRank, WeaponRarelity, WeaponBaseATK, WeaponSubOP, WeaponSubOPKey, WeaponSubOPValue, ScoreData, ScoreCVBasis, ScoreTotal, ArtifactsData, ArtifactsFlowerIconFileName, ArtifactsWingIconFileName, ArtifactsClockIconFileName, ArtifactsCupIconFileName, ArtifactsCrownIconFileName):
        self._print('フォントを読み込み中...')
        if self.ArtifacterprogressBar.value() == 0:
            self.ArtifacterprogressBar.setValue(3.125)
        self.ArtifacterprogressBar.setValue(min(((self.ArtifacterprogressBar.value() + 3.125) / 100) * 100.0, 100.0))
        config_font = lambda size : ImageFont.truetype(BytesIO(ArtifactAssets('ja-jp.ttf')),size)
        self._print('ベース画像を読み込み中...')
        self.ArtifacterprogressBar.setValue(min(((self.ArtifacterprogressBar.value() + 3.125) / 100) * 100.0, 100.0))
        Base = Image.open(BytesIO(ArtifactBaseImages(element)))
        self._print('キャラクターイメージをEnka.Networkから取得中...')
        self.ArtifacterprogressBar.setValue(min(((self.ArtifacterprogressBar.value() + 3.125) / 100) * 100.0, 100.0))
        if CharacterENName == 'Traveler':
            CharacterImage = Image.open(BytesIO(urllib.request.urlopen(urllib.request.Request('https://enka.network/ui/{}'.format(CharacterIconFileName), headers={'User-Agent': UsrAgn})).read())).convert('RGBA')
        else:
            CharacterImage = Image.open(BytesIO(urllib.request.urlopen(urllib.request.Request('https://enka.network/ui/{}'.format(CharacterIconFileName), headers={'User-Agent': UsrAgn})).read())).convert('RGBA')
        self._print('キャラクターイメージの背景の影を読み込み中...')
        self.ArtifacterprogressBar.setValue(min(((self.ArtifacterprogressBar.value() + 3.125) / 100) * 100.0, 100.0))
        Shadow = Image.open(BytesIO(ArtifactAssets('Shadow'))).resize(Base.size)
        self._print('キャラクターイメージをトリミング中...')
        self.ArtifacterprogressBar.setValue(min(((self.ArtifacterprogressBar.value() + 3.125) / 100) * 100.0, 100.0))
        CharacterImage = CharacterImage.crop((289, 0, 1728, 1024))
        self._print('キャラクターイメージをリサイズ中...')
        self.ArtifacterprogressBar.setValue(min(((self.ArtifacterprogressBar.value() + 3.125) / 100) * 100.0, 100.0))
        CharacterImage = CharacterImage.resize((int(CharacterImage.width*0.75), int(CharacterImage.height*0.75)))
        CharacterAvatarMask = CharacterImage.copy()
        self._print('キャラクターイメージのマスクを設定中...')
        self.ArtifacterprogressBar.setValue(min(((self.ArtifacterprogressBar.value() + 3.125) / 100) * 100.0, 100.0))
        if CharacterName == 'アルハイゼン':
            CharacterAvatarMask2 = Image.open(BytesIO(ArtifactAssets('Alhaitham'))).convert('L').resize(CharacterImage.size)
        else:
            CharacterAvatarMask2 = Image.open(BytesIO(ArtifactAssets('CharacterMask'))).convert('L').resize(CharacterImage.size)
        CharacterImage.putalpha(CharacterAvatarMask2)
        CharacterPaste = Image.new('RGBA', Base.size, (255, 255, 255, 0))
        self._print('キャラクターイメージにマスクを適用してベース画像へ合成中...')
        self.ArtifacterprogressBar.setValue(min(((self.ArtifacterprogressBar.value() + 3.125) / 100) * 100.0, 100.0))
        CharacterPaste.paste(CharacterImage, (-160, -45), mask=CharacterAvatarMask)
        Base = Image.alpha_composite(Base, CharacterPaste)
        Base = Image.alpha_composite(Base, Shadow)
        self._print('武器イメージをEnka.Networkから取得中...')
        self.ArtifacterprogressBar.setValue(min(((self.ArtifacterprogressBar.value() + 3.125) / 100) * 100.0, 100.0))
        Weapon = Image.open(BytesIO(urllib.request.urlopen(urllib.request.Request('https://enka.network/ui/{}'.format(WeaponIconFileName), headers={'User-Agent': UsrAgn})).read())).convert('RGBA').resize((128, 128))
        WeaponPaste = Image.new('RGBA', Base.size, (255, 255, 255, 0))
        self._print('武器イメージのマスクを設定中...')
        self.ArtifacterprogressBar.setValue(min(((self.ArtifacterprogressBar.value() + 3.125) / 100) * 100.0, 100.0))
        WeaponMask = Weapon.copy()
        WeaponPaste.paste(Weapon, (1430, 50), mask=WeaponMask)
        Base = Image.alpha_composite(Base, WeaponPaste)
        self._print('武器のレアリティイメージを取得中...')
        self.ArtifacterprogressBar.setValue(min(((self.ArtifacterprogressBar.value() + 3.125) / 100) * 100.0, 100.0))
        try:
            WeaponRImage = Image.open(BytesIO(ArtifactRarelity('{}'.format(WeaponRarelity)))).convert('RGBA')
        except:
            WeaponRImage = Image.open(BytesIO(ArtifactRarelity('{}'.format(WeaponRarelity))))
        self._print('武器のレアリティイメージをリサイズ中...')
        self.ArtifacterprogressBar.setValue(min(((self.ArtifacterprogressBar.value() + 3.125) / 100) * 100.0, 100.0))
        WeaponRImage = WeaponRImage.resize((int(WeaponRImage.width * 0.97), int(WeaponRImage.height*0.97)))
        WeaponRPaste = Image.new('RGBA', Base.size, (255, 255, 255, 0))
        self._print('武器のレアリティイメージのマスクを作成中...')
        self.ArtifacterprogressBar.setValue(min(((self.ArtifacterprogressBar.value() + 3.125) / 100) * 100.0, 100.0))
        WeaponRMask = WeaponRImage.copy()
        WeaponRPaste.paste(WeaponRImage, (1422, 173), mask=WeaponRMask)
        self._print('武器の画像をベース画像へ合成中...')
        self.ArtifacterprogressBar.setValue(min(((self.ArtifacterprogressBar.value() + 3.125) / 100) * 100.0, 100.0))
        Base = Image.alpha_composite(Base, WeaponRPaste)
        self._print('星座のベース画像を読み込み中...')
        self.ArtifacterprogressBar.setValue(min(((self.ArtifacterprogressBar.value() + 3.125) / 100) * 100.0, 100.0))
        TalentBase = Image.open(BytesIO(ArtifactAssets('TalentBack')))
        TalentBasePaste = Image.new('RGBA', Base.size, (255, 255, 255, 0))
        self._print('星座のベース画像をリサイズ中...')
        self.ArtifacterprogressBar.setValue(min(((self.ArtifacterprogressBar.value() + 3.125) / 100) * 100.0, 100.0))
        TalentBase = TalentBase.resize((int(TalentBase.width / 1.5), int(TalentBase.height / 1.5)))
        self._print('星座のスキルアイコンをEnka.Networkから取得中...')
        self.ArtifacterprogressBar.setValue(min(((self.ArtifacterprogressBar.value() + 3.125) / 100) * 100.0, 100.0))
        for i, t in enumerate(CharacterSkillIcons):
            TalentPaste = Image.new('RGBA', TalentBase.size, (255, 255, 255, 0))
            Talent = Image.open(BytesIO(urllib.request.urlopen(urllib.request.Request('https://enka.network/ui/{}'.format(t), headers={'User-Agent': UsrAgn})).read())).resize((50, 50)).convert('RGBA')
            TalentMask = Talent.copy()
            TalentPaste.paste(Talent, (TalentPaste.width // 2 - 25, TalentPaste.height // 2 - 25), mask=TalentMask)
            TalentObject = Image.alpha_composite(TalentBase, TalentPaste)
            TalentBasePaste.paste(TalentObject, (15, 330 + i * 105))
        Base = Image.alpha_composite(Base, TalentBasePaste)
        self._print('星座のロック状態を設定中...')
        self.ArtifacterprogressBar.setValue(min(((self.ArtifacterprogressBar.value() + 3.125) / 100) * 100.0, 100.0))
        CBase = Image.open(BytesIO(ArtifactConstellation(element))).resize((90, 90)).convert('RGBA')
        Clock = Image.open(BytesIO(ArtifactConstellation('{}LOCK'.format(element)))).convert('RGBA')
        self._print('星座のロック状態のマスクを作成中...')
        self.ArtifacterprogressBar.setValue(min(((self.ArtifacterprogressBar.value() + 3.125) / 100) * 100.0, 100.0))
        ClockMask = Clock.copy()
        CPaste = Image.new('RGBA', Base.size, (255, 255, 255, 0))
        self._print('キャラクターの星座アイコンをEnka.Networkから取得中...')
        self.ArtifacterprogressBar.setValue(min(((self.ArtifacterprogressBar.value() + 3.125) / 100) * 100.0, 100.0))
        for c, t in enumerate(CharacterTalentIcons):
            if c > int(CharacterConstellations):
                CPaste.paste(Clock, (666, -10 + (c +1) * 93), mask=ClockMask)
            else:
                CharaC = Image.open(BytesIO(urllib.request.urlopen(urllib.request.Request('https://enka.network/ui/{}'.format(t), headers={'User-Agent': UsrAgn})).read())).convert('RGBA').resize((45, 45))
                CharaCPaste = Image.new('RGBA', CBase.size, (255, 255, 255, 0))
                CharaCMask = CharaC.copy()
                CharaCPaste.paste(CharaC, (int(CharaCPaste.width / 2) - 25, int(CharaCPaste.height / 2) - 23), mask=CharaCMask)
                Cobject = Image.alpha_composite(CBase, CharaCPaste)
                CPaste.paste(Cobject, (666, -10 + (c + 1) * 93))
        Base = Image.alpha_composite(Base, CPaste)
        D = ImageDraw.Draw(Base)
        self._print('キャラクターの名前を画像へ記入中...')
        self.ArtifacterprogressBar.setValue(min(((self.ArtifacterprogressBar.value() + 3.125) / 100) * 100.0, 100.0))
        D.text((30, 20), CharacterName, font=config_font(48))
        self._print('キャラクターのレベルを画像へ記入中...')
        self.ArtifacterprogressBar.setValue(min(((self.ArtifacterprogressBar.value() + 3.125) / 100) * 100.0, 100.0))
        levellength = D.textlength('Lv.{}'.format(CharacterLevel), font=config_font(25))
        friendshiplength = D.textlength(str(FriendShip), font=config_font(25))
        D.text((35, 75), 'Lv.{}'.format(CharacterLevel), font=config_font(25))
        D.rounded_rectangle((35 + levellength + 5, 74, 77 + levellength + friendshiplength, 102), radius=2, fill="black")
        self._print('キャラクターの好感度イメージを読み込み中...')
        self.ArtifacterprogressBar.setValue(min(((self.ArtifacterprogressBar.value() + 3.125) / 100) * 100.0, 100.0))
        FriendShipIcon = Image.open(BytesIO(ArtifactAssets('Love'))).convert('RGBA')
        FriendShipIcon = FriendShipIcon.resize((int(FriendShipIcon.width * (24 / FriendShipIcon.height)), 24))
        Fmask = FriendShipIcon.copy()
        self._print('キャラクターの好感度イメージをベース画像へ合成中...')
        self.ArtifacterprogressBar.setValue(min(((self.ArtifacterprogressBar.value() + 3.125) / 100) * 100.0, 100.0))
        Base.paste(FriendShipIcon, (42 + int(levellength), 76), mask=Fmask)
        D.text((73 + levellength, 74), str(FriendShip), font=config_font(25))
        self._print('キャラクターの天賦レベルをベース画像へ合成中...')
        self.ArtifacterprogressBar.setValue(min(((self.ArtifacterprogressBar.value() + 3.125) / 100) * 100.0, 100.0))
        D.text((42, 397), 'Lv.{}'.format(CharacterTalent["通常"]), font=config_font(17), fill='aqua' if CharacterTalent["通常"] >= 10 else None)
        D.text((42, 502), 'Lv.{}'.format(CharacterTalent["スキル"]), font=config_font(17), fill='aqua' if CharacterTalent["スキル"] >= 10 else None)
        D.text((42, 607), 'Lv.{}'.format(CharacterTalent["爆発"]), font=config_font(17), fill='aqua' if CharacterTalent["爆発"] >= 10 else None)
        def genbasetext(state):
            sumv = CharacterStatus[state]
            plusv = sumv - CharacterBase[state]
            basev = CharacterBase[state]
            return f"+{format(plusv,',')}", f"{format(basev,',')}", D.textlength(f"+{format(plusv,',')}", font=config_font(12)), D.textlength(f"{format(basev, ',')}", font=config_font(12))
        self._print('ステータス状態をベース画像へ記入中...')
        self.ArtifacterprogressBar.setValue(min(((self.ArtifacterprogressBar.value() + 3.125) / 100) * 100.0, 100.0))
        disper = ['会心率', '会心ダメージ', '攻撃パーセンテージ', '防御パーセンテージ', 'HPパーセンテージ', '水元素ダメージ', '物理ダメージ', '風元素ダメージ', '岩元素ダメージ', '炎元素ダメージ', '与える治癒効果', '与える治療効果', '雷元素ダメージ', '氷元素ダメージ', '草元素ダメージ', '与える治癒効果', '元素チャージ効率']
        StateOP = ('HP', '攻撃力', "防御力", "元素熟知", "会心率", "会心ダメージ", "元素チャージ効率")
        for k, v in CharacterStatus.items():
            if k in ['氷元素ダメージ', '水元素ダメージ', '岩元素ダメージ', '草元素ダメージ', '風元素ダメージ', '炎元素ダメージ', '物理ダメージ', '与える治癒効果', '雷元素ダメージ'] and v == 0:
                k = '{}元素ダメージ'.format(element)
            try:
                i = StateOP.index(k)
            except:
                i = 7
                D.text((844, 67 + i * 70), k, font=config_font(26))
                opicon = Image.open(BytesIO(Artifactemotes(k))).resize((40, 40))
                oppaste = Image.new('RGBA', Base.size, (255, 255, 255, 0))
                oppaste.paste(opicon, (789, 65 + i * 70))
                Base = Image.alpha_composite(Base, oppaste)
                D = ImageDraw.Draw(Base)
            if k not in disper:
                statelen = D.textlength(format(v, ","), config_font(26))
                D.text((1360 - statelen, 67 + i * 70), format(v, ","), font=config_font(26))
            else:
                statelen = D.textlength(f'{float(v)}%', config_font(26))
                D.text((1360 - statelen, 67 + i * 70), f'{float(v)}%', font=config_font(26))
            if k in ['HP', '防御力', '攻撃力']:
                HPpls, HPbase, HPsize, HPbsize = genbasetext(k)
                D.text((1360 - HPsize, 97 + i * 70), HPpls, fill=(0,255,0,180), font=config_font(12))
                D.text((1360 - HPsize - HPbsize - 1, 97 + i * 70), HPbase, font=config_font(12), fill=(255, 255, 255, 180))
        D.text((1582, 47), WeaponName, font=config_font(26))
        wlebellen = D.textlength(f'Lv.{WeaponLevel}', font=config_font(24))
        D.rounded_rectangle((1582, 80, 1582 + wlebellen + 4, 108), radius=1, fill='black')
        D.text((1584, 82), f'Lv.{WeaponLevel}', font=config_font(24))
        BaseAtk = Image.open(BytesIO(Artifactemotes('基礎攻撃力'))).resize((23, 23))
        BaseAtkmask = BaseAtk.copy()
        Base.paste(BaseAtk, (1600, 120), mask=BaseAtkmask)
        D.text((1623, 120), '基礎攻撃力  {}'.format(WeaponBaseATK), font=config_font(23))
        optionmap = {
            "攻撃パーセンテージ": "攻撃%",
            "防御パーセンテージ": "防御%",
            "元素チャージ効率": "元チャ効率",
            "HPパーセンテージ": "HP%",
        }
        if WeaponSubOPKey != None:
            BaseAtk = Image.open(BytesIO(Artifactemotes(WeaponSubOPKey))).resize((23, 23))
            BaseAtkmask = BaseAtk.copy()
            Base.paste(BaseAtk, (1600, 155), mask=BaseAtkmask)
            D.text((1623, 155), f'{optionmap.get(WeaponSubOPKey) or WeaponSubOPKey}  {str(WeaponSubOPValue)+"%" if WeaponSubOPKey in disper else format(WeaponSubOPValue,",")}', font=config_font(23))
        D.rounded_rectangle((1430, 45, 1470, 70), radius=1, fill='black')
        D.text((1433, 46), f'R{WeaponRank}', font=config_font(24))
        ScoreLen = D.textlength(f'{ScoreTotal}', config_font(75))
        D.text((1652 - ScoreLen // 2, 420), str(ScoreTotal), font=config_font(75))
        self._print('ステータスの計算方式を記入中...')
        self.ArtifacterprogressBar.setValue(min(((self.ArtifacterprogressBar.value() + 3.125) / 100) * 100.0, 100.0))
        blen = D.textlength('{}換算'.format(ScoreCVBasis), font=config_font(24))
        D.text((1867 - blen, 585), '{}換算'.format(ScoreCVBasis), font=config_font(24))
        if float(ScoreTotal) >= 220:
            ScoreEv = Image.open(BytesIO(ArtifactGrades('SS')))
        elif float(ScoreTotal) >= 200:
            ScoreEv = Image.open(BytesIO(ArtifactGrades('S')))
        elif float(ScoreTotal) >= 180:
            ScoreEv = Image.open(BytesIO(ArtifactGrades('A')))
        else:
            ScoreEv = Image.open(BytesIO(ArtifactGrades('B')))
        ScoreEv = ScoreEv.resize((ScoreEv.width // 8, ScoreEv.height // 8))
        EvMask = ScoreEv.copy()
        Base.paste(ScoreEv, (1806, 345), mask=EvMask)
        ArtifactsIconList = [ArtifactsFlowerIconFileName, ArtifactsWingIconFileName, ArtifactsClockIconFileName, ArtifactsCupIconFileName, ArtifactsCrownIconFileName]
        self._print('各聖遺物の画像を設定中...しばらくお待ちください...')
        self.ArtifacterprogressBar.setValue(min(((self.ArtifacterprogressBar.value() + 3.125) / 100) * 100.0, 100.0))
        concurrent.futures.ThreadPoolExecutor(os.cpu_count()*99999999999999999999999999999999999).submit(self.ArtifactsC, config_font, Base, D, ImageEnhance, ArtifactsIconList, ArtifactsData, optionmap, disper, ScoreData)
        self.ArtifacterprogressBar.setValue(min(((self.ArtifacterprogressBar.value() + 3.125 + 3.125 + 3.125 + 3.125) / 100) * 100.0, 100.0))

    def ArtifactsC(self, config_font, Base, D, ImageEnhance, ArtifactsIconList, ArtifactsData, optionmap, disper, ScoreData):
        atftype = []
        for i, parts in enumerate(['flower', "wing", "clock", "cup", "crown"]):
            details = ArtifactsData.get(parts)
            if not details:
                continue
            atftype.append(details['type'])
            PreviewPaste = Image.new('RGBA', Base.size, (255, 255, 255, 0))
            Preview = Image.open(BytesIO(urllib.request.urlopen(
                urllib.request.Request('https://enka.network/ui/{}'.format(ArtifactsIconList[i]),
                                       headers={'User-Agent': UsrAgn})).read())).resize((256, 256))
            enhancer = ImageEnhance.Brightness(Preview)
            Preview = enhancer.enhance(0.6)
            Preview = Preview.resize((int(Preview.width * 1.3), int(Preview.height * 1.3)))
            Pmask1 = Preview.copy()
            Pmask = Image.open(BytesIO(ArtifactAssets('ArtifactMask'))).convert('L').resize(Preview.size)
            Preview.putalpha(Pmask)
            if parts in ['flower', 'crown']:
                PreviewPaste.paste(Preview, (-37 + 373 * i, 570), mask=Pmask1)
            elif parts in ['wing', 'cup']:
                PreviewPaste.paste(Preview, (-36 + 373 * i, 570), mask=Pmask1)
            else:
                PreviewPaste.paste(Preview, (-35 + 373 * i, 570), mask=Pmask1)
            Base = Image.alpha_composite(Base, PreviewPaste)
            D = ImageDraw.Draw(Base)
            mainop = details['main']['option']
            mainoplen = D.textlength(optionmap.get(mainop) or mainop, font=config_font(29))
            D.text((375 + i * 373 - int(mainoplen), 655), optionmap.get(mainop) or mainop, font=config_font(29))
            MainIcon = Image.open(BytesIO(Artifactemotes(mainop))).convert('RGBA').resize((35, 35))
            MainMask = MainIcon.copy()
            Base.paste(MainIcon, (340 + i * 373 - int(mainoplen), 655), mask=MainMask)
            mainv = details['main']['value']
            if mainop in disper:
                mainvsize = D.textlength('{}%'.format(float(mainv)), config_font(49))
                D.text((375 + i * 373 - mainvsize, 690), '{}%'.format(float(mainv)), font=config_font(49))
            else:
                mainvsize = D.textlength(format(mainv, ","), config_font(49))
                D.text((375 + i * 373 - mainvsize, 690), format(mainv, ","), font=config_font(49))
            levlen = D.textlength('+{}'.format(details["Level"]), config_font(21))
            D.rounded_rectangle((373 + i * 373 - int(levlen), 748, 375 + i * 373, 771), fill='black', radius=2)
            D.text((374 + i * 373 - levlen, 749), '+{}'.format(details["Level"]), font=config_font(21))
            if details['Level'] == 20 and details['rarelity'] == 5:
                c_data = {}
                for a in details["sub"]:
                    if a['option'] in disper:
                        c_data[a['option']] = str(float(a["value"]))
                    else:
                        c_data[a['option']] = str(a["value"])
                psb = self.CCop(c_data)
            if len(details['sub']) == 0:
                continue
            for a, sub in enumerate(details['sub']):
                SubOP = sub['option']
                SubVal = sub['value']
                if SubOP in ['HP', '攻撃力', '防御力']:
                    D.text((79 + 373 * i, 811 + 50 * a), optionmap.get(SubOP) or SubOP, font=config_font(25),
                           fill=(255, 255, 255, 190))
                else:
                    D.text((79 + 373 * i, 811 + 50 * a), optionmap.get(SubOP) or SubOP, font=config_font(25))
                SubIcon = Image.open(BytesIO(Artifactemotes(SubOP))).resize((30, 30))
                SubMask = SubIcon.copy()
                Base.paste(SubIcon, (44 + 373 * i, 811 + 50 * a), mask=SubMask)
                if SubOP in disper:
                    SubSize = D.textlength('{}%'.format(float(SubVal)), config_font(25))
                    D.text((375 + i * 373 - SubSize, 811 + 50 * a), '{}%'.format(float(SubVal)), font=config_font(25))
                else:
                    SubSize = D.textlength(format(SubVal, ","), config_font(25))
                    if SubOP in ['防御力', '攻撃力', 'HP']:
                        D.text((375 + i * 373 - SubSize, 811 + 50 * a), format(SubVal, ","), font=config_font(25),
                               fill=(255, 255, 255, 190))
                    else:
                        D.text((375 + i * 373 - SubSize, 811 + 50 * a), format(SubVal, ","), font=config_font(25),
                               fill=(255, 255, 255))
                if details['Level'] == 20 and details['rarelity'] == 5:
                    nobi = D.textlength("+".join(map(str, psb[a])), font=config_font(11))
                    D.text((375 + i * 373 - nobi, 840 + 50 * a), "+".join(map(str, psb[a])), fill=(255, 255, 255, 160),
                           font=config_font(11))
            Score = float(ScoreData[parts])
            ATFScorelen = D.textlength(str(Score), config_font(36))
            D.text((380 + i * 373 - ATFScorelen, 1016), str(Score), font=config_font(36))
            D.text((295 + i * 373 - ATFScorelen, 1025), 'Score', font=config_font(27), fill=(160, 160, 160))
            PointRefer = {
                "total": {
                    "SS": 220,
                    "S": 200,
                    "A": 180
                },
                "flower": {
                    "SS": 50,
                    "S": 45,
                    "A": 40
                },
                "wing": {
                    "SS": 50,
                    "S": 45,
                    "A": 40
                },
                "clock": {
                    "SS": 45,
                    "S": 40,
                    "A": 35
                },
                "cup": {
                    "SS": 45,
                    "S": 40,
                    "A": 37
                },
                "crown": {
                    "SS": 40,
                    "S": 35,
                    "A": 30
                }
            }

            if Score >= PointRefer[parts]['SS']:
                ScoreImage = Image.open(BytesIO(ArtifactGrades('SS')))
            elif Score >= PointRefer[parts]['S']:
                ScoreImage = Image.open(BytesIO(ArtifactGrades('S')))
            elif Score >= PointRefer[parts]['A']:
                ScoreImage = Image.open(BytesIO(ArtifactGrades('A')))
            else:
                ScoreImage = Image.open(BytesIO(ArtifactGrades('B')))

            ScoreImage = ScoreImage.resize((ScoreImage.width // 11, ScoreImage.height // 11))
            SCMask = ScoreImage.copy()

            Base.paste(ScoreImage, (85 + 373 * i, 1013), mask=SCMask)
        self._print('ベース画像へ聖遺物のスコアイメージを合成中...')
        self.ArtifacterprogressBar.setValue(min(((self.ArtifacterprogressBar.value() + 3.125) / 100) * 100.0, 100.0))
        SetBounus = Counter([x for x in atftype if atftype.count(x) >= 2])
        for i, (n, q) in enumerate(SetBounus.items()):
            if len(SetBounus) == 2:
                D.text((1536, 243 + i * 35), n, fill=(0, 255, 0), font=config_font(23))
                D.rounded_rectangle((1818, 243 + i * 35, 1862, 266 + i * 35), 1, 'black')
                D.text((1835, 243 + i * 35), str(q), font=config_font(19))
            if len(SetBounus) == 1:
                D.text((1536, 263), n, fill=(0, 255, 0), font=config_font(23))
                D.rounded_rectangle((1818, 263, 1862, 288), 1, 'black')
                D.text((1831, 265), str(q), font=config_font(19))
        os.makedirs(self.SavePath.text(), exist_ok=True)
        Base.save(os.path.join(self.SavePath.text(), self.SaveFile.text()))
        BasePreviewBytes = BytesIO()
        BasePreview = QPixmap()
        Base.save(BasePreviewBytes, 'png')
        BasePreview.loadFromData(BasePreviewBytes.getvalue())
        self.Preview.setPixmap(BasePreview.scaled(440, 300, Qt.KeepAspectRatio, Qt.FastTransformation))
        self._print('完了!　出力先は「{}」です。'.format(self.SavePath.text()))
        ClickCount[0] = '0'

    def CharacterInfoExtractor(self, uid, avatarInfo, score_state):
        BaseJson = json.loads(FormatJson()) # ベースになるJSON
        StoreCharacter = json.loads(CharacterJson()) # キャラクター情報のJSONを読み込み
        StoreLocale = json.loads(LocaleJa()) # キャラクター情報のJSONを読み込み
        BaseJson['uid'] = uid
        BaseJson['input'] = ''
        ElementLocale = {'Fire': '炎', 'Water': '水', 'Electric': '雷', 'Ice': '氷', 'Wind': '風', 'Rock': '岩', 'Grass': '草'}
        BaseJson['元素'] = ElementLocale[StoreCharacter[str(avatarInfo['avatarId'])]['Element']] # 元素
        BaseJson['Character']['Name'] = StoreLocale['ja'][str(StoreCharacter[str(avatarInfo['avatarId'])]['NameTextMapHash'])]
        BaseJson['Character']['EN_Name'] = str(StoreLocale['en'][str(StoreCharacter[str(avatarInfo['avatarId'])]['NameTextMapHash'])]).split(' ')[-1]
        BaseJson['Character']['icon'] = '{}.png'.format(str(StoreCharacter[str(avatarInfo['avatarId'])]['SideIconName']).replace('UI_AvatarIcon_Side_', 'UI_Gacha_AvatarImg_'))
        BaseJson['Character']['SkillIcons'] = ["{}.png".format(s) for s in StoreCharacter[str(avatarInfo['avatarId'])]['Skills'].values()]
        try:
            BaseJson['Character']['Const'] = len(avatarInfo['talentIdList']) -1
        except:
            BaseJson['Character']['Const'] = -1
        BaseJson['Character']['Consticons'] = ["{}.png".format(c) for c in StoreCharacter[str(avatarInfo['avatarId'])]['Consts']]
        BaseJson['Character']['Level'] = str(avatarInfo['propMap']['4001']['val']) # レベル
        BaseJson['Character']['Love'] = str(avatarInfo['fetterInfo']['expLevel']) # 好感度
        BaseJson['Character']['Status']['HP'] = int(Decimal(avatarInfo['fightPropMap']['2000']).quantize(Decimal('0'), rounding=ROUND_HALF_UP)) # HP
        BaseJson['Character']['Status']['攻撃力'] = int(Decimal(avatarInfo['fightPropMap']['2001']).quantize(Decimal('0'), rounding=ROUND_HALF_UP)) # 攻撃力
        BaseJson['Character']['Status']['防御力'] = int(Decimal(avatarInfo['fightPropMap']['2002']).quantize(Decimal('0'), rounding=ROUND_HALF_UP)) # 防御力
        BaseJson['Character']['Status']['元素熟知'] = int(Decimal(avatarInfo['fightPropMap']['28']).quantize(Decimal('0'), rounding=ROUND_HALF_UP)) # 元素熟知
        BaseJson['Character']['Status']['元素チャージ効率'] = Decimal(avatarInfo['fightPropMap']['23'] * 100).quantize(Decimal('0.1'), rounding=ROUND_HALF_UP) # 元素チャージ効率
        BaseJson['Character']['Status']['会心率'] = Decimal(avatarInfo['fightPropMap']['20'] * 100).quantize(Decimal('0.1'), rounding=ROUND_HALF_UP) # 会心率
        BaseJson['Character']['Status']['会心ダメージ'] = Decimal(avatarInfo['fightPropMap']['22'] * 100).quantize(Decimal('0.1'), rounding=ROUND_HALF_UP) # 会心ダメージ
        BuffJson = {'30': '物理ダメージ', '40': '炎元素ダメージ', '41': '雷元素ダメージ', '42': '水元素ダメージ', '43': '草元素ダメージ', '44': '風元素ダメージ', '45': '岩元素ダメージ', '46': '氷元素ダメージ'}
        BuffKeys = list(BuffJson.keys())
        maxKey = '30'
        maxValue = 0
        for k in BuffKeys:
            if avatarInfo['fightPropMap'][k] > maxValue:
                maxValue = avatarInfo['fightPropMap'][k]
                maxKey = k
        BaseJson['Character']['Status'][BuffJson[maxKey]] = Decimal(avatarInfo['fightPropMap'][maxKey] * 100).quantize(Decimal('0.1'), rounding=ROUND_HALF_UP)
        if 'proudSkillExtraLevelMap' in avatarInfo:
            SkillKeys = list(map(int, avatarInfo['skillLevelMap'].keys()))
            ProudKeys = list(map(int, avatarInfo['proudSkillExtraLevelMap'].keys()))
            ProudMap = StoreCharacter[str(avatarInfo['avatarId'])]['ProudMap']
            for ky in SkillKeys:
                if ProudMap[str(ky)] in ProudKeys:
                    avatarInfo['skillLevelMap'][str(ky)] += avatarInfo['proudSkillExtraLevelMap'][str(ProudMap[str(ky)])]
        BaseJson['Character']['Talent']['通常'] = avatarInfo['skillLevelMap'][str(StoreCharacter[str(avatarInfo['avatarId'])]['SkillOrder'][0])] # 通常天賦
        BaseJson['Character']['Talent']['スキル'] = avatarInfo['skillLevelMap'][str(StoreCharacter[str(avatarInfo['avatarId'])]['SkillOrder'][1])] # スキル天賦
        BaseJson['Character']['Talent']['爆発'] = avatarInfo['skillLevelMap'][str(StoreCharacter[str(avatarInfo['avatarId'])]['SkillOrder'][2])] # 元素爆発天賦
        BaseJson['Character']['Base']['HP'] = int(Decimal(avatarInfo['fightPropMap']['1']).quantize(Decimal('0'), rounding=ROUND_HALF_UP)) # キャラクター基礎HP
        BaseJson['Character']['Base']['攻撃力'] = int(Decimal(avatarInfo['fightPropMap']['4']).quantize(Decimal('0'), rounding=ROUND_HALF_UP)) # キャラクター基礎攻撃力
        BaseJson['Character']['Base']['防御力'] = int(Decimal(avatarInfo['fightPropMap']['7']).quantize(Decimal('0'), rounding=ROUND_HALF_UP)) # キャラクター基礎防御力
        WeaponInfo = list(filter(lambda item : item.get('weapon'), avatarInfo['equipList']))[0]
        BaseJson['Weapon']['name'] = StoreLocale['ja'][WeaponInfo['flat']['nameTextMapHash']]
        BaseJson['Weapon']['Level'] = WeaponInfo['weapon']['level']
        BaseJson['Weapon']['Constellations'] = list(WeaponInfo['weapon']['affixMap'].values())[0] + 1
        BaseJson['Weapon']['rarelity'] = WeaponInfo['flat']['rankLevel']
        BaseJson['Weapon']['BaseATK'] = list(filter(lambda item : item['appendPropId'] == 'FIGHT_PROP_BASE_ATTACK', WeaponInfo['flat']['weaponStats']))[0]['statValue']
        BaseJson['Weapon']['Sub']['name'] = StoreLocale['ja'][list(filter(lambda item : item['appendPropId'] != 'FIGHT_PROP_BASE_ATTACK', WeaponInfo['flat']['weaponStats']))[0]['appendPropId']]
        BaseJson['Weapon']['Sub']['value'] = list(filter(lambda item : item['appendPropId'] != 'FIGHT_PROP_BASE_ATTACK', WeaponInfo['flat']['weaponStats']))[0]['statValue']
        BaseJson['Weapon']['icon'] = '{}.png'.format(WeaponInfo['flat']['icon'])
        Scores = BaseJson['Score']
        Scores['State'] = score_state
        StateList = {'HP': 'HPパーセンテージ', '攻撃': '攻撃パーセンテージ', '防御': '防御パーセンテージ', 'チャージ': '元素チャージ効率', '元素熟知': '元素熟知'}
        RelicTotalScore = 0
        RelicList = list(filter(lambda item: item.get('reliquary'), avatarInfo['equipList']))
        RelicType = {'EQUIP_BRACER': 'flower', 'EQUIP_NECKLACE': 'wing', 'EQUIP_SHOES': 'clock', 'EQUIP_RING': 'cup', 'EQUIP_DRESS': 'crown'}
        for relicInfo in RelicList:
            relic = BaseJson['Artifacts'][RelicType[relicInfo['flat']['equipType']]]
            relic['type'] = StoreLocale['ja'][relicInfo['flat']['setNameTextMapHash']]
            relic['icon'] = '{}.png'.format(relicInfo['flat']['icon'])
            relic['Level'] = relicInfo['reliquary']['level'] - 1
            relic['rarelity'] = relicInfo['flat']['rankLevel']
            relic['main']['option'] = StoreLocale['ja'][relicInfo['flat']['reliquaryMainstat']['mainPropId']]
            relic['main']['value'] = relicInfo['flat']['reliquaryMainstat']['statValue']
            relicScore = 0
            for index, substats in enumerate(relicInfo['flat']['reliquarySubstats']):
                relic['sub'].append({})
                relic['sub'][index]['option'] = StoreLocale['ja'][substats['appendPropId']]
                relic['sub'][index]['value'] = substats['statValue']
                if relic['sub'][index]['option'] in [StateList[score_state], '会心ダメージ']:
                    if relic['sub'][index]['option'] == '元素熟知':
                        relicScore += Decimal(relic['sub'][index]['value'] * 0.25)
                    else:
                        relicScore += Decimal(relic['sub'][index]['value'])
                elif relic['sub'][index]['option'] in ['会心率']:
                    relicScore += Decimal(relic['sub'][index]['value'] * 2)
                Scores[RelicType[relicInfo['flat']['equipType']]] = Decimal(relicScore).quantize(Decimal('0.1'), rounding=ROUND_HALF_UP)
            RelicTotalScore += Decimal(relicScore)
        Scores['total'] = RelicTotalScore
        return json.dumps(BaseJson, indent=2, ensure_ascii=False, default=self.decimal_to_float)

    def CCop(self, data:dict):
        dup = json.loads(ArtifactMainOption()) # 聖遺物のメインオプション
        mapping = json.loads(ArtifactSubOption()) # 聖遺物のサブオプション
        res = [None, None, None, None]
        keymap = list(map(str, data.keys()))
        is_dup = []
        for ctg, state in data.items():
            dup_value = dup[ctg]['ov']
            if str(state) in dup_value:
                is_dup.append((ctg,state))

        counter_flag = 0
        dup_ctg = [i[0] for i in is_dup]
        maxium_state_ct = 9

        if not len(is_dup):
            for ctg, state in data.items():
                idx = keymap.index(ctg)
                res[idx] = mapping[ctg][str(state)]
            return res

        if len(is_dup) == 1:
            single_state = {c: s for c, s in data.items() if c not in dup_ctg}
            for ctg, state in single_state.items():
                idx = keymap.index(ctg)
                res[idx] = mapping[ctg][str(state)]
                counter_flag += len(mapping[ctg][str(state)])

            dup_state = {c:s for c,s in data.items() if c in dup_ctg}
            long = maxium_state_ct - counter_flag
            for ctg, state in dup_state.items():
                possiblity = dup[ctg][str(state)]
                for p in possiblity:
                    if len(p) == long or len(p) == long-1:
                        idx = keymap.index(ctg)
                        res[idx] = p
                        return res
        if len(is_dup) == 2:
            single_state = {c:s for c,s in data.items() if c not in dup_ctg}
            for ctg, state in single_state.items():
                idx = keymap.index(ctg)
                res[idx] = mapping[ctg][str(state)]
                counter_flag += len(mapping[ctg][str(state)])

            dup_state = {c:s for c,s in data.items() if c in dup_ctg}
            long = maxium_state_ct - counter_flag

            sample = [[ctg, state]for ctg, state in dup_state.items()]

            possiblity1 = dup[sample[0][0]][str(sample[0][1])]
            possiblity2 = dup[sample[1][0]][str(sample[1][1])]

            p1 = [len(p) for p in possiblity1]
            p2 = [len(p) for p in possiblity2]

            p = itertools.product(p1, p2)
            r = None
            for v in p:
                if sum(v) == long or sum(v) == long-1:
                    r = v
                    break
            idx1 = keymap.index(sample[0][0])
            idx2 = keymap.index(sample[1][0])
            res[idx1] = possiblity1[p1.index(v[0])]
            res[idx2] = possiblity2[p2.index(v[1])]
            return res
        if len(is_dup) == 3:
            single_state = {c:s for c,s in data.items() if c not in dup_ctg}
            for ctg,state in single_state.items():
                idx = keymap.index(ctg)
                res[idx] = mapping[ctg][str(state)]
                counter_flag += len(mapping[ctg][str(state)])
            dup_state = {c:s for c,s in data.items() if c in dup_ctg}
            long = maxium_state_ct - counter_flag
            sample = [[ctg,state]for ctg,state in dup_state.items()]
            possiblity1 = dup[sample[0][0]][str(sample[0][1])]
            possiblity2 = dup[sample[1][0]][str(sample[1][1])]
            possiblity3 = dup[sample[2][0]][str(sample[2][1])]
            p1 = [len(p) for p in possiblity1]
            p2 = [len(p) for p in possiblity2]
            p3 = [len(p) for p in possiblity3]
            p = itertools.product(p1, p2,p3)
            r = None
            for v in p:
                if sum(v) == long or sum(v) == long-1:
                    r = v
                    break
            idx1 = keymap.index(sample[0][0])
            idx2 = keymap.index(sample[1][0])
            idx3 = keymap.index(sample[2][0])
            res[idx1] = possiblity1[p1.index(v[0])]
            res[idx2] = possiblity2[p2.index(v[1])]
            res[idx3] = possiblity3[p3.index(v[2])]
            return res
        if len(is_dup) == 4:
            dup_state = {c:s for c,s in data.items() if c in dup_ctg}
            long = maxium_state_ct - counter_flag
            sample = [[ctg,state]for ctg,state in dup_state.items()]
            possiblity1 = dup[sample[0][0]][str(sample[0][1])]
            possiblity2 = dup[sample[1][0]][str(sample[1][1])]
            possiblity3 = dup[sample[2][0]][str(sample[2][1])]
            possiblity4 = dup[sample[3][0]][str(sample[3][1])]
            p1 = [len(p) for p in possiblity1]
            p2 = [len(p) for p in possiblity2]
            p3 = [len(p) for p in possiblity3]
            p4 = [len(p) for p in possiblity4]
            p = itertools.product(p1, p2,p3,p4)
            r = None
            for v in p:
                if sum(v) == long or sum(v) == long-1:
                    r = v
                    break
            idx1 = keymap.index(sample[0][0])
            idx2 = keymap.index(sample[1][0])
            idx3 = keymap.index(sample[2][0])
            idx4 = keymap.index(sample[3][0])
            res[idx1] = possiblity1[p1.index(v[0])]
            res[idx2] = possiblity2[p2.index(v[1])]
            res[idx3] = possiblity3[p3.index(v[2])]
            res[idx4] = possiblity4[p4.index(v[3])]
            return res

    def setPreview(self):
        if platform.system() == 'Windows':
            rootdir = os.path.join(os.getenv('USERPROFILE'), 'ArtifacterImageOutput')
        else:
            rootdir = os.path.join(os.getenv('HOME'), 'ArtifacterImageOutput')

    def CheckUID(self):
        if len(self.UIDs.text()) == 9:
            StoreCharacter = json.loads(CharacterJson())
            concurrent.futures.ThreadPoolExecutor().submit(self.ClearList)
            self.PlayerInfo = self.GetPlayerInfo(self.UIDs.text())
            if 'showAvatarInfoList' in self.PlayerInfo:
                self.UserName.setText('ユーザー名: {}'.format(self.PlayerInfo['nickname']))
                self.UserLevel.setText('世界ランク: {}'.format(self.PlayerInfo['level']))
                self.avatar_list = self.PlayerInfo['showAvatarInfoList']
                avatarIcon = QPixmap()
                avatarIcon.loadFromData(urllib.request.urlopen(urllib.request.Request('https://enka.network/ui/{}'.format('{}.png'.format(StoreCharacter['{}'.format(self.PlayerInfo['profilePicture']['avatarId'])]['SideIconName'].replace('UI_AvatarIcon_Side_', 'UI_AvatarIcon_'))), headers={'User-Agent': UsrAgn})).read())
                self.TitleImage.setPixmap(avatarIcon.scaled(90, 90, Qt.KeepAspectRatio, Qt.FastTransformation))
                for index, avatar in enumerate(self.avatar_list):
                    if 3 <= len(avatar['name']):
                        if 'ー' == avatar['name'][-1]:
                            Name = '{} \t\t'.format(avatar['name'])
                        else:
                            Name = '{} \t'.format(avatar['name'])
                    elif len(avatar['name']) == 1:
                        Name = '{} \t\t\t'.format(avatar['name'])
                    else:
                        Name = '{} \t\t'.format(avatar['name'])
                    text = QStandardItem('{}Lv{}'.format(Name, avatar['level']))
                    self.ArtifacterModel.appendRow(text)
                    ListAvatarIcon = QPixmap()
                    ListAvatarIcon.loadFromData(urllib.request.urlopen(urllib.request.Request('https://enka.network/ui/{}'.format('{}.png'.format(StoreCharacter['{}'.format(avatar['avatarId'])]['SideIconName'].replace('UI_AvatarIcon_Side_', 'UI_AvatarIcon_'))), headers={'User-Agent': UsrAgn})).read())
                    text.setData(QIcon(ListAvatarIcon.scaled(128, 128, Qt.KeepAspectRatio, Qt.FastTransformation)), Qt.DecorationRole)
                self.Artifacterlist.setModel(self.ArtifacterModel)

    def ClearList(self):
        [[self.ArtifacterModel.removeRow(i) for i in range(self.ArtifacterModel.rowCount())] for _ in range(8)]

def main():
    app = QApplication(sys.argv)
    main_window = QMainWindow()
    ui_window = Ui_ArtifacterImageGenerator()
    ui_window.setupUi(main_window)
    main_window.setFixedSize(main_window.size())
    main_window.show()
    sys.exit(app.exec())

if __name__ == '__main__':
    main()
